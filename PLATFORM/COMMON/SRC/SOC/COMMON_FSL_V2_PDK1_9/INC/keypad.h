//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
//
//------------------------------------------------------------------------------
//
//  Copyright (C) 2007-2009, Freescale Semiconductor, Inc. All Rights Reserved.
//  THIS SOURCE CODE, AND ITS USE AND DISTRIBUTION, IS SUBJECT TO THE TERMS
//  AND CONDITIONS OF THE APPLICABLE LICENSE AGREEMENT
//
//------------------------------------------------------------------------------
//
//  File:  KeyPad.h
//
//-----------------------------------------------------------------------------

#ifndef __KEYPAD_H__
#define __KEYPAD_H__

#pragma warning(push)
#pragma warning(disable: 4115 4201 4204 4214 4127)
#include <wdm.h>
#pragma warning(pop)

//-----------------------------------------------------------------------------
// Defines

#define LRADC_FID                               _T("LDC1:")

#define KEYPAD_VALID_MAX                        12
#define KEYPAD_DEFAULT_TOTAL                    11
#define KEYPAD_INVALID_INDEX                    0x80000000
#define KEYPAD_MAX_NAME                         32
#define KEYPAD_MAX_APP_NAME                     64
#define KEYPAD_MAX_PARM_NAME                    64
#define KEYPAD_MAX_PATH_NAME                    128

// IOCTL Codes
#define FILE_DEVICE_KEYPAD              (FILE_AUTOGENERATED_DEVICE_NAME+0x100)
#define IOCTL_KEYPAD_START_TEST         CTL_CODE(FILE_DEVICE_KEYPAD, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KEYPAD_STOP_TEST          CTL_CODE(FILE_DEVICE_KEYPAD, 1, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define  WM_DEVICE_KEYPAD               (WM_APP+1)
#define  WPARAM_KEYPAD_PRESS            ((WPARAM ) 10000)
#define  WPARAM_KEYPAD_RELEASE          ((WPARAM ) 10001)

#define  LPARAM_KEYPAD_PRESS(x)         ((LPARAM ) x)
#define  LPARAM_KEYPAD_PRESS_SW10       ((LPARAM ) 0)
#define  LPARAM_KEYPAD_PRESS_SW14       ((LPARAM ) 1)
#define  LPARAM_KEYPAD_PRESS_SW08       ((LPARAM ) 2)
#define  LPARAM_KEYPAD_PRESS_SW05       ((LPARAM ) 3)
#define  LPARAM_KEYPAD_PRESS_SW12       ((LPARAM ) 4)
#define  LPARAM_KEYPAD_PRESS_SW13       ((LPARAM ) 5)
#define  LPARAM_KEYPAD_PRESS_SW06       ((LPARAM ) 6)
#define  LPARAM_KEYPAD_PRESS_SW07       ((LPARAM ) 7)
#define  LPARAM_KEYPAD_PRESS_SW04       ((LPARAM ) 8)
#define  LPARAM_KEYPAD_PRESS_SW09       ((LPARAM ) 9)
#define  LPARAM_KEYPAD_PRESS_SW11       ((LPARAM ) 10)


#define KEYPAD_SAMPLE_INVALID           (0xE4A-(KEYPAD_DEFAULT_HYSTERESIS/2))   // vk_none
// Keypad default value
#define KEYPAD_DEFAULT_PRIORITY_IST         255
#define KEYPAD_DEFAULT_REPEAT_LANTENCY      1000
#define KEYPAD_DEFAULT_PERIOD_SAMPLE        20
#define KEYPAD_DEFAULT_REPEAT_RATE          10

#define KEYPAD_DEFAULT_TICKS_DEBOUNCE        2
#define KEYPAD_DEFAULT_TICKS_BEFORE_REPEAT  (KEYPAD_DEFAULT_REPEAT_LANTENCY/KEYPAD_DEFAULT_PERIOD_SAMPLE)
#define KEYPAD_DEFAULT_TICKS_REPEAT             ((1000/KEYPAD_DEFAULT_REPEAT_RATE)/KEYPAD_DEFAULT_PERIOD_SAMPLE)

#define KEYPAD_DEFAULT_LRADC_CONVERTER      LRADC_CH_USER1
#define KEYPAD_DEFAULT_LRADC_REFERENCE      LRADC_CH_VDDIO
#define KEYPAD_DEFAULT_SCHEDULER                0

#define KEYPAD_DEFAULT_HYSTERESIS               0x80

// Keypad Registry name
#define KEYPAD_REG_ROOT_PATH                    TEXT("Drivers\\BuiltIn\\KeyPadS")
#define KEYPAD_REG_ROOT_PATH_SINGLE_KEY         TEXT("Drivers\\BuiltIn\\KeyPadS\\Key%u")

// KeyPad Valid Keys
#define KEYPAD_REG_VALID_KEYS                   TEXT("ValidKeys")
#define KEYPAD_REG_LRADC_KEYPAD                 TEXT("LRADC_KeyPAD")
#define KEYPAD_REG_LRADC_REFERENCE              TEXT("LRADC_Reference")
#define KEYPAD_REG_LRADC_SCHEDULER              TEXT("LRADC_SCHEDULER")
#define KEYPAD_REG_ADC_HYSTERESIS               TEXT("Hysteresis")
#define KEYPAD_REG_ADC_RELEASE_VOLTAGE          TEXT("ReleaseVolatge")

#define KEYPAD_REG_SCANPERIOD                   TEXT("ScanPeriod")
#define KEYPAD_REG_REPEAT_LENTENCY              TEXT("RepeatLantency")
#define KEYPAD_REG_REPEAT_RATE                  TEXT("RepeatRate")
#define KEYPAD_REG_SCAN_DEBOUNCE                TEXT("Debounce")

#define KEYPAD_REG_KEY_NAME                     TEXT("KeyName")
#define KEYPAD_REG_APP_NAME                     TEXT("AppName")
#define KEYPAD_REG_APP_PARAM                    TEXT("AppParam")
#define KEYPAD_REG_VOLTAGE                      TEXT("Voltage")
#define KEYPAD_REG_FLAG                         TEXT("Flag")
#define KEYPAD_REG_VIRTUAL_KEY                  TEXT("VirtualKey")

// voltages for each key

// LRADC Channels
#define  LRADC_CH_USER0                         0
#define  LRADC_CH_USER1                         1
#define  LRADC_CH_TOUCH_XPLUSE          2
#define  LRADC_CH_TOUCH_XMINUS          4
#define  LRADC_CH_TOUCH_YPLUSE          3
#define  LRADC_CH_TOUCH_YMINUS          5
#define  LRADC_CH_REFERENCE                     6
#define  LRADC_CH_VDDIO                         6
#define  LRADC_CH_BATTERY                       7
#define  LRADC_CH_TEMPERTURE0           8
#define  LRADC_CH_TEMPERTURE1           9
#define  LRADC_CH_USB_DP                        12
#define  LRADC_CH_USB_DM                        13
#define  LRADC_CH_BANDGAP                       14
#define  LRADC_CH_VDD5V                         15

#define BUILD_KEYPAD_DEFAULT_LRADC()            {               \
        KEYPAD_DEFAULT_HYSTERESIS,                             \
        KEYPAD_SAMPLE_INVALID,                                 \
        KEYPAD_DEFAULT_LRADC_CONVERTER,                \
        KEYPAD_DEFAULT_LRADC_REFERENCE,                \
}


#ifndef ARRAYSIZE
#define ARRAYSIZE(Array)                (sizeof(Array) / sizeof((Array)[0]))
#endif

//-----------------------------------------------------------------------------
// Types
typedef struct _FSL_KEYPAD_ATTR {
    WCHAR szKeyName[KEYPAD_MAX_NAME];
    WCHAR szApplicationName[KEYPAD_MAX_APP_NAME];
    WCHAR szParameter[KEYPAD_MAX_PARM_NAME];
    HANDLE hEvent;
    DWORD dwVoltage;
    DWORD dwFlag;
    DWORD dwVitualKey;
} FSL_KEYPAD_ATTR, *PFSL_KEYPAD_ATTR;

typedef struct _FSL_LRADC_CHANNEL {
    DWORD dwHysteresis;
    DWORD dwSampleDepressed;
    DWORD dwCh_KeyPAD;
    DWORD dwCh_Ref;
} FSL_LRADC_CHANNEL, *PFSL_LRADC_CHANNEL;

typedef struct _FSL_DATA_THREAD_APP {
    DWORD dwMaxEvent;                                                           // valid event in hEvent[]
    HANDLE hEvent[KEYPAD_VALID_MAX];                            // correspond keypad application event
    LPTSTR lpszApplicationName[KEYPAD_VALID_MAX];       // correspond keypad application name
    HANDLE hThread;                                        // handle to the Application thread
    BOOL fTerminate;                                       // flag used for termination of the thread
} FSL_DATA_THREAD_APP, *PFSL_DATA_THREAD_APP;

typedef struct _FSL_DATA_THREAD_IST {
    DWORD dwSysIntr;
    DWORD dwPriority;
    HANDLE hEvent;
    HANDLE hThread;
    BOOL fTerminate;
} FSL_DATA_THREAD_IST, *PFSL_DATA_THREAD_IST;

typedef enum {
    KEYPAD_ATTR_APP     = 0x00000001,
    KEYPAD_ATTR_REPEAT  = 0x00000002,
    KEYPAD_ATTR_MOUSE   = 0x00000003,
};

typedef enum {
    KEYPAD_STATE_IDLE=0,
    KEYPAD_STATE_DEBOUNCE,
    KEYPAD_STATE_REPEAT_PENDING,
    KEYPAD_STATE_REPEAT,
    KEYPAD_STATE_WAIT_RELEASED,
    KEYPAD_STATE_BAD
};

//-----------------------------------------------------------------------------
// Keypad class

class CSP_KEYPAD {
public:

    static DWORD RelayThreadApp(LPVOID pData)
    {
        return ((CSP_KEYPAD *) pData)->KeyPadAppThread();
    };
    static DWORD RelayThreadIST(LPVOID pData)
    {
        return ((CSP_KEYPAD *) pData)->KeyPadInterruptThread();
    };

    DWORD KeyPadInterruptThread(VOID);
    DWORD KeyPadAppThread(VOID);

    virtual  VOID  KeypadBspInit(VOID);
    virtual  DWORD KeypadBspGetIrq(VOID);
    virtual  DWORD KeypadBspGetLradcCh(VOID);
    virtual  BOOL  GetRegistry(VOID);
    virtual  void  KeypadBspClearIrq(VOID);
    
    BOOL IOControl(DWORD Handle,
                   DWORD dwIoControlCode,
                   PBYTE pInBuf,
                   DWORD nInBufSize,
                   PBYTE pOutBuf,
                   DWORD nOutBufSize,
                   PDWORD pBytesReturned);


    DWORD m_Context;

    FSL_KEYPAD_ATTR m_KeypadAttibute[KEYPAD_VALID_MAX];

    static DWORD m_dwValidKeys;

    static DWORD m_dwStateMachine;
    static DWORD m_dwTicksDebounce;
    static DWORD m_dwTicksRepeat;
    static DWORD m_dwTicksBeforeRepeat;
    static DWORD m_dwRepeatRate;

    // record the pass tick for scan
    static DWORD m_dwTicks;

    // hold last key index
    static DWORD m_dwLastKeyIndex;
    static DWORD m_dwCurKeyIndex;
    static BOOL m_fSendKeyDown;
    static FSL_LRADC_CHANNEL m_hwLRADC;
   
    static HWND mHWND_Test;

    FSL_DATA_THREAD_APP m_DataApp;
    FSL_DATA_THREAD_IST m_DataIST;

    BOOL  KeypadAlloc(VOID);
    VOID  KeypadDeAlloc(VOID);

    inline DWORD  hw_GetCurentSample(VOID);

    inline BOOL   IsSampleMatch(DWORD center, DWORD Sample);
    DWORD                 SearchKey(DWORD Sample);
    VOID                  VerifyKeyAndExecute(DWORD NextState, DWORD NextTicks);
    VOID                  TriggerConversion(DWORD Channel);
};



class BSP_KEYPAD:public CSP_KEYPAD {

public:
    BSP_KEYPAD(){
    };                          //Constructor
    ~BSP_KEYPAD(){DeInit();};           //Destructor
    BOOL Init(DWORD Context);
    VOID DeInit(VOID);
    VOID  KeypadBspInit(VOID);
    DWORD KeypadBspGetIrq(VOID);
    DWORD KeypadBspGetLradcCh(VOID);
    void  KeypadBspClearIrq(VOID);
    BOOL GetRegistry(VOID);
    
    static FSL_KEYPAD_ATTR m_KeypadAttibute_evk[KEYPAD_VALID_MAX];
    static FSL_KEYPAD_ATTR m_KeypadAttibute_dev[KEYPAD_VALID_MAX];   

    HANDLE m_hLRADC;
};

#endif //__KEYPAD_H__
