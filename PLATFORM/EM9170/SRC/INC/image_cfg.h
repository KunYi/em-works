//------------------------------------------------------------------------------
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft end-user
// license agreement (EULA) under which you licensed this SOFTWARE PRODUCT.
// If you did not accept the terms of the EULA, you are not authorized to use
// this source code. For a copy of the EULA, please see the LICENSE.RTF on your
// install media.
//
//------------------------------------------------------------------------------
//
//  Copyright (C) 2004-2009, Freescale Semiconductor, Inc. All Rights Reserved.
//  THIS SOURCE CODE, AND ITS USE AND DISTRIBUTION, IS SUBJECT TO THE TERMS
//  AND CONDITIONS OF THE APPLICABLE LICENSE AGREEMENT
//
//------------------------------------------------------------------------------
//
//  File:  image_cfg.h
//
//  Defines configuration parameters used to create the NK and Bootloader
//  program images.
//
//------------------------------------------------------------------------------
#ifndef __IMAGE_CFG_H
#define __IMAGE_CFG_H

#if __cplusplus
extern "C" {
#endif

//------------------------------------------------------------------------------
//  RESTRICTION
//
//  This file is a configuration file. It should ONLY contain simple #define
//  directives defining constants. This file is included by other files that
//  only support simple substitutions.
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  NAMING CONVENTION
//
//  The IMAGE_ naming convention ...
//
//  IMAGE_<NAME>_<SECTION>_<MEMORY_DEVICE>_[OFFSET|SIZE|START|END]
//
//      <NAME>          - WINCE, BOOT, SHARE
//      <SECTION>       - section name: user defined
//      <MEMORY_DEVICE> - the memory device the block resides on
//      OFFSET          - number of bytes from memory device start address
//      SIZE            - maximum size of the block
//      START           - start address of block    (device address + offset)
//      END             - end address of block      (start address  + size - 1)
//
//------------------------------------------------------------------------------
#define IMAGE_BOOT_RAM_PA_START         CSP_BASE_MEM_PA_CSD0


//------------------------------------------------------------------------------
// Internal RAM Mapping (128 KB)
#define IMAGE_WINCE_IRAM_PA_START           CSP_BASE_MEM_PA_IRAM
#define IMAGE_WINCE_IRAM_SIZE               (128*1024)

// 4K minus 256 bytes reserved for SDMA data structures
#define IMAGE_WINCE_DDKSDMA_IRAM_OFFSET     (0)
#define IMAGE_WINCE_DDKSDMA_IRAM_PA_START   (IMAGE_WINCE_IRAM_PA_START+IMAGE_WINCE_DDKSDMA_IRAM_OFFSET)
#define IMAGE_WINCE_DDKSDMA_IRAM_SIZE       (4*1024)

// 12K reserved for internal audio buffers
#define IMAGE_WINCE_AUDIO_IRAM_OFFSET       (IMAGE_WINCE_DDKSDMA_IRAM_OFFSET+IMAGE_WINCE_DDKSDMA_IRAM_SIZE)
#define IMAGE_WINCE_AUDIO_IRAM_PA_START     (IMAGE_WINCE_IRAM_PA_START+IMAGE_WINCE_AUDIO_IRAM_OFFSET)
#define IMAGE_WINCE_AUDIO_IRAM_SIZE         (12*1024)


//------------------------------------------------------------------------------
// RAM image defines
#define IMAGE_BOOT_RAMDEV_RAM_PA_START	IMAGE_BOOT_RAM_PA_START
#define IMAGE_BOOT_RAMDEV_RAM_SIZE			(64*1024*1024)
#define IMAGE_BOOT_RAMDEV_RAM_PA_END		(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_RAMDEV_RAM_SIZE-1)

// Share args
#define IMAGE_SHARE_ARGS_RAM_OFFSET         0
#define IMAGE_SHARE_ARGS_RAM_PA_START		(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_SHARE_ARGS_RAM_OFFSET)
#define IMAGE_SHARE_ARGS_UA_START				OALPAtoVA(IMAGE_SHARE_ARGS_RAM_PA_START, FALSE)
#define IMAGE_SHARE_ARGS_RAM_SIZE				(4*1024)

// CSPDDK reserved
#define IMAGE_WINCE_CSPDDK_RAM_OFFSET			(IMAGE_SHARE_ARGS_RAM_OFFSET+IMAGE_SHARE_ARGS_RAM_SIZE)
#define IMAGE_WINCE_CSPDDK_RAM_PA_START		(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_WINCE_CSPDDK_RAM_OFFSET)
#define IMAGE_WINCE_CSPDDK_RAM_SIZE				(32*1024)
#define IMAGE_WINCE_DDKSDMA_RAM_PA_START	(IMAGE_WINCE_CSPDDK_RAM_PA_START)
#define IMAGE_WINCE_DDKSDMA_RAM_SIZE			(16*1024)
#define IMAGE_WINCE_DDKCLK_RAM_PA_START		(IMAGE_WINCE_CSPDDK_RAM_PA_START+IMAGE_WINCE_DDKSDMA_RAM_SIZE)
#define IMAGE_WINCE_DDKCLK_RAM_UA_START     OALPAtoVA(IMAGE_WINCE_DDKCLK_RAM_PA_START, FALSE)
#define IMAGE_WINCE_DDKCLK_RAM_SIZE				(16*1024)

// XLDR image / Stack space for boot procedure
#define IMAGE_BOOT_XLDR_RAM_OFFSET			(IMAGE_SHARE_ARGS_RAM_OFFSET+IMAGE_SHARE_ARGS_RAM_SIZE)
#define IMAGE_BOOT_XLDR_RAM_START				(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_XLDR_RAM_OFFSET)
#define IMAGE_BOOT_XLDR_RAM_SIZE					(236*1024)				// -> 0x3B000
// Stack grows downward.  Start must be at top of reserved region.
#define IMAGE_BOOT_STACK_RAM_START			(IMAGE_BOOT_XLDR_RAM_START+IMAGE_BOOT_XLDR_RAM_SIZE)

// Page table
#define IMAGE_BOOT_BOOTPT_RAM_OFFSET		(IMAGE_BOOT_XLDR_RAM_OFFSET+IMAGE_BOOT_XLDR_RAM_SIZE)
#define IMAGE_BOOT_BOOTPT_RAM_PA_START   (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_BOOTPT_RAM_OFFSET)
#define IMAGE_BOOT_BOOTPT_RAM_SIZE			(16*1024)
#define IMAGE_BOOT_BOOTPT_RAM_PA_END		(IMAGE_BOOT_BOOTPT_RAM_PA_START+IMAGE_BOOT_BOOTPT_RAM_SIZE-1)

// EBOOT image
#define IMAGE_BOOT_BOOTIMAGE_RAM_OFFSET     (IMAGE_BOOT_BOOTPT_RAM_OFFSET+IMAGE_BOOT_BOOTPT_RAM_SIZE)
#define IMAGE_BOOT_BOOTIMAGE_RAM_PA_START	(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_BOOTIMAGE_RAM_OFFSET)
#define IMAGE_BOOT_BOOTIMAGE_RAM_SIZE			(256*1024)
#define IMAGE_BOOT_BOOTIMAGE_RAM_PA_END		(IMAGE_BOOT_BOOTIMAGE_RAM_PA_START+IMAGE_BOOT_BOOTIMAGE_RAM_SIZE-1)

// RAM used during boot process
#define IMAGE_BOOT_SPARE_RAM_OFFSET			(IMAGE_BOOT_BOOTIMAGE_RAM_OFFSET+IMAGE_BOOT_BOOTIMAGE_RAM_SIZE)
#define IMAGE_BOOT_SPARE_RAM_PA_START		(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_SPARE_RAM_OFFSET)
//#define IMAGE_BOOT_SPARE_RAM_SIZE				(256*1024)
//
// CS&ZHL MAY-5-2011: add 512KB to contain frame buffer of LCDC for splash screen
//
#define IMAGE_BOOT_SPARE_RAM_SIZE				(768*1024)

// USB KITL DMA buffer
#define IMAGE_USB_KITL_RAM_OFFSET				(IMAGE_BOOT_SPARE_RAM_OFFSET+IMAGE_BOOT_SPARE_RAM_SIZE)
#define IMAGE_USB_KITL_RAM_PA_START			(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_USB_KITL_RAM_OFFSET)
#define IMAGE_USB_KITL_RAM_SIZE					(240*1024)				// -> 0x3C000

// FEC DMA buffer
#define IMAGE_SHARE_FEC_RAM_OFFSET			(IMAGE_USB_KITL_RAM_OFFSET+IMAGE_USB_KITL_RAM_SIZE)
#define IMAGE_SHARE_FEC_RAM_PA_START        (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_SHARE_FEC_RAM_OFFSET)
#define IMAGE_SHARE_FEC_RAM_SIZE					(16*1024)

// Run-time image memory
//#define IMAGE_BOOT_NKIMAGE_RAM_OFFSET			(0x100000)
//
// CS&ZHL MAY-5-2011: move to 2MB-point
//
#define IMAGE_BOOT_NKIMAGE_RAM_OFFSET			(0x200000)
#define IMAGE_BOOT_NKIMAGE_RAM_PA_START		(IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_NKIMAGE_RAM_OFFSET)
#define IMAGE_BOOT_NKIMAGE_RAM_SIZE				(IMAGE_BOOT_RAMDEV_RAM_SIZE-IMAGE_BOOT_NKIMAGE_RAM_OFFSET)
#define IMAGE_BOOT_NKIMAGE_RAM_PA_END			(IMAGE_BOOT_NKIMAGE_RAM_PA_START+IMAGE_BOOT_NKIMAGE_RAM_SIZE-1)


//------------------------------------------------------------------------------
// NAND flash image defines

// NOTE:  EBOOT assumes these NAND regions are block-aligned

// Define a special unused SOC address range that can be used to detect when an
// image is destined for NAND flash
#define IMAGE_BOOT_NANDDEV_NAND_PA_START		CSP_BASE_REG_PA_NANDFC
//#define IMAGE_BOOT_NANDDEV_RESERVED_SIZE			(36 * 1024 * 1024)
//#define IMAGE_BOOT_NANDDEV_RESERVED_SIZE			(40 * 1024 * 1024)				//CS&ZHL MAY-17-2011: change to 40MB
#define IMAGE_BOOT_NANDDEV_RESERVED_SIZE			(42 * 1024 * 1024)				//CS&ZHL AUG-12-2011: change to 42MB
#define IMAGE_BOOT_NANDDEV_NAND_PA_END			(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_NANDDEV_RESERVED_SIZE-1)

//
// CS&ZHL MAY-17-2011: assume BlockSize = 2048 * 128 = 256KB
//                                      re-allocate all items as follows
//
#define IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET		(0)
#define IMAGE_BOOT_XLDRIMAGE_NAND_PA_START	(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET)
#define IMAGE_BOOT_XLDRIMAGE_NAND_SIZE				(1 * 128 * 2048)				// -> 1 Block
#define IMAGE_BOOT_XLDRIMAGE_NAND_PA_END		(IMAGE_BOOT_XLDRIMAGE_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE-1U)

// EBOOT_START = 0x0004_0000
#define IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET		(IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE)
#define IMAGE_BOOT_BOOTIMAGE_NAND_PA_START	(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET)
#define IMAGE_BOOT_BOOTIMAGE_NAND_SIZE			(2 * 128 * 2048)				// -> 2 Blocks, use 1 block = 256KB only
#define IMAGE_BOOT_BOOTIMAGE_NAND_PA_END		(IMAGE_BOOT_BOOTIMAGE_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_SIZE-1U)

// EBOOT_CFG_START = 0x000C_0000
#define IMAGE_BOOT_BOOTCFG_NAND_OFFSET			(IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET + IMAGE_BOOT_BOOTIMAGE_NAND_SIZE)
#define IMAGE_BOOT_BOOTCFG_NAND_PA_START		(IMAGE_BOOT_NANDDEV_NAND_PA_START + IMAGE_BOOT_BOOTCFG_NAND_OFFSET)
#define IMAGE_BOOT_BOOTCFG_NAND_SIZE				(2 * 128 * 2048)				// -> 2 Blocks, use size <= 128KB
#define IMAGE_BOOT_BOOTCFG_NAND_PA_END			(IMAGE_BOOT_BOOTCFG_NAND_PA_START + IMAGE_BOOT_BOOTCFG_NAND_SIZE-1)

// SPLASH_START = 0x0014_0000
#define IMAGE_BOOT_SPLASH_NAND_OFFSET				(IMAGE_BOOT_BOOTCFG_NAND_OFFSET + IMAGE_BOOT_BOOTCFG_NAND_SIZE)
#define IMAGE_BOOT_SPLASH_NAND_PA_START			(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_SPLASH_NAND_OFFSET)
#define IMAGE_BOOT_SPLASH_NAND_SIZE					(3 * 128 * 2048)				// -> 3 blocks, use size = 470KB

// MBR_START = 0x0020_0000 for BinFS, MBR = Master Boot Record
#define IMAGE_BOOT_MBR_NAND_OFFSET					(IMAGE_BOOT_SPLASH_NAND_OFFSET + IMAGE_BOOT_SPLASH_NAND_SIZE)
#define IMAGE_BOOT_MBR_NAND_PA_START				(IMAGE_BOOT_NANDDEV_NAND_PA_START + IMAGE_BOOT_MBR_NAND_OFFSET)
#define IMAGE_BOOT_MBR_NAND_UA_START				((DWORD)OALPAtoUA(IMAGE_BOOT_MBR_NAND_PA_START))
#define IMAGE_BOOT_MBR_NAND_CA_START				((DWORD)OALPAtoCA(IMAGE_BOOT_MBR_NAND_PA_START))
#define IMAGE_BOOT_MBR_NAND_SIZE						(2 * 128 * 2048)				// -> 2 blocks, use size = 128KB
#define IMAGE_BOOT_MBR_NAND_PA_END					(IMAGE_BOOT_MBR_NAND_PA_START + IMAGE_BOOT_MBR_NAND_SIZE - 1)

// NK_START = 0x0028_0000
#define IMAGE_BOOT_NKIMAGE_NAND_OFFSET			(IMAGE_BOOT_MBR_NAND_OFFSET + IMAGE_BOOT_MBR_NAND_SIZE)
#define IMAGE_BOOT_NKIMAGE_NAND_PA_START		(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_OFFSET)
#define IMAGE_BOOT_NKIMAGE_NAND_UA_START		((DWORD)OALPAtoUA(IMAGE_BOOT_NKIMAGE_NAND_PA_START))		//map -> 0xA1580000
#define IMAGE_BOOT_NKIMAGE_NAND_CA_START		((DWORD)OALPAtoCA(IMAGE_BOOT_NKIMAGE_NAND_PA_START))		//map -> 0x91580000
//#define IMAGE_BOOT_NKIMAGE_NAND_SIZE				(128 * 128 * 2048)			// -> 128 blocks = 128 * 256KB = 32MB
// CS&ZHL MAY-26-2011: change to 37.5MB
//#define IMAGE_BOOT_NKIMAGE_NAND_SIZE				(150 * 128 * 2048)			// -> 150 blocks = 150 * 256KB = 37.5MB
// CS&ZHL MAY-26-2011: change to 39.5MB
#define IMAGE_BOOT_NKIMAGE_NAND_SIZE				(158 * 128 * 2048)			// -> 158 blocks = 158 * 256KB = 39.5MB
#define IMAGE_BOOT_NKIMAGE_NAND_PA_END			(IMAGE_BOOT_NKIMAGE_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_SIZE-1)

// FATFS_START = 0x0280_0000
#define IMAGE_FILE_SYSTEM_NAND_OFFSET				IMAGE_BOOT_NANDDEV_RESERVED_SIZE			// -> 42MB

/*
#define IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET		(0)
#define IMAGE_BOOT_XLDRIMAGE_NAND_PA_START	(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET)
#define IMAGE_BOOT_XLDRIMAGE_NAND_SIZE				(3 * 128 * 4096)
#define IMAGE_BOOT_XLDRIMAGE_NAND_PA_END		(IMAGE_BOOT_XLDRIMAGE_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE-1U)

#define IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET		(IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE)
#define IMAGE_BOOT_BOOTIMAGE_NAND_PA_START	(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET)
#define IMAGE_BOOT_BOOTIMAGE_NAND_SIZE			(2 * 128 * 4096)
#define IMAGE_BOOT_BOOTIMAGE_NAND_PA_END		(IMAGE_BOOT_BOOTIMAGE_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_SIZE-1U)

#define IMAGE_BOOT_NKIMAGE_NAND_OFFSET			(IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET+IMAGE_BOOT_BOOTIMAGE_NAND_SIZE)
#define IMAGE_BOOT_NKIMAGE_NAND_PA_START		(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_OFFSET)
#define IMAGE_BOOT_NKIMAGE_NAND_SIZE				(32 * 1024 * 1024)
#define IMAGE_BOOT_NKIMAGE_NAND_PA_END			(IMAGE_BOOT_NKIMAGE_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_SIZE-1)

// Boot configuration
#define IMAGE_BOOT_BOOTCFG_NAND_OFFSET			(IMAGE_BOOT_NKIMAGE_NAND_OFFSET + IMAGE_BOOT_NKIMAGE_NAND_SIZE)
#define IMAGE_BOOT_BOOTCFG_NAND_PA_START		(IMAGE_BOOT_NANDDEV_NAND_PA_START + IMAGE_BOOT_BOOTCFG_NAND_OFFSET)
#define IMAGE_BOOT_BOOTCFG_NAND_SIZE				(2 * 128 * 4096)
#define IMAGE_BOOT_BOOTCFG_NAND_PA_END			(IMAGE_BOOT_BOOTCFG_NAND_PA_START + IMAGE_BOOT_BOOTCFG_NAND_SIZE-1)

//
// CS&ZHL MAY-14-2011: define the offset of nandflash file system -> 0x02380000 -> 35.5MB
//
#define IMAGE_FILE_SYSTEM_NAND_OFFSET				(IMAGE_BOOT_BOOTCFG_NAND_OFFSET + IMAGE_BOOT_BOOTCFG_NAND_SIZE)

//
// CS&ZHL MAY-4-2011: define nand flash space to store splash bmp
//
#define IMAGE_BOOT_EBOOT_NAND_SIZE					(3 * 64 * 2048)		// 3 block * 64 sectors per block * 2048 bytes per sector
#define IMAGE_BOOT_SPLASH_NAND_OFFSET				(IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET+IMAGE_BOOT_EBOOT_NAND_SIZE)
#define IMAGE_BOOT_SPLASH_NAND_PA_START			(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_SPLASH_NAND_OFFSET)
#define IMAGE_BOOT_SPLASH_NAND_SIZE					(5 * 64 * 2048)		// 5 block * 64 sectors per block * 2048 bytes per sector
*/
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// SDHC flash image defines

// NOTE:  EBOOT/SBOOT assumes these SDHC regions are block-aligned

// Define a special unused SOC address range that can be used to detect when an
// image is destined for SD/MMC Memory
// Assuming a minimum size of 36MB card to support all images
#define IMAGE_BOOT_SDHCDEV_SD_PA_START      CSP_BASE_MEM_PA_IRAM
#define IMAGE_BOOT_SDHCDEV_SD_SIZE          (36*1024*1024)
#define IMAGE_BOOT_SDHCDEV_SD_PA_END        (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_SDHCDEV_SD_SIZE-1)

#define IMAGE_BOOT_MBR_SD_OFFSET            (0)
#define IMAGE_BOOT_MBR_SD_PA_START          (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_MBR_SD_OFFSET)
#define IMAGE_BOOT_MBR_SD_SIZE              (1024)
#define IMAGE_BOOT_MBR_SD_PA_END            (IMAGE_BOOT_MBR_SD_PA_START+IMAGE_BOOT_MBR_SD_SIZE - 1U)

#define IMAGE_BOOT_XLDRIMAGE_SD_OFFSET      (IMAGE_BOOT_MBR_SD_OFFSET+IMAGE_BOOT_MBR_SD_SIZE)
#define IMAGE_BOOT_XLDRIMAGE_SD_PA_START    (IMAGE_BOOT_MBR_SD_PA_START+IMAGE_BOOT_XLDRIMAGE_SD_OFFSET)
#define IMAGE_BOOT_XLDRIMAGE_SD_SIZE        (127*1024)
#define IMAGE_BOOT_XLDRIMAGE_SD_PA_END      (IMAGE_BOOT_XLDRIMAGE_SD_PA_START+IMAGE_BOOT_XLDRIMAGE_SD_SIZE-1U)

#define IMAGE_BOOT_BOOTIMAGE_SD_OFFSET      (IMAGE_BOOT_XLDRIMAGE_SD_OFFSET+IMAGE_BOOT_XLDRIMAGE_SD_SIZE)
#define IMAGE_BOOT_BOOTIMAGE_SD_PA_START    (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_BOOTIMAGE_SD_OFFSET)
#define IMAGE_BOOT_BOOTIMAGE_SD_SIZE        (256*1024)
#define IMAGE_BOOT_BOOTIMAGE_SD_PA_END      (IMAGE_BOOT_BOOTIMAGE_SD_PA_START+IMAGE_BOOT_BOOTIMAGE_SD_SIZE-1U)

// next 128K  reserved for boot configuration
#define IMAGE_BOOT_BOOTCFG_SD_OFFSET        (IMAGE_BOOT_BOOTIMAGE_SD_OFFSET+IMAGE_BOOT_BOOTIMAGE_SD_SIZE)
#define IMAGE_BOOT_BOOTCFG_SD_PA_START      (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_BOOTCFG_SD_OFFSET)
#define IMAGE_BOOT_BOOTCFG_SD_SIZE          (128*1024)
#define IMAGE_BOOT_BOOTCFG_SD_PA_END        (IMAGE_BOOT_BOOTCFG_SD_PA_START+IMAGE_BOOT_BOOTCFG_SD_SIZE-1)

//Remaining space for NK
#define IMAGE_BOOT_NKIMAGE_SD_OFFSET        (IMAGE_BOOT_BOOTCFG_SD_OFFSET+IMAGE_BOOT_BOOTCFG_SD_SIZE)
#define IMAGE_BOOT_NKIMAGE_SD_PA_START      (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_NKIMAGE_SD_OFFSET)
#define IMAGE_BOOT_NKIMAGE_SD_SIZE          (IMAGE_BOOT_SDHCDEV_SD_SIZE-IMAGE_BOOT_NKIMAGE_SD_OFFSET)
#define IMAGE_BOOT_NKIMAGE_SD_PA_END        (IMAGE_BOOT_NKIMAGE_SD_PA_START+IMAGE_BOOT_NKIMAGE_SD_SIZE-1)


//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// I2C EEPROM image defines

// Define a special unused SOC address range that can be used to detect when an
// image is destined for I2C EEPROM (note the mapping can not exceed 2MB since SPI Flash uses CSP_BASE_MEM_PA_CSD1 + 2MB
#define IMAGE_BOOT_I2CDEV_ROM_PA_START          CSP_BASE_MEM_PA_CSD1
#define IMAGE_BOOT_I2CDEV_ROM_SIZE              (4*1024)
#define IMAGE_BOOT_I2CDEV_ROM_PA_END            (IMAGE_BOOT_I2CDEV_ROM_SIZE+IMAGE_BOOT_I2CDEV_ROM_SIZE-1)

#define IMAGE_BOOT_XLDRIMAGE_I2C_ROM_OFFSET     (0)
#define IMAGE_BOOT_XLDRIMAGE_I2C_ROM_PA_START   (IMAGE_BOOT_I2CDEV_ROM_PA_START+IMAGE_BOOT_XLDRIMAGE_I2C_ROM_OFFSET)
#define IMAGE_BOOT_XLDRIMAGE_I2C_ROM_SIZE       (8*1024)
#define IMAGE_BOOT_XLDRIMAGE_I2C_ROM_PA_END     (IMAGE_BOOT_XLDRIMAGE_I2C_ROM_PA_START+IMAGE_BOOT_XLDRIMAGE_I2C_ROM_SIZE-1U)

//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// SPI flash image defines

// NOTE:  EBOOT/SBOOT assumes these SPI regions are block-aligned

// Define a special unused SOC address range that can be used to detect when an
// image is destined for SPI Flash
#define IMAGE_BOOT_SPIDEV_FLASH_PA_START    CSP_BASE_MEM_PA_CSD1 + (2*1024*1024)
#define IMAGE_BOOT_SPIDEV_FLASH_SIZE        (2*1024*1024)
#define IMAGE_BOOT_SPIDEV_FLASH_PA_END      (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_SPIDEV_FLASH_SIZE-1)

#define IMAGE_BOOT_XLDRIMAGE_SPI_OFFSET     (0)
#define IMAGE_BOOT_XLDRIMAGE_SPI_PA_START   (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_XLDRIMAGE_SPI_OFFSET)
#define IMAGE_BOOT_XLDRIMAGE_SPI_SIZE       (64*1024)
#define IMAGE_BOOT_XLDRIMAGE_SPI_PA_END     (IMAGE_BOOT_XLDRIMAGE_SPI_PA_START+IMAGE_BOOT_XLDRIMAGE_SPI_SIZE-1U)

#define IMAGE_BOOT_BOOTIMAGE_SPI_OFFSET     (IMAGE_BOOT_XLDRIMAGE_SPI_OFFSET+IMAGE_BOOT_XLDRIMAGE_SPI_SIZE)
#define IMAGE_BOOT_BOOTIMAGE_SPI_PA_START   (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_BOOTIMAGE_SPI_OFFSET)
#define IMAGE_BOOT_BOOTIMAGE_SPI_SIZE       (256*1024)
#define IMAGE_BOOT_BOOTIMAGE_SPI_PA_END     (IMAGE_BOOT_BOOTIMAGE_SPI_PA_START+IMAGE_BOOT_BOOTIMAGE_SPI_SIZE-1U)

// Last 128K of 2MB SPI Flash reserved for boot configuration
#define IMAGE_BOOT_BOOTCFG_SPI_SIZE         (128*1024)
#define IMAGE_BOOT_BOOTCFG_SPI_OFFSET       (IMAGE_BOOT_SPIDEV_FLASH_SIZE-IMAGE_BOOT_BOOTCFG_SPI_SIZE)
#define IMAGE_BOOT_BOOTCFG_SPI_PA_START     (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_BOOTCFG_SPI_OFFSET)
#define IMAGE_BOOT_BOOTCFG_SPI_PA_END       (IMAGE_BOOT_BOOTCFG_SPI_PA_START+IMAGE_BOOT_BOOTCFG_SPI_SIZE-1)

//------------------------------------------------------------------------------

#if __cplusplus
}
#endif

#endif
