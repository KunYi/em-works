//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

/*
================================================================================
*             Texas Instruments OMAP(TM) Platform Software
* (c) Copyright Texas Instruments, Incorporated. All Rights Reserved.
*
* Use of this software is controlled by the terms and conditions found
* in the license agreement under which this software has been supplied.
*
================================================================================
*/

//------------------------------------------------------------------------------
//
//  File:  am33x_prcm.h
//
//  This header file is comprised of PRCM module register details defined as 
//  structures and macros for configuring and controlling PRCM module.

#ifndef __AM33X_PRCM_H
#define __AM33X_PRCM_H

#include "omap_types.h"

#define PRCM_OFS(field)  ((LONG)&(((AM33X_PRCM_REGS*)0)->field)) 

//------------------------------------------------------------------------------
// On AM33X the PRCM module has 0x44E00000 base address
typedef struct {
	REG32	CM_PER_L4LS_CLKSTCTRL;		// 0x0000
	REG32	CM_PER_L3S_CLKSTCTRL;		// 0x0004
	REG32	CM_PER_L4FW_CLKSTCTRL;		// 0x0008
	REG32	CM_PER_L3_CLKSTCTRL;		// 0x000C
	REG32	CM_PER_PCIE_CLKCTRL;		// 0x0010
	REG32	CM_PER_CPGMAC0_CLKCTRL;		// 0x0014
	REG32	CM_PER_LCDC_CLKCTRL;		// 0x0018
	REG32	CM_PER_USB0_CLKCTRL;		// 0x001C
	REG32	CM_PER_MLB_CLKCTRL;			// 0x0020
	REG32	CM_PER_TPTC0_CLKCTRL;		// 0x0024
	REG32	CM_PER_EMIF_CLKCTRL;		// 0x0028
	REG32	CM_PER_OCMCRAM_CLKCTRL;		// 0x002C
	REG32	CM_PER_GPMC_CLKCTRL;		// 0x0030
	REG32	CM_PER_MCASP0_CLKCTRL;		// 0x0034
	REG32	CM_PER_UART5_CLKCTRL;		// 0x0038
	REG32	CM_PER_MMC0_CLKCTRL;		// 0x003C
	REG32	CM_PER_ELM_CLKCTRL;			// 0x0040
	REG32	CM_PER_I2C2_CLKCTRL;		// 0x0044
	REG32	CM_PER_I2C1_CLKCTRL;		// 0x0048
	REG32	CM_PER_SPI0_CLKCTRL;		// 0x004C
	REG32	CM_PER_SPI1_CLKCTRL;		// 0x0050
	REG32	CM_PER_SPI2_CLKCTRL;		// 0x0054
	REG32	CM_PER_SPI3_CLKCTRL;		// 0x0058
	UINT32	res_005C;					
	REG32	CM_PER_L4LS_CLKCTRL;		// 0x0060
	REG32	CM_PER_L4FW_CLKCTRL;		// 0x0064
	REG32	CM_PER_MCASP1_CLKCTRL;		// 0x0068
	REG32	CM_PER_UART1_CLKCTRL;		// 0x006C
	REG32	CM_PER_UART2_CLKCTRL;		// 0x0070
	REG32	CM_PER_UART3_CLKCTRL;		// 0x0074
	REG32	CM_PER_UART4_CLKCTRL;		// 0x0078
	REG32	CM_PER_TIMER7_CLKCTRL;		// 0x007C
	REG32	CM_PER_TIMER2_CLKCTRL;		// 0x0080
	REG32	CM_PER_TIMER3_CLKCTRL;		// 0x0084
	REG32	CM_PER_TIMER4_CLKCTRL;		// 0x0088
	REG32	CM_PER_MCASP2_CLKCTRL;		// 0x008C
	REG32	CM_PER_RNG_CLKCTRL;			// 0x0090
	REG32	CM_PER_AES0_CLKCTRL;		// 0x0094
	REG32	CM_PER_AES1_CLKCTRL;		// 0x0098
	REG32	CM_PER_DES_CLKCTRL;			// 0x009C
	REG32	CM_PER_SHA0_CLKCTRL;		// 0x00A0
	REG32	CM_PER_PKA_CLKCTRL;			// 0x00A4
	REG32	CM_PER_GPIO6_CLKCTRL;		// 0x00A8
	REG32	CM_PER_GPIO1_CLKCTRL;		// 0x00AC
	REG32	CM_PER_GPIO2_CLKCTRL;		// 0x00B0
	REG32	CM_PER_GPIO3_CLKCTRL;		// 0x00B4
	REG32	CM_PER_GPIO4_CLKCTRL;		// 0x00B8
	REG32	CM_PER_TPCC_CLKCTRL;		// 0x00BC
	REG32	CM_PER_DCAN0_CLKCTRL;		// 0x00C0
	REG32	CM_PER_DCAN1_CLKCTRL;		// 0x00C4
	REG32	CM_PER_SPARE_CLKCTRL;		// 0x00C8
	REG32	CM_PER_EPWMSS1_CLKCTRL;		// 0x00CC
	REG32	CM_PER_EMIF_FW_CLKCTRL;		// 0x00D0
	REG32	CM_PER_EPWMSS0_CLKCTRL;		// 0x00D4
	REG32	CM_PER_EPWMSS2_CLKCTRL;		// 0x00D8
	REG32	CM_PER_L3_INSTR_CLKCTRL;	// 0x00DC
	REG32	CM_PER_L3_CLKCTRL;			// 0x00E0
	REG32	CM_PER_IEEE5000_CLKCTRL;	// 0x00E4
	REG32	CM_PER_ICSS_CLKCTRL;		// 0x00E8
	REG32	CM_PER_TIMER5_CLKCTRL;		// 0x00EC
	REG32	CM_PER_TIMER6_CLKCTRL;		// 0x00F0
	REG32	CM_PER_MMC1_CLKCTRL;		// 0x00F4
	REG32	CM_PER_MMC2_CLKCTRL;		// 0x00F8
	REG32	CM_PER_TPTC1_CLKCTRL;		// 0x00FC
	REG32	CM_PER_TPTC2_CLKCTRL;		// 0x0100
	REG32	CM_PER_GPIO5_CLKCTRL;		// 0x0104
	UINT32	res_0108;
	REG32	CM_PER_SPINLOCK_CLKCTRL;	// 0x010C
	REG32	CM_PER_MAILBOX0_CLKCTRL;	// 0x0110
	UINT32  res_0114_0118[2];
	REG32	CM_PER_L4HS_CLKSTCTRL;		// 0x011C
	REG32	CM_PER_L4HS_CLKCTRL;		// 0x0120
	REG32	CM_PER_MSTR_EXPS_CLKCTRL;	// 0x0124
	REG32	CM_PER_SLV_EXPS_CLKCTRL;	// 0x0128
	REG32	CM_PER_OCPWP_L3_CLKSTCTRL;	// 0x012C
	REG32	CM_PER_OCPWP_CLKCTRL;		// 0x0130
	REG32	CM_PER_MAILBOX1_CLKCTRL;	// 0x0134
	REG32	CM_PER_SPARE0_CLKCTRL;		// 0x0138
	REG32	CM_PER_SPARE1_CLKCTRL;		// 0x013C
	REG32	CM_PER_ICSS_CLKSTCTRL;		// 0x0140
	REG32	CM_PER_CPSW_CLKSTCTRL;		// 0x0144
	REG32	CM_PER_LCDC_CLKSTCTRL;		// 0x0148
	REG32	CM_PER_CLKDIV32K_CLKCTRL;	// 0x014C
	REG32	CM_PER_CLK_24MHZ_CLKSTCTRL;	// 0x0150
	UINT32	res_0154_03fc[171];

	REG32	CM_WKUP_CLKSTCTRL;			// 0x0400
	REG32	CM_WKUP_CONTROL_CLKCTRL;	// 0x0404
	REG32	CM_WKUP_GPIO0_CLKCTRL;		// 0x0408
	REG32	CM_WKUP_L4WKUP_CLKCTRL;		// 0x040C
	REG32	CM_WKUP_TIMER0_CLKCTRL;		// 0x0410
	REG32	CM_WKUP_DEBUGSS_CLKCTRL;	// 0x0414
	REG32	CM_L3_AON_CLKSTCTRL;		// 0x0418
	REG32	CM_AUTOIDLE_DPLL_MPU;		// 0x041C
	REG32	CM_IDLEST_DPLL_MPU;			// 0x0420
	REG32	CM_SSC_DELTAMSTEP_DPLL_MPU;	// 0x0424
	REG32	CM_SSC_MODFREQDIV_DPLL_MPU;	// 0x0428
	REG32	CM_CLKSEL_DPLL_MPU;			// 0x042C
	REG32	CM_AUTOIDLE_DPLL_DDR;		// 0x0430
	REG32	CM_IDLEST_DPLL_DDR;			// 0x0434
	REG32	CM_SSC_DELTAMSTEP_DPLL_DDR;	// 0x0438
	REG32	CM_SSC_MODFREQDIV_DPLL_DDR;	// 0x043C
	REG32	CM_CLKSEL_DPLL_DDR;			// 0x0440
	REG32	CM_AUTOIDLE_DPLL_DISP;		// 0x0444
	REG32	CM_IDLEST_DPLL_DISP;		// 0x0448
	REG32	CM_SSC_DELTAMSTEP_DPLL_DISP;// 0x044C
	REG32	CM_SSC_MODFREQDIV_DPLL_DISP;// 0x0450
	REG32	CM_CLKSEL_DPLL_DISP;		// 0x0454
	REG32	CM_AUTOIDLE_DPLL_CORE;		// 0x0458
	REG32	CM_IDLEST_DPLL_CORE;		// 0x045C
	REG32	CM_SSC_DELTAMSTEP_DPLL_CORE;// 0x0460
	REG32	CM_SSC_MODFREQDIV_DPLL_CORE;// 0x0464
	REG32	CM_CLKSEL_DPLL_CORE;		// 0x0468
	REG32	CM_AUTOIDLE_DPLL_PER;		// 0x046C
	REG32	CM_IDLEST_DPLL_PER;			// 0x0470
	REG32	CM_SSC_DELTAMSTEP_DPLL_PER;	// 0x0474
	REG32	CM_SSC_MODFREQDIV_DPLL_PER;	// 0x0478
	REG32	CM_CLKDCOLDO_DPLL_PER;		// 0x047C
	REG32	CM_DIV_M4_DPLL_CORE;		// 0x0480
	REG32	CM_DIV_M5_DPLL_CORE;		// 0x0484
	REG32	CM_CLKMODE_DPLL_MPU;		// 0x0488
	REG32	CM_CLKMODE_DPLL_PER;		// 0x048C
	REG32	CM_CLKMODE_DPLL_CORE;		// 0x0490
	REG32	CM_CLKMODE_DPLL_DDR;		// 0x0494
	REG32	CM_CLKMODE_DPLL_DISP;		// 0x0498
	REG32	CM_CLKSEL_DPLL_PERIPH;		// 0x049C
	REG32	CM_DIV_M2_DPLL_DDR;			// 0x04A0
	REG32	CM_DIV_M2_DPLL_DISP;		// 0x04A4
	REG32	CM_DIV_M2_DPLL_MPU;			// 0x04A8
	REG32	CM_DIV_M2_DPLL_PER;			// 0x04AC
	REG32	CM_WKUP_WKUP_M3_CLKCTRL;	// 0x04B0
	REG32	CM_WKUP_UART0_CLKCTRL;		// 0x04B4
	REG32	CM_WKUP_I2C0_CLKCTRL;		// 0x04B8
	REG32	CM_WKUP_ADC_TSC_CLKCTRL;	// 0x04BC
	REG32	CM_WKUP_SMARTREFLEX0_CLKCTRL;// 0x04C0
	REG32	CM_WKUP_TIMER1_CLKCTRL;		// 0x04C4
	REG32	CM_WKUP_SMARTREFLEX1_CLKCTRL;// 0x04C8
	REG32	CM_L4_WKUP_AON_CLKSTCTRL;	// 0x04CC
	REG32	CM_WKUP_WDT0_CLKCTRL;		// 0x04D0
	REG32	CM_WKUP_WDT1_CLKCTRL;		// 0x04D4
	REG32	CM_DIV_M6_DPLL_CORE;		// 0x04D8
	UINT32  res_04DC_4FC[9];
// CM_DPLL
	UINT32	res_500;
	REG32	CLKSEL_TIMER7_CLK;			// 0x0504
	REG32	CLKSEL_TIMER2_CLK;			// 0x0508
	REG32	CLKSEL_TIMER3_CLK;			// 0x050C
	REG32	CLKSEL_TIMER4_CLK;			// 0x0510
	REG32	CM_MAC_CLKSEL;				// 0x0514
	REG32	CLKSEL_TIMER5_CLK;			// 0x0518
	REG32	CLKSEL_TIMER6_CLK;			// 0x051C
	REG32	CM_CPTS_RFT_CLKSEL;			// 0x0520
	UINT32	res_524;
	REG32	CLKSEL_TIMER1MS_CLK;		// 0x0528
	REG32	CLKSEL_GFX_FCLK;			// 0x052C
	REG32	CLKSEL_ICSS_OCP_CLK;		// 0x0530
	REG32	CLKSEL_LCDC_PIXEL_CLK;		// 0x0534
	REG32	CLKSEL_WDT1_CLK;			// 0x0538
	REG32	CLKSEL_GPIO0_DBCLK;			// 0x053C
	UINT32	res_540_5FC[48];
// CM_MPU
	REG32	CM_MPU_CLKSTCTRL;			// 0x0600
	REG32	CM_MPU_MPU_CLKCTRL;			// 0x0604
	UINT32	res_608_6FC[62];
// CM_DEVICE
	REG32	CM_CLKOUT_CTRL;				// 0x0700
	UINT32	res_704_7FC[63];
// CM_RTC
	REG32	CM_RTC_RTC_CLKCTRL;			// 0x0800
	REG32	CM_RTC_CLKSTCTRL;			// 0x0804
	UINT32	res_808_8FC[62];
// CM_GFX
	REG32	CM_GFX_L3_CLKSTCTRL;		// 0x0900
	REG32	CM_GFX_GFX_CLKCTRL;			// 0x0904
	REG32	CM_GFX_BITBLT_CLKCTRL;		// 0x0908
	REG32	CM_GFX_L4LS_GFX_CLKSTCTRL;// 0x090C
	REG32	CM_GFX_MMUCFG_CLKCTRL;		// 0x0910
	REG32	CM_GFX_MMUDATA_CLKCTRL;		// 0x0914
	UINT32	res_918_9FC[58];
// CM_CEFUSE
	REG32	CM_CEFUSE_CLKSTCTRL;			// 0x0A00
	UINT32	res_A04_A1C[7];
	REG32	CM_CEFUSE_CEFUSE_CLKCTRL;	// 0x0A20
	UINT32	res_A24_AFC[55];
// OCP_SOCKET_PRM
	REG32	REVISION_PRM;				// 0x0B00
	REG32	PRM_IRQSTATUS_MPU;			// 0x0B04
	REG32	PRM_IRQENABLE_MPU;			// 0x0B08
	REG32	PRM_IRQSTATUS_M3;			// 0x0B0C
	REG32	PRM_IRQENABLE_M3;			// 0x0B10
	UINT32	res_B14_BFC[59];
// PRM_PER
	REG32	RM_PER_RSTCTRL;				// 0x0C00
	REG32	RM_PER_RSTST;				// 0x0C04
	REG32	PM_PER_PWRSTST;				// 0x0C08
	REG32	PM_PER_PWRSTCTRL;			// 0x0C0C
	UINT32	res_C10_CFC[60];
// PRM_WKUP
	REG32	RM_WKUP_RSTCTRL;			// 0x0D00
	REG32	PM_WKUP_PWRSTCTRL;			// 0x0D04
	REG32	PM_WKUP_PWRSTST;			// 0x0D08
	REG32	RM_WKUP_RSTST;				// 0x0D0C
	UINT32	res_D10_DFC[60];
// PRM_MPU
	REG32	PM_MPU_PWRSTCTRL;			// 0x0E00
	REG32	PM_MPU_PWRSTST;				// 0x0E04
	REG32	RM_MPU_RSTST;				// 0x0E08
	UINT32	res_E0C_EFC[61];
// PRM_DEVICE
	REG32	PRM_RSTCTRL;				// 0x0F00
	REG32	PRM_RSTTIME;				// 0x0F04
	REG32	PRM_RSTST;					// 0x0F08
	REG32	PRM_SRAM_COUNT;				// 0x0F0C
	REG32	PRM_LDO_SRAM_CORE_SETUP;	// 0x0F10
	REG32	PRM_LDO_SRAM_CORE_CTRL;		// 0x0F14
	REG32	PRM_LDO_SRAM_MPU_SETUP;		// 0x0F18
	REG32	PRM_LDO_SRAM_MPU_CTRL;		// 0x0F1C
	UINT32	res_F20_FFC[56];
// PRM_RTC
	REG32	PM_RTC_PWRSTCTRL;			// 0x1000
	REG32	PM_RTC_PWRSTST;				// 0x1004
	UINT32	res_1008_10FC[62];
// PRM_GFX
	REG32	PM_GFX_PWRSTCTRL;			// 0x1100
	REG32	RM_GFX_RSTCTRL;				// 0x1104
	UINT32	res_1108_110C[2];
	REG32	PM_GFX_PWRSTST;				// 0x1110
	REG32	RM_GFX_RSTST;				// 0x1114
	UINT32	res_1118_11FC[58];
// PRM_CEFUSE
	REG32	PM_CEFUSE_PWRSTCTRL;		// 0x1200
	REG32	PM_CEFUSE_PWRSTST;			// 0x1204
	UINT32	res_1208_12FC[62];
} AM33X_PRCM_REGS;


//-----------------------------------------------------------------------------
// sysconfig flags
//
#define SYSCONFIG_AUTOIDLE                  (1 << 0)
#define SYSCONFIG_SOFTRESET                 (1 << 1)

#define SYSSTATUS_RESETDONE                 (1 << 0)

#define SYSCONFIG_ENAWAKEUP                 (1 << 2)

#define SYSCONFIG_FORCEIDLE                 (0 << 3)
#define SYSCONFIG_NOIDLE                    (1 << 3)
#define SYSCONFIG_SMARTIDLE                 (2 << 3)
#define SYSCONFIG_IDLE_MASK                 (3 << 3)

#define CLKREQ_POL_ACTIVELOW                (0 << 1)
#define CLKREQ_POL                          (1 << 1)

// reset bits
// POWERDOMAIN_PER
#define ICSS_LRST		(1 << 1)
#define PCI_LRST		(1 << 0) 
#define PCI_LRSTST      (1 << 5)
// POWERDOMAIN_WKUP
#define WKUP_M3_LRST	(1 << 3) 
#define WKUP_M3_LRSTST	(1 << 5) 

// PRM domain
#define RST_GLOBAL_COLD_SW (1 << 1)
#define RST_GLOBAL_WARM_SW (1 << 0)
// POWERDOMAIN_GFX
#define GFX_RST			(1 << 0)

// status bits
#define RSTST_PCI_LRST		(1 << 5)
#define RSTST_WKUP_M3_LRST	(1 << 5)

#define RSTST_EXTERNAL_WARM_RST		(1 << 5)
#define RSTST_WDT1_RST				(1 << 4)
#define RSTST_WDT0_RST				(1 << 3)
#define RSTST_MPU_SECURITY_VIOL_RST (1 << 2)
#define RSTST_GLOBAL_WARM_SW_RST	(1 << 1)
#define RSTST_GLOBAL_COLD_RST		(1 << 0)

#define RSTST_GFX_RST				(1 << 0)


// clkctrl bits
#define ClKCTRL_MODULEMODE_SHIFT    (0)
#define ClKCTRL_MODULEMODE_MASK     (0x3 << ClKCTRL_MODULEMODE_SHIFT)
#define ClKCTRL_MODULEMODE_DIS      (0x0 << ClKCTRL_MODULEMODE_SHIFT)
#define ClKCTRL_MODULEMODE_EN       (0x2 << ClKCTRL_MODULEMODE_SHIFT)

#define ClKCTRL_IDLEST_SHIFT        (16)
#define ClKCTRL_IDLEST_MASK         (0x3 << ClKCTRL_IDLEST_SHIFT)
#define ClKCTRL_IDLEST_FUNC         (0x0 << ClKCTRL_IDLEST_SHIFT)
#define ClKCTRL_IDLEST_TRANS        (0x1 << ClKCTRL_IDLEST_SHIFT)
#define ClKCTRL_IDLEST_IDLE         (0x2 << ClKCTRL_IDLEST_SHIFT)
#define ClKCTRL_IDLEST_DIS          (0x3 << ClKCTRL_IDLEST_SHIFT)

#define ClKCTRL_STBYST_SHIFT        (18)
#define ClKCTRL_STBYST_MASK         (0x1 << ClKCTRL_STBYST_SHIFT)
#define ClKCTRL_STBYST_FUNC         (0x0 << ClKCTRL_STBYST_SHIFT)
#define ClKCTRL_STBYST_STBY         (0x1 << ClKCTRL_STBYST_SHIFT)

//clkstctrl bits
#define CLKSTCTRL_CLKTRCTRL_SHIFT    (0)
#define CLKSTCTRL_CLKTRCTRL_MASK     (0x3 << CLKSTCTRL_CLKTRCTRL_SHIFT)
#define CLKSTCTRL_CLKTRCTRL_NO_SLEEP (0x0 << CLKSTCTRL_CLKTRCTRL_SHIFT)
#define CLKSTCTRL_CLKTRCTRL_SW_SLEEP (0x1 << CLKSTCTRL_CLKTRCTRL_SHIFT)
#define CLKSTCTRL_CLKTRCTRL_SW_WKUP  (0x2 << CLKSTCTRL_CLKTRCTRL_SHIFT)
//#define CLKSTCTRL_CLKTRCTRL_HW_AUTO  (0x3 << CLKSTCTRL_CLKTRCTRL_SHIFT)


//sec_clk_ctrl bits
#define SEC_CLK_CTRL_SECTIMERCLKSEL_SHIFT   (4)
#define SEC_CLK_CTRL_SECTIMERCLKSEL_MASK    (0X3 << SEC_CLK_CTRL_SECTIMERCLKSEL_SHIFT)
#define SEC_CLK_CTRL_SECWDCLKSEL_SHIFT      (0)
#define SEC_CLK_CTRL_SECWDCLKSEL_MASK       (0X1 << SEC_CLK_CTRL_SECWDCLKSEL_SHIFT)

//clksel bits
#define CLKSEL_TIMER1MS_CLK_SHIFT           (0)
#define CLKSEL_TIMER1MS_CLK_MASK            (0X7 << CLKSEL_TIMER1MS_CLK_SHIFT)
#define CLKSEL_TIMER2_CLK_SHIFT             (0)
#define CLKSEL_TIMER2_CLK_MASK              (0X3 << CLKSEL_TIMER2_CLK_SHIFT)
#define CLKSEL_TIMER3_CLK_SHIFT             (0)
#define CLKSEL_TIMER3_CLK_MASK              (0X3 << CLKSEL_TIMER3_CLK_SHIFT)
#define CLKSEL_TIMER4_CLK_SHIFT             (0)
#define CLKSEL_TIMER4_CLK_MASK              (0X3 << CLKSEL_TIMER4_CLK_SHIFT)
#define CLKSEL_TIMER5_CLK_SHIFT             (0)
#define CLKSEL_TIMER5_CLK_MASK              (0X3 << CLKSEL_TIMER5_CLK_SHIFT)
#define CLKSEL_TIMER6_CLK_SHIFT             (0)
#define CLKSEL_TIMER6_CLK_MASK              (0X3 << CLKSEL_TIMER6_CLK_SHIFT)
#define CLKSEL_TIMER7_CLK_SHIFT             (0)
#define CLKSEL_TIMER7_CLK_MASK              (0X3 << CLKSEL_TIMER7_CLK_SHIFT)
#define CM_MAC_CLKSEL_SHIFT                 (2)
#define CM_MAC_CLKSEL_MASK                  (0X1 << CM_MAC_CLKSEL_SHIFT)
#define CM_CPTS_RFT_CLKSEL_SHIFT            (0)
#define CM_CPTS_RFT_CLKSEL_MASK             (0X1 << CM_CPTS_RFT_CLKSEL_SHIFT)
#define CLKSEL_GFX_FCLK_SHIFT               (1)
#define CLKSEL_GFX_FCLK_MASK                (0X1 << CLKSEL_GFX_FCLK_SHIFT)
#define CLKDIV_SEL_GFX_FCLK_SHIFT           (0)
#define CLKDIV_SEL_GFX_FCLK_MASK            (0X1 << CLKSEL_GFX_FCLK_SHIFT)
#define CLKSEL_ICSS_OCP_CLK_SHIFT           (0)
#define CLKSEL_ICSS_OCP_CLK_MASK            (0X1 << CLKSEL_ICSS_OCP_CLK_SHIFT)
#define CLKSEL_LCDC_PIXEL_CLK_SHIFT         (0)
#define CLKSEL_LCDC_PIXEL_CLK_MASK          (0X3 << CLKSEL_LCDC_PIXEL_CLK_SHIFT)
#define CLKSEL_WDT1_CLK_SHIFT               (0)
#define CLKSEL_WDT1_CLK_MASK                (0X1 << CLKSEL_WDT1_CLK_SHIFT)
#define CLKSEL_GPIO0_DBCLK_SHIFT            (0)
#define CLKSEL_GPIO0_DBCLK_MASK             (0X3 << CLKSEL_GPIO0_DBCLK_SHIFT)

//dpll 
#define DPLL_TYPE_ADPLLS                    (0)
#define DPLL_TYPE_ADPLLJ                    (1)

#define DPLL_LPMODE_EN_SHIFT                (10)
#define DPLL_LPMODE_EN_MASK                 (0x1 << DPLL_LPMODE_EN_SHIFT)
#define DPLL_LPMODE_EN_ENABLED              (0x1 << DPLL_LPMODE_EN_SHIFT)
#define DPLL_LPMODE_EN_DISABLED             (0x0 << DPLL_LPMODE_EN_SHIFT)

#define DPLL_DRIFTGUARD_EN_SHIFT            (8)
#define DPLL_DRIFTGUARD_EN_MASK             (0x1 << DPLL_DRIFTGUARD_EN_SHIFT)
#define DPLL_DRIFTGUARD_EN_ENABLED          (0x1 << DPLL_DRIFTGUARD_EN_SHIFT)
#define DPLL_DRIFTGUARD_EN_DISABLED         (0x0 << DPLL_DRIFTGUARD_EN_SHIFT)

#define DPLL_RAMP_RELOCK_SHIFT              (9)
#define DPLL_RAMP_RELOCK_MASK               (0x1 << DPLL_RAMP_RELOCK_SHIFT)
#define DPLL_RAMP_RELOCK_ENABLED            (0x1 << DPLL_RAMP_RELOCK_SHIFT)
#define DPLL_RAMP_RELOCK_DISABLED           (0x0 << DPLL_RAMP_RELOCK_SHIFT)

#define DPLL_RAMPTIME_SHIFT                 (5)
#define DPLL_RAMPTIME_MASK                  (0x7 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_2              (0x0 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_4              (0x1 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_8              (0x2 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_16             (0x3 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_32             (0x4 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_64             (0x5 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_128            (0x6 << DPLL_RAMPTIME_SHIFT)
#define DPLL_RAMPTIME_REFCLK_512            (0x7 << DPLL_RAMPTIME_SHIFT)

#define DPLL_RAMPLEVEL_SHIFT                (3)
#define DPLL_RAMPLEVEL_MASK                 (0x3 << DPLL_RAMPLEVEL_SHIFT)
#define DPLL_RAMPLEVEL_DISABLE              (0x0 << DPLL_RAMPLEVEL_SHIFT)
#define DPLL_RAMPLEVEL_ALGO1                (0x1 << DPLL_RAMPLEVEL_SHIFT)
#define DPLL_RAMPLEVEL_ALGO2                (0x2 << DPLL_RAMPLEVEL_SHIFT)

#define DPLL_MODE_SHIFT                     (0)
#define DPLL_MODE_MASK                      (0x7 << DPLL_MODE_SHIFT)
#define DPLL_MODE_MN_BYPASS                 (0X4 << DPLL_MODE_SHIFT)
#define DPLL_MODE_LOWPOWER_BYPASS           (0x5 << DPLL_MODE_SHIFT)
#define DPLL_MODE_FASTRELOCK_BYPASS         (0x6 << DPLL_MODE_SHIFT)
#define DPLL_MODE_LOCK                      (0x7 << DPLL_MODE_SHIFT)

#define DPLL_MULT_SHIFT                     (8)
#define DPLL_MULT_MASK                      (0xFFF << DPLL_MULT_SHIFT)
#define DPLL_MULT(x)                        ((0xFFF & (x)) << DPLL_MULT_SHIFT)

#define DPLL_DIV_SHIFT                      (0)
#define DPLL_DIV_MASK                       (0x7F << DPLL_DIV_SHIFT)
#define DPLL_DIV(x)                         ((0x7F & (x)) << DPLL_DIV_SHIFT)


#define DPLL_BYP_SELECT_SHIFT               (23)
#define DPLL_BYP_SELECT_MASK                (0x1 << DPLL_BYP_SELECT_SHIFT)
#define DPLL_BYP_SELECT_CLKINP              (0x0 << DPLL_BYP_SELECT_SHIFT)
#define DPLL_BYP_SELECT_CLKINPLOW           (0x1 << DPLL_BYP_SELECT_SHIFT)

#define DPLL_AUTOIDLE_SHIFT                 (0)
#define DPLL_AUTOIDLE_MASK                  (0x7 << DPLL_AUTOIDLE_SHIFT)
#define DPLL_AUTOIDLE_DISABLED              (0 << DPLL_AUTOIDLE_SHIFT)
#define DPLL_AUTOIDLE_LOWPOWERSTOPMODE      (1 << DPLL_AUTOIDLE_SHIFT)
#define DPLL_AUTOIDLE_LOWPOWERBYPASS        (5 << DPLL_AUTOIDLE_SHIFT)

#define DPLL_UPDATE_DPLLMODE                (0x00000001)
#define DPLL_UPDATE_LPMODE                  (0x00000002)
#define DPLL_UPDATE_DRIFTGUARD              (0x00000004)
#define DPLL_UPDATE_RAMPTIME                (0x00000008)
#define DPLL_UPDATE_AUTOIDLEMODE            (0x00000010)
#define DPLL_UPDATE_RAMPLEVEL               (0x00000020)
#define DPLL_UPDATE_RAMPONRELOCK            (0x00000040)
#define DPLL_UPDATE_BYPSELECT               (0x00000080)
#define DPLL_UPDATE_ALL                     (0x000000FF)

//Dpll clock out Info
#define DPLL_CLKOUT_DIV_CLKDCOLDO           0
#define DPLL_CLKOUT_DIV_M2                  1
#define DPLL_CLKOUT_DIV_M4                  2
#define DPLL_CLKOUT_DIV_M5                  3
#define DPLL_CLKOUT_DIV_M6                  4

#define DPLL_ADPLLS_CLKOUT_DIV_SHIFT        0
#define DPLL_ADPLLS_CLKOUT_DIV_MASK         (0x1F << DPLL_ADPLLS_CLKOUT_DIV_SHIFT)
#define DPLL_ADPLLS_CLKOUT_DIV(x)           ((0x1F & (x)) << DPLL_ADPLLS_CLKOUT_DIV_SHIFT)

#define DPLL_ADPLLJ_CLKOUT_DIV_SHIFT        0
#define DPLL_ADPLLJ_CLKOUT_DIV_MASK         (0x7F << DPLL_ADPLLJ_CLKOUT_DIV_SHIFT)
#define DPLL_ADPLLJ_CLKOUT_DIV(x)           ((0x7F & (x)) << DPLL_ADPLLJ_CLKOUT_DIV_SHIFT)

#define DPLL_CLKOUT_GATECTRL_SHIFT          8
#define DPLL_CLKOUT_GATECTRL_MASK           (0x1 << DPLL_CLKOUT_GATECTRL_SHIFT)
#define DPLL_CLKOUT_GATECTRL_AUTOGATE       (0 << DPLL_CLKOUT_GATECTRL_SHIFT)
#define DPLL_CLKOUT_GATECTRL_ENABLED        (1 << DPLL_CLKOUT_GATECTRL_SHIFT)

#define DPLL_CLKOUT_PWDN_SHIFT              12
#define DPLL_CLKOUT_PWDN_MASK               (0x1 << DPLL_CLKOUT_PWDN_SHIFT)
#define DPLL_CLKOUT_PWDN_ALWAYS_ACTIVE      (0 << DPLL_CLKOUT_PWDN_SHIFT)
#define DPLL_CLKOUT_PWDN_AUTO_PWDN          (1 << DPLL_CLKOUT_PWDN_SHIFT)

#define DPLL_CLKOUT_UPDATE_GATECTRL         (0x00000001)
#define DPLL_CLKOUT_UPDATE_PWDN             (0x00000002)
#define DPLL_CLKOUT_UPDATE_DIV              (0x00000004)
#define DPLL_CLKOUT_UPDATE_ALL              (0x00000007)


//power domain
#define DOMAIN_UPDATE_POWERSTATE            (0x00000001) 
#define DOMAIN_UPDATE_LOGICSTATE            (0x00000002)
#define DOMAIN_UPDATE_ALL                   (0x00000003)

#define POWERSTATE_SHIFT                    (0)
#define POWERSTATE_MASK                     (3 << POWERSTATE_SHIFT)
#define POWERSTATE_OFF                      (0 << POWERSTATE_SHIFT)
#define POWERSTATE_RETENTION                (1 << POWERSTATE_SHIFT)
#define POWERSTATE_ON                       (3 << POWERSTATE_SHIFT)

#define LOGICRETSTATE_SHIFT(pd)                 ((((pd)==POWERDOMAIN_WKUP) || ((pd)==POWERDOMAIN_PER))?(3):(2))
#define LOGICRETSTATE_MASK(pd)                  (0x1 << LOGICRETSTATE_SHIFT(pd))
#define LOGICRETSTATE_LOGICOFF_DOMAINRET(pd)    (0x0 << LOGICRETSTATE_SHIFT(pd))
#define LOGICRETSTATE_LOGICRET_DOMAINRET(pd)    (0x1 << LOGICRETSTATE_SHIFT(pd))
#define LOGICRETSTATE(pd)                       (LOGICRETSTATE_MASK(pd))

#define LOGICRETSTATE_WKUP_PER_SHIFT                (3)
#define LOGICRETSTATE_WKUP_PER_MASK                 (0x1 << LOGICRETSTATE_WKUP_PER_SHIFT)
#define LOGICRETSTATE_WKUP_PER_LOGICOFF_DOMAINRET   (0x0 << LOGICRETSTATE_WKUP_PER_SHIFT)
#define LOGICRETSTATE_WKUP_PER_LOGICRET_DOMAINRET   (0x1 << LOGICRETSTATE_WKUP_PER_SHIFT)
#define LOGICRETSTATE_WKUP_PER                      (LOGICRETSTATE_WKUP_PER_MASK)

#define LOGICRETSTATE_OTHER_SHIFT                   (2)
#define LOGICRETSTATE_OTHER_MASK                    (0x1 << LOGICRETSTATE_OTHER_SHIFT)
#define LOGICRETSTATE_OTHER_LOGICOFF_DOMAINRET      (0x0 << LOGICRETSTATE_OTHER_SHIFT)
#define LOGICRETSTATE_OTHER_LOGICRET_DOMAINRET      (0x1 << LOGICRETSTATE_OTHER_SHIFT)
#define LOGICRETSTATE_OTHER                         (LOGICRETSTATE_OTHER_MASK)

//Memory states
#define ICSSMEMONSTATE_SHIFT                (5)
#define ICSSMEMONSTATE_MASK                 (0x3 << ICSSMEMONSTATE_SHIFT)
#define ICSSMEMONSTATE_MEMON_DOMAINON       (0x3 << ICSSMEMONSTATE_SHIFT)

#define ICSSMEMRETSTATE_SHIFT               (7)
#define ICSSMEMRETSTATE_MASK                (0x1 << ICSSMEMRETSTATE_SHIFT)
#define ICSSMEMRETSTATE_MEMOFF_DOMAINRET    (0x0 << ICSSMEMRETSTATE_SHIFT)
#define ICSSMEMRETSTATE_MEMRET_DOMAINRET    (0x1 << ICSSMEMRETSTATE_SHIFT)

#define PERMEMONSTATE_SHIFT                 (25)
#define PERMEMONSTATE_MASK                  (0x3 << PERMEMONSTATE_SHIFT)
#define PERMEMONSTATE_MEMON_DOMAINON        (0x3 << PERMEMONSTATE_SHIFT)

#define PERMEMRETSTATE_SHIFT                (29)
#define PERMEMRETSTATE_MASK                 (0x1 << PERMEMRETSTATE_SHIFT)
#define PERMEMRETSTATE_MEMOFF_DOMAINRET     (0x0 << PERMEMRETSTATE_SHIFT)
#define PERMEMRETSTATE_MEMRET_DOMAINRET     (0x1 << PERMEMRETSTATE_SHIFT)

#define RAMMEMONSTATE_SHIFT                 (30)
#define RAMMEMONSTATE_MASK                  (0x3 << RAMMEMONSTATE_SHIFT)
#define RAMMEMONSTATE_MEMON_DOMAINON        (0x3 << RAMMEMONSTATE_SHIFT)
#define RAMMEMONSTATE_MEMRET_DOMAINON       (0x1 << RAMMEMONSTATE_SHIFT)
#define RAMMEMONSTATE_MEMOFF_DOMAINON       (0x0 << RAMMEMONSTATE_SHIFT)

#define RAMMEMRETSTATE_SHIFT                (27)
#define RAMMEMRETSTATE_MASK                 (0x1 << RAMMEMRETSTATE_SHIFT)
#define RAMMEMRETSTATE_MEMOFF_DOMAINRET     (0x0 << RAMMEMRETSTATE_SHIFT)
#define RAMMEMRETSTATE_MEMRET_DOMAINRET     (0x1 << RAMMEMRETSTATE_SHIFT)

#define MPURAMMEMONSTATE_SHIFT              (16)
#define MPURAMMEMONSTATE_MASK               (0x3 << MPURAMMEMONSTATE_SHIFT)
#define MPURAMMEMONSTATE_MEMON_DOMAINON     (0x3 << MPURAMMEMONSTATE_SHIFT)

#define MPURAMMEMRETSTATE_SHIFT             (24)
#define MPURAMMEMRETSTATE_MASK              (0x1 << MPURAMMEMRETSTATE_SHIFT)
#define MPURAMMEMRETSTATE_MEMOFF_DOMAINRET  (0x0 << MPURAMMEMRETSTATE_SHIFT)
#define MPURAMMEMRETSTATE_MEMRET_DOMAINRET  (0x1 << MPURAMMEMRETSTATE_SHIFT)

#define MPUL1MEMONSTATE_SHIFT               (18)
#define MPUL1MEMONSTATE_MASK                (0x3 << MPUL1MEMONSTATE_SHIFT)
#define MPUL1MEMONSTATE_MEMON_DOMAINON      (0x3 << MPUL1MEMONSTATE_SHIFT)

#define MPUL1MEMRETSTATE_SHIFT              (22)
#define MPUL1MEMRETSTATE_MASK               (0x1 << MPUL1MEMRETSTATE_SHIFT)
#define MPUL1MEMRETSTATE_MEMOFF_DOMAINRET   (0x0 << MPUL1MEMRETSTATE_SHIFT)
#define MPUL1MEMRETSTATE_MEMRET_DOMAINRET   (0x1 << MPUL1MEMRETSTATE_SHIFT)

#define MPUL2MEMONSTATE_SHIFT               (20)
#define MPUL2MEMONSTATE_MASK                (0x3 << MPUL2MEMONSTATE_SHIFT)
#define MPUL2MEMONSTATE_MEMON_DOMAINON      (0x3 << MPUL2MEMONSTATE_SHIFT)

#define MPUL2MEMRETSTATE_SHIFT              (23)
#define MPUL2MEMRETSTATE_MASK               (0x1 << MPUL2MEMRETSTATE_SHIFT)
#define MPUL2MEMRETSTATE_MEMOFF_DOMAINRET   (0x0 << MPUL2MEMRETSTATE_SHIFT)
#define MPUL2MEMRETSTATE_MEMRET_DOMAINRET   (0x1 << MPUL2MEMRETSTATE_SHIFT)

#define GFXMEMONSTATE_SHIFT                 (17)
#define GFXMEMONSTATE_MASK                  (0x3 << GFXMEMONSTATE_SHIFT)
#define GFXMEMONSTATE_MEMON_DOMAINON        (0x3 << GFXMEMONSTATE_SHIFT)

#define GFXMEMRETSTATE_SHIFT                (6)
#define GFXMEMRETSTATE_MASK                 (0x1 << GFXMEMRETSTATE_SHIFT)
#define GFXMEMRETSTATE_MEMOFF_DOMAINRET     (0x0 << GFXMEMRETSTATE_SHIFT)
#define GFXMEMRETSTATE_MEMRET_DOMAINRET     (0x1 << GFXMEMRETSTATE_SHIFT)



#endif
