// All rights reserved ADENEO EMBEDDED 2010
/*
===============================================================================
*             Texas Instruments OMAP(TM) Platform Software
* (c) Copyright Texas Instruments, Incorporated. All Rights Reserved.
*
* Use of this software is controlled by the terms and conditions found
* in the license agreement under which this software has been supplied.
*
===============================================================================
*/
//
//  File:  am389x_clocks.h
//
//  This header defines all relevant clocks and power domains for am389x.
//
#ifndef __AM389X_CLOCKS_H
#define __AM389X_CLOCKS_H

#ifdef __cplusplus
extern "C" {
#endif

//------------------------------------------------------------------------------

/*
 * In AM389x the 27MHz crystal generates various root clks (main pll, audio pll, video pll and ddr pll)
 * From these root clks the SYSCLKs are generated by making use of dividers
 */

/* Main PLL */
#define MAIN_N			64
#define MAIN_P			0x1
#define MAIN_INTFREQ1	0x8
#define MAIN_FRACFREQ1	0x800000
#define MAIN_MDIV1		0x2
#define MAIN_INTFREQ2	0xE
#define MAIN_FRACFREQ2	0x0
#define MAIN_MDIV2		0x1
#define MAIN_INTFREQ3	0x8
#define MAIN_FRACFREQ3	0xAAAAB0
#define MAIN_MDIV3		0x3
#define MAIN_INTFREQ4	0x9
#define MAIN_FRACFREQ4	0x55554F
#define MAIN_MDIV4		0x3
#define MAIN_INTFREQ5	0x9
#define MAIN_FRACFREQ5	0x374BC6
#define MAIN_MDIV5		0xC

#define MAIN_MDIV6		0x48
#define MAIN_MDIV7		0x4

/* DDR PLL */
#define DDR_N			59
#define DDR_P			0x1

#define DDR_MDIV1		0x4

#define DDR_INTFREQ2	0x8
#define DDR_FRACFREQ2	0xD99999
#define DDR_MDIV2		0x1E
#define DDR_INTFREQ3	0x8
#define DDR_FRACFREQ3	0x0
#define DDR_MDIV3		0x4
#define DDR_INTFREQ4	0xE /* Expansion DDR clk */
#define DDR_FRACFREQ4	0x0
#define DDR_MDIV4		0x4
#define DDR_INTFREQ5	0xE /* Expansion DDR clk */
#define DDR_FRACFREQ5	0x0
#define DDR_MDIV5		0x4

/* Video PLL */
#define VIDEO_N			110
#define VIDEO_P			0x2
#define VIDEO_INTFREQ1	0xB
#define VIDEO_FRACFREQ1	0x0
#define VIDEO_MDIV1		0x5
#define VIDEO_INTFREQ2	0xA
#define VIDEO_FRACFREQ2	0x0
#define VIDEO_MDIV2		0x2
#define VIDEO_INTFREQ3	0xA
#define VIDEO_FRACFREQ3	0x0
#define VIDEO_MDIV3		0x2

/* Audio PLL */
#define AUDIO_N			64
#define AUDIO_P			0x19
#define AUDIO_INTFREQ2	0xE
#define AUDIO_FRACFREQ2	0x0
#define AUDIO_MDIV2		0x4
#define AUDIO_INTFREQ3	0x9
#define AUDIO_FRACFREQ3	0x0
#define AUDIO_MDIV3		0x5
#define AUDIO_INTFREQ4	0x9
#define AUDIO_FRACFREQ4	0xCBC148
#define AUDIO_MDIV4		0x14
#define AUDIO_INTFREQ5	0xD
#define AUDIO_FRACFREQ5	0x800000
#define AUDIO_MDIV5		0x14



#define AM389X_GENERIC        0xFFFFFFFF

typedef enum {
	// ALWSON DOMAIN
	AM_DEVICE_CONTROL = 0,
	AM_DEVICE_GPIO0,
	AM_DEVICE_GPIO1,
	AM_DEVICE_GPMC,
	AM_DEVICE_I2C0,
	AM_DEVICE_I2C1,
	AM_DEVICE_MAILBOX,
	AM_DEVICE_MCASP0,
	AM_DEVICE_MCASP1,
	AM_DEVICE_MCASP2,
	AM_DEVICE_MCBSP,
	AM_DEVICE_SDIO,
	AM_DEVICE_SMARTCARD0,
	AM_DEVICE_SMARTCARD1,
	AM_DEVICE_SMARTREFLEX0,
	AM_DEVICE_SMARTREFLEX1,
	AM_DEVICE_MCSPI,
	AM_DEVICE_SPINBOX,
	AM_DEVICE_TIMER0,
	AM_DEVICE_TIMER1,
	AM_DEVICE_TIMER2,
	AM_DEVICE_TIMER3,
	AM_DEVICE_TIMER4,
	AM_DEVICE_TIMER5,
	AM_DEVICE_TIMER6,
	AM_DEVICE_TIMER7,
	AM_DEVICE_UART0,
    AM_DEVICE_UART1,
    AM_DEVICE_UART2,
	AM_DEVICE_VLYNQ,
	AM_DEVICE_EMAC0,
	AM_DEVICE_EMAC1,
	AM_DEVICE_TPCC,
	AM_DEVICE_TPTC0,
	AM_DEVICE_TPTC1,
	AM_DEVICE_TPTC2,
	AM_DEVICE_TPTC3,
	AM_DEVICE_SECURITY_SS,
	AM_DEVICE_MMUCFG,
	AM_DEVICE_MMU,
	AM_DEVICE_MPU,
	AM_DEVICE_OCMC_RAM0,
	AM_DEVICE_OCMC_RAM1,
	AM_DEVICE_RTC,
	AM_DEVICE_WDTIMER,
	AM_DEVICE_L3,
	AM_DEVICE_L4_HS,
	AM_DEVICE_L4_LS,
	//DEFAULT DOMAIN	
	AM_DEVICE_MEDIA_CONTROLLER,
	AM_DEVICE_DMM,
	AM_DEVICE_EMIF4_0,
	AM_DEVICE_EMIF4_1,
	AM_DEVICE_EMIF_FW,
	AM_DEVICE_SATA,
	AM_DEVICE_PCI,
	AM_DEVICE_TPP,
	AM_DEVICE_USB,
	// ACTIVE DOMAIN
	AM_DEVICE_GEM,
	AM_DEVICE_HDMI,
	AM_DEVICE_HD_DSS,
	//IVA and SGX
	AM_DEVICE_SGX,
	AM_DEVICE_IVA0,
	AM_DEVICE_SL2_0,
	AM_DEVICE_IVA1,
	AM_DEVICE_SL2_1,
	AM_DEVICE_IVA2,
	AM_DEVICE_SL2_2,
	AM_DEVICE_COUNT
} AM389X_DEVICE_ID;

// For convenience
#define AM_DEVICE_MMC AM_DEVICE_SDIO

//-----------------------------------------------------------------------------

typedef enum {
    PWR_ALWAYSON = 0,
    PWR_DEFAULT,
    PWR_ACTIVE,
    PWR_SGX,        
    PWR_IVA0,    
    PWR_IVA1,
    PWR_IVA2,
	PWR_COUNT
} PowerDomain_e;

typedef enum {
	
	// ALWON
    CLKDMN_ALWON_L3_SLOW,
    CLKDMN_ETHERNET,
    CLKDMN_L3_FAST_ALWON,
    CLKDMN_L3_MED_ALWON,
    CLKDMN_MMU_CFG,
    CLKDMN_MMU,
    CLKDMN_MPU,
    CLKDMN_OCMC0,
    CLKDMN_OCMC1,
    CLKDMN_RTC,
	CLKDMN_SYSCLK4,
	CLKDMN_SYSCLK5,
	CLKDMN_SYSCLK6,
	// DEFAULT
	CLKDMN_DUCATI_INTR,
	CLKDMN_L3_FAST_DEFAULT,
	CLKDMN_L3_MED_DEFAULT,
	CLKDMN_PCI,
	CLKDMN_TPPSS,
	CLKDMN_L3_SLOW_DEFAULT,
	// ACTIVE 
	CLKDMN_GEM,
	CLKDMN_HDMI_OCP,
	CLKDMN_HDDSS_L3,
	// IVA & SGX
	CLKDMN_IVA0,
	CLKDMN_IVA1,
	CLKDMN_IVA2,
	CLKDMN_SGX,

    CLKDMN_COUNT,
    CLKDMN_NULL = 0xfff,
    CLKDMN_UNKNOWN = 0xffff
	
} ClockDomain_e;



//-----------------------------------------------------------------------------

typedef enum {    
    kVDD1V_AVS,
	kVDD1V0,
	kVDD1V8,
	kVDD3V3,
	kVDD1V5,
	kVDD0V9,
	kVDD_EXT, // not sure whether we need that domain
    kVDD_COUNT,
} Vdd_e;

//------------------------------------------------------------------------------

typedef enum {    
    kSECURE_32K,
    kSYS_32K,
	kTCLKIN,
	kSYSCLKIN,
	kMAIN_PLL,
	kDDR_PLL,
	kVIDEO_PLL,
	kAUDIO_PLL,
    kDPLL_COUNT,
} Dpll_e;

//------------------------------------------------------------------------------
/*
External clock sources to PRCM 
The Device requires the following clocks: The 32 kHz frequency is used for low
frequency operation. It supplies the the clock to rtc. The MAIN PLL CLOCKS are
the source clocks for GEM, Cortex™-A8, IVA and all the interconnect clocks.
The DDR PLL CLOCKS are the source clocks for DDR. The VIDEO PLL CLOCKS
are the source clocks for HD-DSS and HDMI The AUDIO PLL CLOCKS are the
source clocks for MCASPs, MCBASPs and audio related logic in HDMI.
The Device delivers four clock signals to external devices: 

Output clock SYSCLK_OUT can deliver clock outputs of each PLL.
CM_CLKOUT_CTRL Register controls the Clock selection and division ratio. 
*/
typedef enum {
    kSECURE_32K_CLK,		// [32768]
    kSYS_32K_CLK,			// [32768]
    kTCLKIN_CLK,			// [32768]
    kSYSCLKIN_CLK,			// [27000000]

    kMAIN_PLL_CLK1_CLK,		// [800000000]
    kMAIN_PLL_CLK2_CLK,		// [1000000000]
    kMAIN_PLL_CLK3_CLK,		// [600000000]
    kMAIN_PLL_CLK4_CLK,		// [500000000]
    kMAIN_PLL_CLK5_CLK,		// [125 000 000] // PCI CLK

    kDDR_PLL_CLK1_CLK,		//
	kDDR_PLL_CLK2_CLK,		// [96 000 000]
    kDDR_PLL_CLK3_CLK,		// 
    
    kVIDEO_PLL_CLK1_CLK,	//
	kVIDEO_PLL_CLK2_CLK,	//
    kVIDEO_PLL_CLK3_CLK,	//

	kAUDIO_PLL_CLK1_CLK,	// [32768]
	kAUDIO_PLL_CLK2_CLK,	//
	kAUDIO_PLL_CLK3_CLK,	// [196 000 000]
	kAUDIO_PLL_CLK4_CLK,	// [45 000 000]
	kAUDIO_PLL_CLK5_CLK,	// [32 000 000]

	kDPLL_CLKOUT_CLK,		// External Observation Clock
	
	kDPLL_CLKOUT_COUNT,
} DpllClkOut_e;

//------------------------------------------------------------------------------

typedef enum {
//    clock name                parent clock
//  ----------------------  ----------------------
    kSYS_CLK1_CLK,			// kMAIN_PLL_CLK1_CLK	(DIV 0x300[2:0] 1,2,...,8 )
    kGEM_I_CLK,				// kSYS_CLK1_CLK		(EN  0x420[1])
    kSYS_CLK2_CLK,			// kMAIN_PLL_CLK2_CLK	(DIV 0x304[2:0] 1,2,...,8 )
    kSYS_CLK23_CLK,			// kMAIN_PLL_CLK2_CLK	(DIV 0x3B0[2:0] 1,2,...,8 )
	kSGX_CLK,				// kSYS_CLK23_CLK		(EN  0x920[1])
    kSYS_CLK3_CLK,			// kMAIN_PLL_CLK3_CLK	(DIV 0x308[2:0] 1,2,3 )
	kIVAHD0_CLK,			// kSYS_CLK3_CLK		(EN  0x620[1])
	kIVAHD0_SL2_CLK,		// kSYS_CLK3_CLK		(EN  0x624[1])
	kIVAHD1_CLK,			// kSYS_CLK3_CLK		(EN  0x720[1])
	kIVAHD1_SL2_CLK,		// kSYS_CLK3_CLK		(EN  0x724[1])
	kIVAHD2_CLK,			// kSYS_CLK3_CLK		(EN  0x820[1])
	kIVAHD2_SL2_CLK,		// kSYS_CLK3_CLK		(EN  0x824[1])
    kSYS_CLK4_CLK,			// kMAIN_PLL_CLK4_CLK	(DIV 0x30C[0] 1,2 )
	kMMU_I_CLK,				// kSYS_CLK4_CLK		(EN  0x159C[1])
	kDUCATI_UCACHE_I_CLK,	// kSYS_CLK4_CLK
	kTPCC_I_CLK,			// kSYS_CLK4_CLK		(EN  0x15F4[1])
	kTPTC0_I_CLK,			// kSYS_CLK4_CLK		(EN  0x15F8[1])
	kTPTC1_I_CLK,			// kSYS_CLK4_CLK		(EN  0x15FC[1])
	kTPTC2_I_CLK,			// kSYS_CLK4_CLK		(EN  0x1600[1])
	kTPTC3_I_CLK,			// kSYS_CLK4_CLK		(EN  0x1604[1])
    kSYS_CLK6_CLK,			// kSYS_CLK4_CLK		(DIV 0x314[0] 2,4 )
	kMMU_CFG_I_CLK,			// kSYS_CLK6_CLK		(EN  0x15A8[1])
	kMAILBOX_I_CLK,			// kSYS_CLK6_CLK		(EN  0x1594[1])
	kSPINBOX_I_CLK,			// kSYS_CLK6_CLK		(EN  0x1598[1])
	kGEM_VBUSP_I_CLK,		// kSYS_CLK6_CLK
	kMCSPI1_I_CLK,			// kSYS_CLK6_CLK
	kUSBOTG_I_CLK,			// kSYS_CLK6_CLK		(EN  0x0558[1])
	kGPMC_I_CLK,			// kSYS_CLK6_CLK	(EN  0x15D0[1])
	kGPIO0_CLK,				// kSYS_CLK6_CLK
	kGPIO1_CLK,				// kSYS_CLK6_CLK
	kSR0_CLK,				// kSYS_CLK6_CLK  (EN  0x1608[1])
	kSR1_CLK,				// kSYS_CLK6_CLK  (EN  0x160C[1])
    kSYS_CLK5_CLK,			// kSYS_CLK4_CLK	(DIV 0x310[0] 1,2 )
	kPCIE_CLK,				// kSYS_CLK5_CLK	(EN  0x0578[1])
	kSATA_I_CLK,			// kSYS_CLK5_CLK	(EN  0x0560[1])
	kEMAC0_I_CLK,			// kSYS_CLK5_CLK	(EN  0x15D4[1])
	kEMAC1_I_CLK,			// kSYS_CLK5_CLK	(EN  0x15D8[1])
	kDUCATI_I_CLK,			// kSYS_CLK5_CLK	(EN  0x0574[1])
	kGEM_TRC_F_CLK,			// kSYS_CLK5_CLK
    kSYS_CLK8_CLK,			// kDDR_PLL_CLK3_CLK	(DIV 0x31C[2:0] R/O )
    kSYS_CLK10_CLK,			// kDDR_PLL_CLK2_CLK	(DIV 0x324[2:0] 1,2,3 )
	kUART1_F_CLK,			// kSYS_CLK10_CLK	(EN  0x1550[1])
	kUART2_F_CLK,			// kSYS_CLK10_CLK	(EN  0x1554[1])
	kUART3_F_CLK,			// kSYS_CLK10_CLK	(EN  0x1558[1])
	kSPI_F_CLK,				// kSYS_CLK10_CLK	(EN  0x1590[1])
	kI2C0_F_CLK,			// kSYS_CLK10_CLK	(EN  0x1564[1])
	kI2C1_F_CLK,			// kSYS_CLK10_CLK	(EN  0x1568[1])
	kSDIO_F_CLK,			// kSYS_CLK10_CLK	(EN  0x15B0[1]) was MMCHS1
	kSD0_F_CLK,				// kSYS_CLK10_CLK	(EN  0x15BC[1])
	kSD1_F_CLK,				// kSYS_CLK10_CLK	(EN  0x15C0[1])
    kSYS_CLK24_CLK,			// kMAIN_PLL_CLK5_CLK	(DIV 0x3B4[2:0] 1,2,3 )
	kAUDIO_PLL_A_CLK,		// kAUDIO_PLL_CLK1_CLK  (DIV 0x35C[2:0] 1,2,3 )
	kSYS_CLK18_CLK,			// SEL 0x378[0] ? 0-kSYS_32K_CLK; 1-kAUDIO_PLL_A_CLK
    kSYS_CLK20_CLK,			// kAUDIO_PLL_CLK3_CLK	(DIV 0x350[2:0] 1,2,3 )
    kSYS_CLK21_CLK,			// kAUDIO_PLL_CLK4_CLK	(DIV 0x354[2:0] 1,2,3 )
    kSYS_CLK22_CLK,			// kAUDIO_PLL_CLK5_CLK	(DIV 0x358[2:0] 1,2,3 )

	kDMT1_F_CLK,			// SEL 0x390[1:0]? 0-kTCLKIN_CLK; 1-kSYS_CLK18_CLK; 2-kSYSCLKIN_CLK;
							// EN  0x1570[1]
	kDMT2_F_CLK,			// SEL 0x394[1:0]? 0-kTCLKIN_CLK; 1-kSYS_CLK18_CLK; 2-kSYSCLKIN_CLK;
							// EN  0x1574[1]
	kDMT3_F_CLK,			// SEL 0x398[1:0]? 0-kTCLKIN_CLK; 1-kSYS_CLK18_CLK; 2-kSYSCLKIN_CLK;
							// EN  0x1578[1]
	kDMT4_F_CLK,			// SEL 0x39C[1:0]? 0-kTCLKIN_CLK; 1-kSYS_CLK18_CLK; 2-kSYSCLKIN_CLK;
							// EN  0x157C[1]
	kDMT5_F_CLK,			// SEL 0x3A0[1:0]? 0-kTCLKIN_CLK; 1-kSYS_CLK18_CLK; 2-kSYSCLKIN_CLK;
							// EN  0x1580[1]
	kDMT6_F_CLK,			// SEL 0x3A4[1:0]? 0-kTCLKIN_CLK; 1-kSYS_CLK18_CLK; 2-kSYSCLKIN_CLK;
							// EN  0x1584[1]
	kDMT7_F_CLK,			// SEL 0x3A8[1:0]? 0-kTCLKIN_CLK; 1-kSYS_CLK18_CLK; 2-kSYSCLKIN_CLK;
							// EN  0x1588[1]
	kMMCHSDB1,				// kSYS_CLK18_CLK

	kMCASP0_F_CLK,			// SEL 0x37C[1:0]? 0-kSYS_CLK20_CLK; 1-kSYS_CLK21_CLK; 2-kSYS_CLK22_CLK;
							// EN  0x1540[1]
	kMCASP1_F_CLK,			// SEL 0x380[1:0]? 0-kSYS_CLK20_CLK; 1-kSYS_CLK21_CLK; 2-kSYS_CLK22_CLK;
							// EN  0x1544[1]
	kMCASP2_F_CLK,			// SEL 0x384[1:0]? 0-kSYS_CLK20_CLK; 1-kSYS_CLK21_CLK; 2-kSYS_CLK22_CLK;
							// EN  0x1548[1]

	kMCBSP_F_CLK,			// SEL 0x388[1:0]? 0-kSYS_CLK20_CLK; 1-kSYS_CLK21_CLK; 2-kSYS_CLK22_CLK;
						    // 3-kSYSCLKIN_CLK  EN  0x154C[1]
						    //TODO: check if kSYSCLKIN_CLK correct clock  
// --------------------------

// end of clock definitions
    kSOURCE_CLOCK_COUNT,       
} SourceClock_e;

#define NOCLOCK  9999

//------------------------------------------------------------------------------

#ifdef __cplusplus
}
#endif

#endif
