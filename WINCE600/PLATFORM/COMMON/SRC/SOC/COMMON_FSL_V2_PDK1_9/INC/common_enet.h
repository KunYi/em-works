//------------------------------------------------------------------------------
//
//  Copyright (C) 2007-2009 Freescale Semiconductor, n,Inc. All Rights Reserved.
//  THIS SOURCE CODE, n,AND ITS USE AND DISTRIBUTION, n,IS SUBJECT TO THE TERMS
//  AND CONDITIONS OF THE APPLICABLE LICENSE AGREEMENT
//
//------------------------------------------------------------------------------
//
//  Header: common_enet.h
//  PIO Registers for ENET interface
//------------------------------------------------------------------------------
// WARNING!  THIS FILE IS AUTOMATICALLY GENERATED FROM XML.
//                DO NOT MODIFY THIS FILE DIRECTLY.
//
//------------------------------------------------------------------------------
//
// The following naming conventions are followed in this file.
//      XX_<module>_<regname>_<field>
//
// XX specifies the define / macro class
//      HW pertains to a register
//      BM indicates a Bit Mask
//      BF indicates a Bit Field macro
//
// <module> is the hardware module name which can be any of the following...
//      USB20 (Note when there is more than one copy of a given module, the
//      module name includes a number starting from 0 for the first instance
//      of that module)
//
// <regname> is the specific register within that module
//
// <field> is the specific bitfield within that <module>_<register>
//
// We also define the following...
//      hw_<module>_<regname>_t is typedef of anonymous union
//
//------------------------------------------------------------------------------

#ifndef _ENET_H
#define _ENET_H  1

#ifndef REGS_ENET_BASE
#define REGS_ENET0_BASE (DWORD) pv_HWregENET0
#define REGS_ENET1_BASE (DWORD) pv_HWregENET1
#define REGS_ENET_BASE(x) ( x == 0 ? REGS_ENET0_BASE : x == 1 ? REGS_ENET1_BASE:0x800f0000)
#endif

// MMFR
#define ENET_MMFR_TA_VALUE                   2
#define ENET_MMFR_OP_WRITE                   1
#define ENET_MMFR_OP_READ                    2
#define ENET_MMFR_ST_VALUE                   1


typedef unsigned int  reg32_t;
typedef unsigned short  reg16_t;
typedef unsigned char   reg8_t;

//#define REGS_ENET_BASE(x) (DWORD) pv_HWregENET

/*
 * HW_ENET_MAC_EIR - ENET MAC Interrupt Event Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD1    : 15;
        unsigned TS_TIMER  :  1;
        unsigned TS_AVAIL  :  1;
        unsigned WAKEUP    :  1;
        unsigned PLR       :  1;
        unsigned UN        :  1;
        unsigned RL        :  1;
        unsigned LC        :  1;
        unsigned EBERR     :  1;
        unsigned MII       :  1;
        unsigned RXB       :  1;
        unsigned RXF       :  1;
        unsigned TXB       :  1;
        unsigned TXF       :  1;
        unsigned GRA       :  1;
        unsigned BABT      :  1;
        unsigned BABR      :  1;
        unsigned RSRVD0    :  1;
    } B;
} hw_enet_mac_eir_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_EIR register
 */
#define HW_ENET_MAC_EIR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000004)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_EIR(x)          (*(volatile hw_enet_mac_eir_t *) HW_ENET_MAC_EIR_ADDR(x))
#define HW_ENET_MAC_EIR_RD(x)       (HW_ENET_MAC_EIR(x).U)
#define HW_ENET_MAC_EIR_WR(x,v)     (HW_ENET_MAC_EIR(x).U = (v))
#define HW_ENET_MAC_EIR_SET(x,v)    (HW_ENET_MAC_EIR_WR(x,HW_ENET_MAC_EIR_RD(x) |  (v)))
#define HW_ENET_MAC_EIR_CLR(x,v)    (HW_ENET_MAC_EIR_WR(x,HW_ENET_MAC_EIR_RD(x) & ~(v)))
#define HW_ENET_MAC_EIR_TOG(x,v)    (HW_ENET_MAC_EIR_WR(x,HW_ENET_MAC_EIR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_EIR bitfields
 */
/* --- Register HW_ENET_MAC_EIR, field RSRVD0 */

#define BP_ENET_MAC_EIR_RSRVD0      31
#define BM_ENET_MAC_EIR_RSRVD0      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_EIR_RSRVD0(v)   ((((reg32_t) v) << 31) & BM_ENET_MAC_EIR_RSRVD0)
#else
#define BF_ENET_MAC_EIR_RSRVD0(v)     (((v) << 31) & BM_ENET_MAC_EIR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_EIR, field BABR */

#define BP_ENET_MAC_EIR_BABR      30
#define BM_ENET_MAC_EIR_BABR      0x40000000

#define BF_ENET_MAC_EIR_BABR(v)   (((v) << 30) & BM_ENET_MAC_EIR_BABR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_BABR(n,v)   BF_CS1n(ENET_MAC_EIR, n,BABR,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field BABT */

#define BP_ENET_MAC_EIR_BABT      29
#define BM_ENET_MAC_EIR_BABT      0x20000000

#define BF_ENET_MAC_EIR_BABT(v)   (((v) << 29) & BM_ENET_MAC_EIR_BABT)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_BABT(n,v)   BF_CS1n(ENET_MAC_EIR, n,BABT,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field GRA */

#define BP_ENET_MAC_EIR_GRA      2 8
#define BM_ENET_MAC_EIR_GRA      0x10000000

#define BF_ENET_MAC_EIR_GRA(v)   (((v) << 28) & BM_ENET_MAC_EIR_GRA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_GRA(n,v)   BF_CS1n(ENET_MAC_EIR, n,GRA,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field TXF */

#define BP_ENET_MAC_EIR_TXF      27
#define BM_ENET_MAC_EIR_TXF      0x08000000

#define BF_ENET_MAC_EIR_TXF(v)   (((v) << 27) & BM_ENET_MAC_EIR_TXF)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_TXF(n,v)   BF_CS1n(ENET_MAC_EIR, n,TXF,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field TXB */

#define BP_ENET_MAC_EIR_TXB      26
#define BM_ENET_MAC_EIR_TXB      0x04000000

#define BF_ENET_MAC_EIR_TXB(v)   (((v) << 26) & BM_ENET_MAC_EIR_TXB)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_TXB(n,v)   BF_CS1n(ENET_MAC_EIR, n,TXB,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field RXF */

#define BP_ENET_MAC_EIR_RXF      25
#define BM_ENET_MAC_EIR_RXF      0x02000000

#define BF_ENET_MAC_EIR_RXF(v)   (((v) << 25) & BM_ENET_MAC_EIR_RXF)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_RXF(n,v)   BF_CS1n(ENET_MAC_EIR, n,RXF,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field RXB */

#define BP_ENET_MAC_EIR_RXB      24
#define BM_ENET_MAC_EIR_RXB      0x01000000

#define BF_ENET_MAC_EIR_RXB(v)   (((v) << 24) & BM_ENET_MAC_EIR_RXB)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_RXB(n,v)   BF_CS1n(ENET_MAC_EIR, n,RXB,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field MII */

#define BP_ENET_MAC_EIR_MII      23
#define BM_ENET_MAC_EIR_MII      0x00800000

#define BF_ENET_MAC_EIR_MII(v)   (((v) << 23) & BM_ENET_MAC_EIR_MII)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_MII(n,v)   BF_CS1n(ENET_MAC_EIR, n,MII,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field EBERR */

#define BP_ENET_MAC_EIR_EBERR      22
#define BM_ENET_MAC_EIR_EBERR      0x00400000

#define BF_ENET_MAC_EIR_EBERR(v)   (((v) << 22) & BM_ENET_MAC_EIR_EBERR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_EBERR(n,v)   BF_CS1n(ENET_MAC_EIR, n,EBERR,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field LC */

#define BP_ENET_MAC_EIR_LC      21
#define BM_ENET_MAC_EIR_LC      0x00200000

#define BF_ENET_MAC_EIR_LC(v)   (((v) << 21) & BM_ENET_MAC_EIR_LC)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_LC(n,v)   BF_CS1n(ENET_MAC_EIR, n,LC,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field RL */

#define BP_ENET_MAC_EIR_RL      20
#define BM_ENET_MAC_EIR_RL      0x00100000

#define BF_ENET_MAC_EIR_RL(v)   (((v) << 20) & BM_ENET_MAC_EIR_RL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_RL(n,v)   BF_CS1n(ENET_MAC_EIR, n,RL,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field UN */

#define BP_ENET_MAC_EIR_UN      19
#define BM_ENET_MAC_EIR_UN      0x00080000

#define BF_ENET_MAC_EIR_UN(v)   (((v) << 19) & BM_ENET_MAC_EIR_UN)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_UN(n,v)   BF_CS1(ENET_MAC_EIR,n ,UN,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field PLR */

#define BP_ENET_MAC_EIR_PLR      18
#define BM_ENET_MAC_EIR_PLR      0x00040000

#define BF_ENET_MAC_EIR_PLR(v)   (((v) << 18) & BM_ENET_MAC_EIR_PLR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_PLR(n,v)   BF_CS1n(ENET_MAC_EIR, n,PLR,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field WAKEUP */

#define BP_ENET_MAC_EIR_WAKEUP      17
#define BM_ENET_MAC_EIR_WAKEUP      0x00020000

#define BF_ENET_MAC_EIR_WAKEUP(v)   (((v) << 17) & BM_ENET_MAC_EIR_WAKEUP)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_WAKEUP(n,v)   BF_CS1n(ENET_MAC_EIR, n,WAKEUP,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field TS_AVAIL */

#define BP_ENET_MAC_EIR_TS_AVAIL      16
#define BM_ENET_MAC_EIR_TS_AVAIL      0x00010000

#define BF_ENET_MAC_EIR_TS_AVAIL(v)   (((v) << 16) & BM_ENET_MAC_EIR_TS_AVAIL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_TS_AVAIL(n,v)   BF_CS1n(ENET_MAC_EIR, n,TS_AVAIL,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field TS_TIMER */

#define BP_ENET_MAC_EIR_TS_TIMER      15
#define BM_ENET_MAC_EIR_TS_TIMER      0x00008000

#define BF_ENET_MAC_EIR_TS_TIMER(v)   (((v) << 15) & BM_ENET_MAC_EIR_TS_TIMER)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIR_TS_TIMER(n,v)   BF_CS1n(ENET_MAC_EIR, n,TS_TIMER,v)
#endif

/* --- Register HW_ENET_MAC_EIR, field RSRVD1 */

#define BP_ENET_MAC_EIR_RSRVD1      0
#define BM_ENET_MAC_EIR_RSRVD1      0x00007FFF

#define BF_ENET_MAC_EIR_RSRVD1(v)   (((v) << 0) & BM_ENET_MAC_EIR_RSRVD1)


/*
 * HW_ENET_MAC_EIMR - ENET MAC Interrupt Mask Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned EIMR  : 32;
    } B;
} hw_enet_mac_eimr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_EIMR register
 */
#define HW_ENET_MAC_EIMR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000008)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_EIMR(x)           (*(volatile hw_enet_mac_eimr_t *) HW_ENET_MAC_EIMR_ADDR(x))
#define HW_ENET_MAC_EIMR_RD(x)       (HW_ENET_MAC_EIMR(x).U)
#define HW_ENET_MAC_EIMR_WR(x,v)     (HW_ENET_MAC_EIMR(x).U = (v))
#define HW_ENET_MAC_EIMR_SET(x,v)    (HW_ENET_MAC_EIMR_WR(x,HW_ENET_MAC_EIMR_RD(x) |  (v)))
#define HW_ENET_MAC_EIMR_CLR(x,v)    (HW_ENET_MAC_EIMR_WR(x,HW_ENET_MAC_EIMR_RD(x) & ~(v)))
#define HW_ENET_MAC_EIMR_TOG(x,v)    (HW_ENET_MAC_EIMR_WR(x,HW_ENET_MAC_EIMR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_EIMR bitfields
 */
/* --- Register HW_ENET_MAC_EIMR, field EIMR */

#define BP_ENET_MAC_EIMR_EIMR      0
#define BM_ENET_MAC_EIMR_EIMR      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_EIMR_EIMR(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_EIMR_EIMR(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EIMR_EIMR(x,v)   (HW_ENET_MAC_EIMR.B.EIMR = (v))
#endif



/*
 * HW_ENET_MAC_RDAR - ENET MAC Receive Descriptor Active Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD1  : 24;
        unsigned RDAR    :  1;
        unsigned RSRVD0  :  7;
    } B;
} hw_enet_mac_rdar_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RDAR register
 */
#define HW_ENET_MAC_RDAR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000010)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RDAR(x)           (*(volatile hw_enet_mac_rdar_t *) HW_ENET_MAC_RDAR_ADDR(x))
#define HW_ENET_MAC_RDAR_RD(x)       (HW_ENET_MAC_RDAR(x).U)
#define HW_ENET_MAC_RDAR_WR(x,v)     (HW_ENET_MAC_RDAR(x).U = (v))
#define HW_ENET_MAC_RDAR_SET(x,v)    (HW_ENET_MAC_RDAR_WR(x,HW_ENET_MAC_RDAR_RD(x) |  (v)))
#define HW_ENET_MAC_RDAR_CLR(x,v)    (HW_ENET_MAC_RDAR_WR(x,HW_ENET_MAC_RDAR_RD(x) & ~(v)))
#define HW_ENET_MAC_RDAR_TOG(x,v)    (HW_ENET_MAC_RDAR_WR(x,HW_ENET_MAC_RDAR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RDAR bitfields
 */
/* --- Register HW_ENET_MAC_RDAR, field RSRVD0 */

#define BP_ENET_MAC_RDAR_RSRVD0      25
#define BM_ENET_MAC_RDAR_RSRVD0      0xFE000000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RDAR_RSRVD0(v)   ((((reg32_t) v) << 25) & BM_ENET_MAC_RDAR_RSRVD0)
#else
#define BF_ENET_MAC_RDAR_RSRVD0(v)   (((v) << 25) & BM_ENET_MAC_RDAR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_RDAR, field RDAR */

#define BP_ENET_MAC_RDAR_RDAR      24
#define BM_ENET_MAC_RDAR_RDAR      0x01000000

#define BF_ENET_MAC_RDAR_RDAR(v)   (((v) << 24) & BM_ENET_MAC_RDAR_RDAR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RDAR_RDAR(n,v)   BF_CS1n(ENET_MAC_RDAR, n,RDAR,v)
#endif

/* --- Register HW_ENET_MAC_RDAR, field RSRVD1 */

#define BP_ENET_MAC_RDAR_RSRVD1      0
#define BM_ENET_MAC_RDAR_RSRVD1      0x00FFFFFF

#define BF_ENET_MAC_RDAR_RSRVD1(v)   (((v) << 0) & BM_ENET_MAC_RDAR_RSRVD1)


/*
 * HW_ENET_MAC_TDAR - ENET MAC Transmit Descriptor Active Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD1  : 24;
        unsigned TDAR    :  1;
        unsigned RSRVD0  :  7;
    } B;
} hw_enet_mac_tdar_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TDAR register
 */
#define HW_ENET_MAC_TDAR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000014)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TDAR(x)           (*(volatile hw_enet_mac_tdar_t *) HW_ENET_MAC_TDAR_ADDR(x))
#define HW_ENET_MAC_TDAR_RD(x)      (HW_ENET_MAC_TDAR(x).U)
#define HW_ENET_MAC_TDAR_WR(x,v)     (HW_ENET_MAC_TDAR(x).U = (v))
#define HW_ENET_MAC_TDAR_SET(x,v)    (HW_ENET_MAC_TDAR_WR(x,HW_ENET_MAC_TDAR_RD(x) |  (v)))
#define HW_ENET_MAC_TDAR_CLR(x,v)    (HW_ENET_MAC_TDAR_WR(x,HW_ENET_MAC_TDAR_RD(x) & ~(v)))
#define HW_ENET_MAC_TDAR_TOG(x,v)    (HW_ENET_MAC_TDAR_WR(x,HW_ENET_MAC_TDAR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TDAR bitfields
 */
/* --- Register HW_ENET_MAC_TDAR, field RSRVD0 */

#define BP_ENET_MAC_TDAR_RSRVD0      25
#define BM_ENET_MAC_TDAR_RSRVD0      0xFE000000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TDAR_RSRVD0(v)   ((((reg32_t) v) << 25) & BM_ENET_MAC_TDAR_RSRVD0)
#else
#define BF_ENET_MAC_TDAR_RSRVD0(v)   (((v) << 25) & BM_ENET_MAC_TDAR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TDAR, field TDAR */

#define BP_ENET_MAC_TDAR_TDAR      24
#define BM_ENET_MAC_TDAR_TDAR      0x01000000

#define BF_ENET_MAC_TDAR_TDAR(v)   (((v) << 24) & BM_ENET_MAC_TDAR_TDAR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TDAR_TDAR(n,v)   BF_CS1n(ENET_MAC_TDAR, n,TDAR,v)
#endif

/* --- Register HW_ENET_MAC_TDAR, field RSRVD1 */

#define BP_ENET_MAC_TDAR_RSRVD1      0
#define BM_ENET_MAC_TDAR_RSRVD1      0x00FFFFFF

#define BF_ENET_MAC_TDAR_RSRVD1(v)   (((v) << 0) & BM_ENET_MAC_TDAR_RSRVD1)


/*
 * HW_ENET_MAC_ECR - ENET MAC Control Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RESET      :  1;
        unsigned ETHER_EN   :  1;
        unsigned MAGIC_ENA  :  1;
        unsigned SLEEP      :  1;
        unsigned ENA_1588   :  1;
        unsigned ETH_SPEED  :  1;
        unsigned DBG_EN     :  1;
        unsigned RSRVD0     : 25;
    } B;
} hw_enet_mac_ecr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ECR register
 */
#define HW_ENET_MAC_ECR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000024)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ECR(x)             (*(volatile hw_enet_mac_ecr_t *) HW_ENET_MAC_ECR_ADDR(x))
#define HW_ENET_MAC_ECR_RD(x)       (HW_ENET_MAC_ECR(x).U)
#define HW_ENET_MAC_ECR_WR(x,v)     (HW_ENET_MAC_ECR(x).U = (v))
#define HW_ENET_MAC_ECR_SET(x,v)    (HW_ENET_MAC_ECR_WR(x,HW_ENET_MAC_ECR_RD(x) |  (v)))
#define HW_ENET_MAC_ECR_CLR(x,v)    (HW_ENET_MAC_ECR_WR(x,HW_ENET_MAC_ECR_RD(x) & ~(v)))
#define HW_ENET_MAC_ECR_TOG(x,v)    (HW_ENET_MAC_ECR_WR(x,HW_ENET_MAC_ECR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ECR bitfields
 */
/* --- Register HW_ENET_MAC_ECR, field RSRVD0 */

#define BP_ENET_MAC_ECR_RSRVD0      7
#define BM_ENET_MAC_ECR_RSRVD0      0xFFFFFF80

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ECR_RSRVD0(v)   ((((reg32_t) v) << 7) & BM_ENET_MAC_ECR_RSRVD0)
#else
#define BF_ENET_MAC_ECR_RSRVD0(v)   (((v) << 7) & BM_ENET_MAC_ECR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_ECR, field DBG_EN */

#define BP_ENET_MAC_ECR_DBG_EN      6
#define BM_ENET_MAC_ECR_DBG_EN      0x00000040

#define BF_ENET_MAC_ECR_DBG_EN(v)   (((v) << 6) & BM_ENET_MAC_ECR_DBG_EN)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ECR_DBG_EN(n,v)   BF_CS1n(ENET_MAC_ECR, n,DBG_EN,v)
#endif

/* --- Register HW_ENET_MAC_ECR, field ETH_SPEED */

#define BP_ENET_MAC_ECR_ETH_SPEED      5
#define BM_ENET_MAC_ECR_ETH_SPEED      0x00000020

#define BF_ENET_MAC_ECR_ETH_SPEED(v)   (((v) << 5) & BM_ENET_MAC_ECR_ETH_SPEED)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ECR_ETH_SPEED(n,v)   BF_CS1n(ENET_MAC_ECR, n,ETH_SPEED,v)
#endif

/* --- Register HW_ENET_MAC_ECR, field ENA_1588 */

#define BP_ENET_MAC_ECR_ENA_1588      4
#define BM_ENET_MAC_ECR_ENA_1588      0x00000010

#define BF_ENET_MAC_ECR_ENA_1588(v)   (((v) << 4) & BM_ENET_MAC_ECR_ENA_1588)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ECR_ENA_1588(n,v)   BF_CS1n(ENET_MAC_ECR, n,ENA_1588,v)
#endif

/* --- Register HW_ENET_MAC_ECR, field SLEEP */

#define BP_ENET_MAC_ECR_SLEEP      3
#define BM_ENET_MAC_ECR_SLEEP      0x00000008

#define BF_ENET_MAC_ECR_SLEEP(v)   (((v) << 3) & BM_ENET_MAC_ECR_SLEEP)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ECR_SLEEP(n,v)   BF_CS1n(ENET_MAC_ECR, n,SLEEP,v)
#endif

/* --- Register HW_ENET_MAC_ECR, field MAGIC_ENA */

#define BP_ENET_MAC_ECR_MAGIC_ENA      2
#define BM_ENET_MAC_ECR_MAGIC_ENA      0x00000004

#define BF_ENET_MAC_ECR_MAGIC_ENA(v)   (((v) << 2) & BM_ENET_MAC_ECR_MAGIC_ENA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ECR_MAGIC_ENA(n,v)   BF_CS1n(ENET_MAC_ECR, n,MAGIC_ENA,v)
#endif

/* --- Register HW_ENET_MAC_ECR, field ETHER_EN */

#define BP_ENET_MAC_ECR_ETHER_EN      1
#define BM_ENET_MAC_ECR_ETHER_EN      0x00000002

#define BF_ENET_MAC_ECR_ETHER_EN(v)   (((v) << 1) & BM_ENET_MAC_ECR_ETHER_EN)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ECR_ETHER_EN(n,v)   BF_CS1n(ENET_MAC_ECR, n,ETHER_EN,v)
#endif

/* --- Register HW_ENET_MAC_ECR, field RESET */

#define BP_ENET_MAC_ECR_RESET      0
#define BM_ENET_MAC_ECR_RESET      0x00000001

#define BF_ENET_MAC_ECR_RESET(v)   (((v) << 0) & BM_ENET_MAC_ECR_RESET)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ECR_RESET(n,v)   BF_CS1n(ENET_MAC_ECR, n,RESET,v)
#endif



/*
 * HW_ENET_MAC_MMFR - ENET MAC MII Management Frame Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned DATA  : 16;
        unsigned TA    :  2;
        unsigned RA    :  5;
        unsigned PA    :  5;
        unsigned OP    :  2;
        unsigned ST    :  2;
    } B;
} hw_enet_mac_mmfr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_MMFR register
 */
#define HW_ENET_MAC_MMFR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000040)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_MMFR(x)             (*(volatile hw_enet_mac_mmfr_t *) HW_ENET_MAC_MMFR_ADDR(x))
#define HW_ENET_MAC_MMFR_RD(x)       (HW_ENET_MAC_MMFR(x).U)
#define HW_ENET_MAC_MMFR_WR(x,v)     (HW_ENET_MAC_MMFR(x).U= (v))
#define HW_ENET_MAC_MMFR_SET(x,v)    (HW_ENET_MAC_MMFR_WR(x,HW_ENET_MAC_MMFR_RD(x) |  (v)))
#define HW_ENET_MAC_MMFR_CLR(x,v)    (HW_ENET_MAC_MMFR_WR(x,HW_ENET_MAC_MMFR_RD(x) & ~(v)))
#define HW_ENET_MAC_MMFR_TOG(x,v)    (HW_ENET_MAC_MMFR_WR(x,HW_ENET_MAC_MMFR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_MMFR bitfields
 */
/* --- Register HW_ENET_MAC_MMFR, field ST */

#define BP_ENET_MAC_MMFR_ST      30
#define BM_ENET_MAC_MMFR_ST      0xC0000000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_MMFR_ST(v)   ((((reg32_t) v) << 30) & BM_ENET_MAC_MMFR_ST)
#else
#define BF_ENET_MAC_MMFR_ST(v)   (((v) << 30) & BM_ENET_MAC_MMFR_ST)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MMFR_ST(n,v)   BF_CS1n(ENET_MAC_MMFR, n,n,ST, n,n, n,     v)
#endif

/* --- Register HW_ENET_MAC_MMFR, n,n,field OP */

#define BP_ENET_MAC_MMFR_OP      28
#define BM_ENET_MAC_MMFR_OP      0x30000000

#define BF_ENET_MAC_MMFR_OP(v)   (((v) << 28) & BM_ENET_MAC_MMFR_OP)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MMFR_OP(n,v)   BF_CS1n(ENET_MAC_MMFR, n,OP,v)
#endif

/* --- Register HW_ENET_MAC_MMFR, field PA */

#define BP_ENET_MAC_MMFR_PA      23
#define BM_ENET_MAC_MMFR_PA      0x0F800000

#define BF_ENET_MAC_MMFR_PA(v)   (((v) << 23) & BM_ENET_MAC_MMFR_PA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MMFR_PA(n,v)   BF_CS1n(ENET_MAC_MMFR, n,PA,v)
#endif

/* --- Register HW_ENET_MAC_MMFR, field RA */

#define BP_ENET_MAC_MMFR_RA      18
#define BM_ENET_MAC_MMFR_RA      0x007C0000

#define BF_ENET_MAC_MMFR_RA(v)   (((v) << 18) & BM_ENET_MAC_MMFR_RA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MMFR_RA(n,v)   BF_CS1n(ENET_MAC_MMFR, n,RA,v)
#endif

/* --- Register HW_ENET_MAC_MMFR, field TA */

#define BP_ENET_MAC_MMFR_TA      16
#define BM_ENET_MAC_MMFR_TA      0x00030000

#define BF_ENET_MAC_MMFR_TA(v)   (((v) << 16) & BM_ENET_MAC_MMFR_TA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MMFR_TA(n,v)   BF_CS1n(ENET_MAC_MMFR, n,TA,v)
#endif

/* --- Register HW_ENET_MAC_MMFR, field DATA */

#define BP_ENET_MAC_MMFR_DATA      0
#define BM_ENET_MAC_MMFR_DATA      0x0000FFFF

#define BF_ENET_MAC_MMFR_DATA(v)   (((v) << 0) & BM_ENET_MAC_MMFR_DATA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MMFR_DATA(x,v)   (HW_ENET_MAC_MMFR.B.DATA = (v))
#endif



/*
 * HW_ENET_MAC_MSCR - ENET MAC MII Speed Control Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD1     :  1;
        unsigned MII_SPEED  :  6;
        unsigned DIS_PRE    :  1;
        unsigned HOLDTIME   :  3;
        unsigned RSRVD0     : 21;
    } B;
} hw_enet_mac_mscr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_MSCR register
 */
#define HW_ENET_MAC_MSCR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000044)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_MSCR(x)           (*(volatile hw_enet_mac_mscr_t *) HW_ENET_MAC_MSCR_ADDR(x))
#define HW_ENET_MAC_MSCR_RD(x)      (HW_ENET_MAC_MSCR(x).U)
#define HW_ENET_MAC_MSCR_WR(x,v)     (HW_ENET_MAC_MSCR(x).U = (v))
#define HW_ENET_MAC_MSCR_SET(x,v)    (HW_ENET_MAC_MSCR_WR(x,HW_ENET_MAC_MSCR_RD(x) |  (v)))
#define HW_ENET_MAC_MSCR_CLR(x,v)    (HW_ENET_MAC_MSCR_WR(x,HW_ENET_MAC_MSCR_RD(x) & ~(v)))
#define HW_ENET_MAC_MSCR_TOG(x,v)    (HW_ENET_MAC_MSCR_WR(x,HW_ENET_MAC_MSCR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_MSCR bitfields
 */
/* --- Register HW_ENET_MAC_MSCR, field RSRVD0 */

#define BP_ENET_MAC_MSCR_RSRVD0      11
#define BM_ENET_MAC_MSCR_RSRVD0      0xFFFFF800

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_MSCR_RSRVD0(v)   ((((reg32_t) v) << 11) & BM_ENET_MAC_MSCR_RSRVD0)
#else
#define BF_ENET_MAC_MSCR_RSRVD0(v)   (((v) << 11) & BM_ENET_MAC_MSCR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_MSCR, field HOLDTIME */

#define BP_ENET_MAC_MSCR_HOLDTIME      8
#define BM_ENET_MAC_MSCR_HOLDTIME      0x00000700

#define BF_ENET_MAC_MSCR_HOLDTIME(v)   (((v) << 8) & BM_ENET_MAC_MSCR_HOLDTIME)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MSCR_HOLDTIME(n,v)   BF_CS1n(ENET_MAC_MSCR, n,HOLDTIME,v)
#endif

/* --- Register HW_ENET_MAC_MSCR, field DIS_PRE */

#define BP_ENET_MAC_MSCR_DIS_PRE      7
#define BM_ENET_MAC_MSCR_DIS_PRE      0x00000080

#define BF_ENET_MAC_MSCR_DIS_PRE(v)   (((v) << 7) & BM_ENET_MAC_MSCR_DIS_PRE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MSCR_DIS_PRE(n,v)   BF_CS1n(ENET_MAC_MSCR, n,DIS_PRE,v)
#endif

/* --- Register HW_ENET_MAC_MSCR, field MII_SPEED */

#define BP_ENET_MAC_MSCR_MII_SPEED      1
#define BM_ENET_MAC_MSCR_MII_SPEED      0x0000007E

#define BF_ENET_MAC_MSCR_MII_SPEED(v)   (((v) << 1) & BM_ENET_MAC_MSCR_MII_SPEED)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MSCR_MII_SPEED(n,v)   BF_CS1n(ENET_MAC_MSCR, n,MII_SPEED,v)
#endif

/* --- Register HW_ENET_MAC_MSCR, field RSRVD1 */

#define BP_ENET_MAC_MSCR_RSRVD1      0
#define BM_ENET_MAC_MSCR_RSRVD1      0x00000001

#define BF_ENET_MAC_MSCR_RSRVD1(v)   (((v) << 0) & BM_ENET_MAC_MSCR_RSRVD1)


/*
 * HW_ENET_MAC_MIBC - ENET MAC MIB Control/Status Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD0     : 29;
        unsigned MIB_CLEAR  :  1;
        unsigned MIB_IDLE   :  1;
        unsigned MIB_DIS    :  1;
    } B;
} hw_enet_mac_mibc_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_MIBC register
 */
#define HW_ENET_MAC_MIBC_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000064)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_MIBC(x)           (*(volatile hw_enet_mac_mibc_t *) HW_ENET_MAC_MIBC_ADDR(x))
#define HW_ENET_MAC_MIBC_RD(x)      (HW_ENET_MAC_MIBC(x).U)
#define HW_ENET_MAC_MIBC_WR(x,v)     (HW_ENET_MAC_MIBC(x).U = (v))
#define HW_ENET_MAC_MIBC_SET(x,v)    (HW_ENET_MAC_MIBC_WR(x,HW_ENET_MAC_MIBC_RD(x) |  (v)))
#define HW_ENET_MAC_MIBC_CLR(x,v)    (HW_ENET_MAC_MIBC_WR(x,HW_ENET_MAC_MIBC_RD(x) & ~(v)))
#define HW_ENET_MAC_MIBC_TOG(x,v)    (HW_ENET_MAC_MIBC_WR(x,HW_ENET_MAC_MIBC_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_MIBC bitfields
 */
/* --- Register HW_ENET_MAC_MIBC, field MIB_DIS */

#define BP_ENET_MAC_MIBC_MIB_DIS      31
#define BM_ENET_MAC_MIBC_MIB_DIS      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_MIBC_MIB_DIS(v)   ((((reg32_t) v) << 31) & BM_ENET_MAC_MIBC_MIB_DIS)
#else
#define BF_ENET_MAC_MIBC_MIB_DIS(v)   (((v) << 31) & BM_ENET_MAC_MIBC_MIB_DIS)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MIBC_MIB_DIS(n,v)   BF_CS1n(ENET_MAC_MIBC, n,MIB_DIS,v)
#endif

/* --- Register HW_ENET_MAC_MIBC, field MIB_IDLE */

#define BP_ENET_MAC_MIBC_MIB_IDLE      30
#define BM_ENET_MAC_MIBC_MIB_IDLE      0x40000000

#define BF_ENET_MAC_MIBC_MIB_IDLE(v)   (((v) << 30) & BM_ENET_MAC_MIBC_MIB_IDLE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MIBC_MIB_IDLE(n,v)   BF_CS1n(ENET_MAC_MIBC, n,MIB_IDLE,v)
#endif

/* --- Register HW_ENET_MAC_MIBC, field MIB_CLEAR */

#define BP_ENET_MAC_MIBC_MIB_CLEAR      29
#define BM_ENET_MAC_MIBC_MIB_CLEAR      0x20000000

#define BF_ENET_MAC_MIBC_MIB_CLEAR(v)   (((v) << 29) & BM_ENET_MAC_MIBC_MIB_CLEAR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_MIBC_MIB_CLEAR(n,v)   BF_CS1n(ENET_MAC_MIBC, n,MIB_CLEAR,v)
#endif

/* --- Register HW_ENET_MAC_MIBC, field RSRVD0 */

#define BP_ENET_MAC_MIBC_RSRVD0      0
#define BM_ENET_MAC_MIBC_RSRVD0      0x1FFFFFFF

#define BF_ENET_MAC_MIBC_RSRVD0(v)   (((v) << 0) & BM_ENET_MAC_MIBC_RSRVD0)


/*
 * HW_ENET_MAC_RCR - ENET RMAC eceive Control Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned LOOP           :  1;
        unsigned DRT            :  1;
        unsigned MII_MODE       :  1;
        unsigned PROM           :  1;
        unsigned BC_REJ         :  1;
        unsigned FCE            :  1;
        unsigned RGMII_ENA      :  1;
        unsigned SGMII_ENA      :  1;
        unsigned RMII_MODE      :  1;
        unsigned RMII_10T       :  1;
        unsigned RMII_LOOP      :  1;
        unsigned RMII_ECHO      :  1;
        unsigned PAD_EN         :  1;
        unsigned PAUSE_FWD      :  1;
        unsigned CRC_FWD        :  1;
        unsigned CNTL_FRM_ENA   :  1;
        unsigned MAX_FL         : 14;
        unsigned NO_LGTH_CHECK  :  1;
        unsigned GRS            :  1;
    } B;
} hw_enet_mac_rcr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RCR register
 */
#define HW_ENET_MAC_RCR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000084)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RCR(x)           (*(volatile hw_enet_mac_rcr_t *) HW_ENET_MAC_RCR_ADDR(x))
#define HW_ENET_MAC_RCR_RD(x)      (HW_ENET_MAC_RCR(x).U)
#define HW_ENET_MAC_RCR_WR(x,v)     (HW_ENET_MAC_RCR(x).U = (v))
#define HW_ENET_MAC_RCR_SET(x,v)    (HW_ENET_MAC_RCR_WR(x,HW_ENET_MAC_RCR_RD(x) |  (v)))
#define HW_ENET_MAC_RCR_CLR(x,v)    (HW_ENET_MAC_RCR_WR(x,HW_ENET_MAC_RCR_RD(x) & ~(v)))
#define HW_ENET_MAC_RCR_TOG(x,v)    (HW_ENET_MAC_RCR_WR(x,HW_ENET_MAC_RCR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RCR bitfields
 */
/* --- Register HW_ENET_MAC_RCR, field GRS */

#define BP_ENET_MAC_RCR_GRS      31
#define BM_ENET_MAC_RCR_GRS      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RCR_GRS(v)   ((((reg32_t) v) << 31) & BM_ENET_MAC_RCR_GRS)
#else
#define BF_ENET_MAC_RCR_GRS(v)   (((v) << 31) & BM_ENET_MAC_RCR_GRS)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_GRS(n,v)   BF_CS1n(ENET_MAC_RCR, n,GRS,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field NO_LGTH_CHECK */

#define BP_ENET_MAC_RCR_NO_LGTH_CHECK      30
#define BM_ENET_MAC_RCR_NO_LGTH_CHECK      0x40000000

#define BF_ENET_MAC_RCR_NO_LGTH_CHECK(v)   (((v) << 30) & BM_ENET_MAC_RCR_NO_LGTH_CHECK)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_NO_LGTH_CHECK(n,v)   BF_CS1n(ENET_MAC_RCR, n,NO_LGTH_CHECK,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field MAX_FL */

#define BP_ENET_MAC_RCR_MAX_FL      16
#define BM_ENET_MAC_RCR_MAX_FL      0x3FFF0000

#define BF_ENET_MAC_RCR_MAX_FL(v)   (((v) << 16) & BM_ENET_MAC_RCR_MAX_FL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_MAX_FL(n,v)   BF_CS1n(ENET_MAC_RCR, n,MAX_FL,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field CNTL_FRM_ENA */

#define BP_ENET_MAC_RCR_CNTL_FRM_ENA      15
#define BM_ENET_MAC_RCR_CNTL_FRM_ENA      0x00008000

#define BF_ENET_MAC_RCR_CNTL_FRM_ENA(v)   (((v) << 15) & BM_ENET_MAC_RCR_CNTL_FRM_ENA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_CNTL_FRM_ENA(n,v)   BF_CS1n(ENET_MAC_RCR, n,CNTL_FRM_ENA,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field CRC_FWD */

#define BP_ENET_MAC_RCR_CRC_FWD      14
#define BM_ENET_MAC_RCR_CRC_FWD      0x00004000

#define BF_ENET_MAC_RCR_CRC_FWD(v)   (((v) << 14) & BM_ENET_MAC_RCR_CRC_FWD)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_CRC_FWD(n,v)   BF_CS1n(ENET_MAC_RCR, n,CRC_FWD,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field PAUSE_FWD */

#define BP_ENET_MAC_RCR_PAUSE_FWD      13
#define BM_ENET_MAC_RCR_PAUSE_FWD      0x00002000

#define BF_ENET_MAC_RCR_PAUSE_FWD(v)   (((v) << 13) & BM_ENET_MAC_RCR_PAUSE_FWD)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_PAUSE_FWD(n,v)   BF_CS1n(ENET_MAC_RCR, n,PAUSE_FWD,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field PAD_EN */

#define BP_ENET_MAC_RCR_PAD_EN      12
#define BM_ENET_MAC_RCR_PAD_EN      0x00001000

#define BF_ENET_MAC_RCR_PAD_EN(v)   (((v) << 12) & BM_ENET_MAC_RCR_PAD_EN)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_PAD_EN(n,v)   BF_CS1n(ENET_MAC_RCR, n,PAD_EN,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field RMII_ECHO */

#define BP_ENET_MAC_RCR_RMII_ECHO      11
#define BM_ENET_MAC_RCR_RMII_ECHO      0x00000800

#define BF_ENET_MAC_RCR_RMII_ECHO(v)   (((v) << 11) & BM_ENET_MAC_RCR_RMII_ECHO)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_RMII_ECHO(n,v)   BF_CS1n(ENET_MAC_RCR, n,RMII_ECHO,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field RMII_LOOP */

#define BP_ENET_MAC_RCR_RMII_LOOP      10
#define BM_ENET_MAC_RCR_RMII_LOOP      0x00000400

#define BF_ENET_MAC_RCR_RMII_LOOP(v)   (((v) << 10) & BM_ENET_MAC_RCR_RMII_LOOP)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_RMII_LOOP(n,v)   BF_CS1n(ENET_MAC_RCR, n,RMII_LOOP,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field RMII_10T */

#define BP_ENET_MAC_RCR_RMII_10T      9
#define BM_ENET_MAC_RCR_RMII_10T      0x00000200

#define BF_ENET_MAC_RCR_RMII_10T(v)   (((v) << 9) & BM_ENET_MAC_RCR_RMII_10T)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_RMII_10T(n,v)   BF_CS1n(ENET_MAC_RCR, n,RMII_10T,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field RMII_MODE */

#define BP_ENET_MAC_RCR_RMII_MODE      8
#define BM_ENET_MAC_RCR_RMII_MODE      0x00000100

#define BF_ENET_MAC_RCR_RMII_MODE(v)   (((v) << 8) & BM_ENET_MAC_RCR_RMII_MODE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_RMII_MODE(n,v)   BF_CS1n(ENET_MAC_RCR, n,RMII_MODE,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field SGMII_ENA */

#define BP_ENET_MAC_RCR_SGMII_ENA      7
#define BM_ENET_MAC_RCR_SGMII_ENA      0x00000080

#define BF_ENET_MAC_RCR_SGMII_ENA(v)   (((v) << 7) & BM_ENET_MAC_RCR_SGMII_ENA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_SGMII_ENA(n,v)   BF_CS1n(ENET_MAC_RCR, n,SGMII_ENA,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field RGMII_ENA */

#define BP_ENET_MAC_RCR_RGMII_ENA      6
#define BM_ENET_MAC_RCR_RGMII_ENA      0x00000040

#define BF_ENET_MAC_RCR_RGMII_ENA(v)   (((v) << 6) & BM_ENET_MAC_RCR_RGMII_ENA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_RGMII_ENA(n,v)   BF_CS1n(ENET_MAC_RCR, n,RGMII_ENA,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field FCE */

#define BP_ENET_MAC_RCR_FCE      5
#define BM_ENET_MAC_RCR_FCE      0x00000020

#define BF_ENET_MAC_RCR_FCE(v)   (((v) << 5) & BM_ENET_MAC_RCR_FCE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_FCE(n,v)   BF_CS1n(ENET_MAC_RCR, n,FCE,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field BC_REJ */

#define BP_ENET_MAC_RCR_BC_REJ      4
#define BM_ENET_MAC_RCR_BC_REJ      0x00000010

#define BF_ENET_MAC_RCR_BC_REJ(v)   (((v) << 4) & BM_ENET_MAC_RCR_BC_REJ)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_BC_REJ(n,v)   BF_CS1n(ENET_MAC_RCR, n,BC_REJ,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field PROM */

#define BP_ENET_MAC_RCR_PROM      3
#define BM_ENET_MAC_RCR_PROM      0x00000008

#define BF_ENET_MAC_RCR_PROM(v)   (((v) << 3) & BM_ENET_MAC_RCR_PROM)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_PROM(n,v)   BF_CS1n(ENET_MAC_RCR, n,PROM,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field MII_MODE */

#define BP_ENET_MAC_RCR_MII_MODE      2
#define BM_ENET_MAC_RCR_MII_MODE      0x00000004

#define BF_ENET_MAC_RCR_MII_MODE(v)   (((v) << 2) & BM_ENET_MAC_RCR_MII_MODE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_MII_MODE(n,v)   BF_CS1n(ENET_MAC_RCR, n,MII_MODE,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field DRT */

#define BP_ENET_MAC_RCR_DRT      1
#define BM_ENET_MAC_RCR_DRT      0x00000002

#define BF_ENET_MAC_RCR_DRT(v)   (((v) << 1) & BM_ENET_MAC_RCR_DRT)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_DRT(n,v)   BF_CS1n(ENET_MAC_RCR, n,DRT,v)
#endif

/* --- Register HW_ENET_MAC_RCR, field LOOP */

#define BP_ENET_MAC_RCR_LOOP      0
#define BM_ENET_MAC_RCR_LOOP      0x00000001

#define BF_ENET_MAC_RCR_LOOP(v)   (((v) << 0) & BM_ENET_MAC_RCR_LOOP)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RCR_LOOP(n,v)   BF_CS1n(ENET_MAC_RCR, n,LOOP,v)
#endif



/*
 * HW_ENET_MAC_TCR - ENET MAC Transmit Control Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned GTS          :  1;
        unsigned HBC          :  1;
        unsigned FEDN         :  1;
        unsigned TFC_PAUSE    :  1;
        unsigned RFC_PAUSE    :  1;
        unsigned TX_ADDR_SEL  :  3;
        unsigned TX_ADDR_INS  :  1;
        unsigned TX_CRC_FWD   :  1;
        unsigned RSRVD0       : 22;
    } B;
} hw_enet_mac_tcr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TCR register
 */
#define HW_ENET_MAC_TCR_ADDR(x)      (REGS_ENET_BASE(x) + 0x000000c4)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TCR(x)           (*(volatile hw_enet_mac_tcr_t *) HW_ENET_MAC_TCR_ADDR(x))
#define HW_ENET_MAC_TCR_RD(x)      (HW_ENET_MAC_TCR(x).U)
#define HW_ENET_MAC_TCR_WR(x,v)     (HW_ENET_MAC_TCR(x).U = (v))
#define HW_ENET_MAC_TCR_SET(x,v)    (HW_ENET_MAC_TCR_WR(x,HW_ENET_MAC_TCR_RD(x) |  (v)))
#define HW_ENET_MAC_TCR_CLR(x,v)    (HW_ENET_MAC_TCR_WR(x,HW_ENET_MAC_TCR_RD(x) & ~(v)))
#define HW_ENET_MAC_TCR_TOG(x,v)    (HW_ENET_MAC_TCR_WR(x,HW_ENET_MAC_TCR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TCR bitfields
 */
/* --- Register HW_ENET_MAC_TCR, field RSRVD0 */

#define BP_ENET_MAC_TCR_RSRVD0      10
#define BM_ENET_MAC_TCR_RSRVD0      0xFFFFFC00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TCR_RSRVD0(v)   ((((reg32_t) v) << 10) & BM_ENET_MAC_TCR_RSRVD0)
#else
#define BF_ENET_MAC_TCR_RSRVD0(v)   (((v) << 10) & BM_ENET_MAC_TCR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TCR, field TX_CRC_FWD */

#define BP_ENET_MAC_TCR_TX_CRC_FWD      9
#define BM_ENET_MAC_TCR_TX_CRC_FWD      0x00000200

#define BF_ENET_MAC_TCR_TX_CRC_FWD(v)   (((v) << 9) & BM_ENET_MAC_TCR_TX_CRC_FWD)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_TX_CRC_FWD(n,v)   BF_CS1n(ENET_MAC_TCR, n,TX_CRC_FWD,v)
#endif

/* --- Register HW_ENET_MAC_TCR, field TX_ADDR_INS */

#define BP_ENET_MAC_TCR_TX_ADDR_INS      8
#define BM_ENET_MAC_TCR_TX_ADDR_INS      0x00000100

#define BF_ENET_MAC_TCR_TX_ADDR_INS(v)   (((v) << 8) & BM_ENET_MAC_TCR_TX_ADDR_INS)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_TX_ADDR_INS(n,v)   BF_CS1n(ENET_MAC_TCR, n,TX_ADDR_INS,v)
#endif

/* --- Register HW_ENET_MAC_TCR, field TX_ADDR_SEL */

#define BP_ENET_MAC_TCR_TX_ADDR_SEL      5
#define BM_ENET_MAC_TCR_TX_ADDR_SEL      0x000000E0

#define BF_ENET_MAC_TCR_TX_ADDR_SEL(v)   (((v) << 5) & BM_ENET_MAC_TCR_TX_ADDR_SEL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_TX_ADDR_SEL(n,v)   BF_CS1n(ENET_MAC_TCR, n,TX_ADDR_SEL,v)
#endif

/* --- Register HW_ENET_MAC_TCR, field RFC_PAUSE */

#define BP_ENET_MAC_TCR_RFC_PAUSE      4
#define BM_ENET_MAC_TCR_RFC_PAUSE      0x00000010

#define BF_ENET_MAC_TCR_RFC_PAUSE(v)   (((v) << 4) & BM_ENET_MAC_TCR_RFC_PAUSE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_RFC_PAUSE(n,v)   BF_CS1n(ENET_MAC_TCR, n,RFC_PAUSE,v)
#endif

/* --- Register HW_ENET_MAC_TCR, field TFC_PAUSE */

#define BP_ENET_MAC_TCR_TFC_PAUSE      3
#define BM_ENET_MAC_TCR_TFC_PAUSE      0x00000008

#define BF_ENET_MAC_TCR_TFC_PAUSE(v)   (((v) << 3) & BM_ENET_MAC_TCR_TFC_PAUSE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_TFC_PAUSE(n,v)   BF_CS1n(ENET_MAC_TCR, n,TFC_PAUSE,v)
#endif

/* --- Register HW_ENET_MAC_TCR, field FEDN */

#define BP_ENET_MAC_TCR_FEDN      2
#define BM_ENET_MAC_TCR_FEDN      0x00000004

#define BF_ENET_MAC_TCR_FEDN(v)   (((v) << 2) & BM_ENET_MAC_TCR_FEDN)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_FEDN(n,v)   BF_CS1n(ENET_MAC_TCR, n,FEDN,v)
#endif

/* --- Register HW_ENET_MAC_TCR, field HBC */

#define BP_ENET_MAC_TCR_HBC      1
#define BM_ENET_MAC_TCR_HBC      0x00000002

#define BF_ENET_MAC_TCR_HBC(v)   (((v) << 1) & BM_ENET_MAC_TCR_HBC)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_HBC(n,v)   BF_CS1n(ENET_MAC_TCR, n,HBC,v)
#endif

/* --- Register HW_ENET_MAC_TCR, field GTS */

#define BP_ENET_MAC_TCR_GTS      0
#define BM_ENET_MAC_TCR_GTS      0x00000001

#define BF_ENET_MAC_TCR_GTS(v)   (((v) << 0) & BM_ENET_MAC_TCR_GTS)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TCR_GTS(n,v)   BF_CS1n(ENET_MAC_TCR, n,GTS,v)
#endif



/*
 * HW_ENET_MAC_PALR - ENET MAC Physical ADDR(x)ess Low Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned PADDR1  : 32;
    } B;
} hw_enet_mac_palr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_PALR register
 */
#define HW_ENET_MAC_PALR_ADDR(x)      (REGS_ENET_BASE(x) + 0x000000e4)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_PALR(x)            (*(volatile hw_enet_mac_palr_t *) HW_ENET_MAC_PALR_ADDR(x))
#define HW_ENET_MAC_PALR_RD(x)      (HW_ENET_MAC_PALR(x).U)
#define HW_ENET_MAC_PALR_WR(x,v)     (HW_ENET_MAC_PALR(x).U = (v))
#define HW_ENET_MAC_PALR_SET(x,v)    (HW_ENET_MAC_PALR_WR(x,HW_ENET_MAC_PALR_RD(x) |  (v)))
#define HW_ENET_MAC_PALR_CLR(x,v)    (HW_ENET_MAC_PALR_WR(x,HW_ENET_MAC_PALR_RD(x) & ~(v)))
#define HW_ENET_MAC_PALR_TOG(x,v)    (HW_ENET_MAC_PALR_WR(x,HW_ENET_MAC_PALR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_PALR bitfields
 */
/* --- Register HW_ENET_MAC_PALR, field PADDR1 */

#define BP_ENET_MAC_PALR_PADDR1      0
#define BM_ENET_MAC_PALR_PADDR1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_PALR_PADDR1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_PALR_PADDR1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_PALR_PADDR1(x,v)   (HW_ENET_MAC_PALR.B.PADDR1 = (v))
#endif



/*
 * HW_ENET_MAC_PAUR - ENET MAC Physical ADDR(x)ess High Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TYPE    : 16;
        unsigned PADDR2  : 16;
    } B;
} hw_enet_mac_paur_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_PAUR register
 */
#define HW_ENET_MAC_PAUR_ADDR(x)      (REGS_ENET_BASE(x) + 0x000000e8)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_PAUR(x)           (*(volatile hw_enet_mac_paur_t *) HW_ENET_MAC_PAUR_ADDR(x))
#define HW_ENET_MAC_PAUR_RD(x)      (HW_ENET_MAC_PAUR(x).U)
#define HW_ENET_MAC_PAUR_WR(x,v)     (HW_ENET_MAC_PAUR(x).U = (v))
#define HW_ENET_MAC_PAUR_SET(x,v)    (HW_ENET_MAC_PAUR_WR(x,HW_ENET_MAC_PAUR_RD(x) |  (v)))
#define HW_ENET_MAC_PAUR_CLR(x,v)    (HW_ENET_MAC_PAUR_WR(x,HW_ENET_MAC_PAUR_RD(x) & ~(v)))
#define HW_ENET_MAC_PAUR_TOG(x,v)    (HW_ENET_MAC_PAUR_WR(x,HW_ENET_MAC_PAUR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_PAUR bitfields
 */
/* --- Register HW_ENET_MAC_PAUR, field PADDR2 */

#define BP_ENET_MAC_PAUR_PADDR2      16
#define BM_ENET_MAC_PAUR_PADDR2      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_PAUR_PADDR2(v)   ((((reg32_t) v) << 16) & BM_ENET_MAC_PAUR_PADDR2)
#else
#define BF_ENET_MAC_PAUR_PADDR2(v)   (((v) << 16) & BM_ENET_MAC_PAUR_PADDR2)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_PAUR_PADDR2(x,v)   (HW_ENET_MAC_PAUR(x).B.PADDR2 = (v))
#endif

/* --- Register HW_ENET_MAC_PAUR, field TYPE */

#define BP_ENET_MAC_PAUR_TYPE      0
#define BM_ENET_MAC_PAUR_TYPE      0x0000FFFF

#define BF_ENET_MAC_PAUR_TYPE(v)   (((v) << 0) & BM_ENET_MAC_PAUR_TYPE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_PAUR_TYPE(x,v)   (HW_ENET_MAC_PAUR(x).B.TYPE = (v))
#endif


/*
 * HW_ENET_MAC_OPD - ENET MAC Opcode/Pause Duration Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned PAUSE_DUR  : 16;
        unsigned OPCODE     : 16;
    } B;
} hw_enet_mac_opd_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_OPD register
 */
#define HW_ENET_MAC_OPD_ADDR(x)      (REGS_ENET_BASE(x) + 0x000000ec)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_OPD(x)           (*(volatile hw_enet_mac_opd_t *) HW_ENET_MAC_OPD_ADDR(x))
#define HW_ENET_MAC_OPD_RD(x)      (HW_ENET_MAC_OPD(x).U)
#define HW_ENET_MAC_OPD_WR(x,v)     (HW_ENET_MAC_OPD(x).U = (v))
#define HW_ENET_MAC_OPD_SET(x,v)    (HW_ENET_MAC_OPD_WR(x,HW_ENET_MAC_OPD_RD(x) |  (v)))
#define HW_ENET_MAC_OPD_CLR(x,v)    (HW_ENET_MAC_OPD_WR(x,HW_ENET_MAC_OPD_RD(x) & ~(v)))
#define HW_ENET_MAC_OPD_TOG(x,v)    (HW_ENET_MAC_OPD_WR(x,HW_ENET_MAC_OPD_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_OPD bitfields
 */
/* --- Register HW_ENET_MAC_OPD, field OPCODE */

#define BP_ENET_MAC_OPD_OPCODE      16
#define BM_ENET_MAC_OPD_OPCODE      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_OPD_OPCODE(v)   ((((reg32_t) v) << 16) & BM_ENET_MAC_OPD_OPCODE)
#else
#define BF_ENET_MAC_OPD_OPCODE(v)   (((v) << 16) & BM_ENET_MAC_OPD_OPCODE)
#endif
/* --- Register HW_ENET_MAC_OPD, field PAUSE_DUR */

#define BP_ENET_MAC_OPD_PAUSE_DUR      0
#define BM_ENET_MAC_OPD_PAUSE_DUR      0x0000FFFF

#define BF_ENET_MAC_OPD_PAUSE_DUR(v)   (((v) << 0) & BM_ENET_MAC_OPD_PAUSE_DUR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_OPD_PAUSE_DUR(x,v)   (HW_ENET_MAC_OPD.B.PAUSE_DUR = (v))
#endif



/*
 * HW_ENET_MAC_IAUR - ENET MAC Descriptor Individual Upper ADDR(x)ess Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IADDR1  : 32;
    } B;
} hw_enet_mac_iaur_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IAUR register
 */
#define HW_ENET_MAC_IAUR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000118)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IAUR(x)           (*(volatile hw_enet_mac_iaur_t *) HW_ENET_MAC_IAUR_ADDR(x))
#define HW_ENET_MAC_IAUR_RD(x)      (HW_ENET_MAC_IAUR(x).U)
#define HW_ENET_MAC_IAUR_WR(x,v)     (HW_ENET_MAC_IAUR(x).U = (v))
#define HW_ENET_MAC_IAUR_SET(x,v)    (HW_ENET_MAC_IAUR_WR(x,HW_ENET_MAC_IAUR_RD(x) |  (v)))
#define HW_ENET_MAC_IAUR_CLR(x,v)    (HW_ENET_MAC_IAUR_WR(x,HW_ENET_MAC_IAUR_RD(x) & ~(v)))
#define HW_ENET_MAC_IAUR_TOG(x,v)    (HW_ENET_MAC_IAUR_WR(x,HW_ENET_MAC_IAUR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IAUR bitfields
 */
/* --- Register HW_ENET_MAC_IAUR, field IADDR1 */

#define BP_ENET_MAC_IAUR_IADDR1      0
#define BM_ENET_MAC_IAUR_IADDR1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IAUR_IADDR1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IAUR_IADDR1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IAUR_IADDR1(x,v)   (HW_ENET_MAC_IAUR.B.IADDR1 = (v))
#endif



/*
 * HW_ENET_MAC_IALR - ENET MAC Descriptor Individual Lower ADDR(x)ess Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IADDR2  : 32;
    } B;
} hw_enet_mac_ialr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IALR register
 */
#define HW_ENET_MAC_IALR_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000011c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IALR(x)           (*(volatile hw_enet_mac_ialr_t *) HW_ENET_MAC_IALR_ADDR(x))
#define HW_ENET_MAC_IALR_RD(x)      (HW_ENET_MAC_IALR(x).U)
#define HW_ENET_MAC_IALR_WR(x,v)     (HW_ENET_MAC_IALR(x).U = (v))
#define HW_ENET_MAC_IALR_SET(x,v)    (HW_ENET_MAC_IALR_WR(x,HW_ENET_MAC_IALR_RD(x) |  (v)))
#define HW_ENET_MAC_IALR_CLR(x,v)    (HW_ENET_MAC_IALR_WR(x,HW_ENET_MAC_IALR_RD(x) & ~(v)))
#define HW_ENET_MAC_IALR_TOG(x,v)    (HW_ENET_MAC_IALR_WR(x,HW_ENET_MAC_IALR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IALR bitfields
 */
/* --- Register HW_ENET_MAC_IALR, field IADDR2 */

#define BP_ENET_MAC_IALR_IADDR2      0
#define BM_ENET_MAC_IALR_IADDR2      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IALR_IADDR2(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IALR_IADDR2(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IALR_IADDR2(x,v)   (HW_ENET_MAC_IALR.B.IADDR2 = (v))
#endif



/*
 * HW_ENET_MAC_GAUR - ENET MAC Descriptor Group Upper ADDR(x)ess Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned GADDR1  : 32;
    } B;
} hw_enet_mac_gaur_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_GAUR register
 */
#define HW_ENET_MAC_GAUR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000120)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_GAUR(x)           (*(volatile hw_enet_mac_gaur_t *) HW_ENET_MAC_GAUR_ADDR(x))
#define HW_ENET_MAC_GAUR_RD(x)      (HW_ENET_MAC_GAUR(x).U)
#define HW_ENET_MAC_GAUR_WR(x,v)     (HW_ENET_MAC_GAUR(x).U = (v))
#define HW_ENET_MAC_GAUR_SET(x,v)    (HW_ENET_MAC_GAUR_WR(x,HW_ENET_MAC_GAUR_RD(x) |  (v)))
#define HW_ENET_MAC_GAUR_CLR(x,v)    (HW_ENET_MAC_GAUR_WR(x,HW_ENET_MAC_GAUR_RD(x) & ~(v)))
#define HW_ENET_MAC_GAUR_TOG(x,v)    (HW_ENET_MAC_GAUR_WR(x,HW_ENET_MAC_GAUR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_GAUR bitfields
 */
/* --- Register HW_ENET_MAC_GAUR, field GADDR1 */

#define BP_ENET_MAC_GAUR_GADDR1      0
#define BM_ENET_MAC_GAUR_GADDR1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_GAUR_GADDR1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_GAUR_GADDR1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_GAUR_GADDR1(x,v)   (HW_ENET_MAC_GAUR.B.GADDR1 = (v))
#endif



/*
 * HW_ENET_MAC_GALR - ENET MAC Descriptor Group Lower ADDR(x)ess Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned GADDR2  : 32;
    } B;
} hw_enet_mac_galr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_GALR register
 */
#define HW_ENET_MAC_GALR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000124)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_GALR(x)           (*(volatile hw_enet_mac_galr_t *) HW_ENET_MAC_GALR_ADDR(x))
#define HW_ENET_MAC_GALR_RD(x)      (HW_ENET_MAC_GALR(x).U)
#define HW_ENET_MAC_GALR_WR(x,v)     (HW_ENET_MAC_GALR(x).U = (v))
#define HW_ENET_MAC_GALR_SET(x,v)    (HW_ENET_MAC_GALR_WR(x,HW_ENET_MAC_GALR_RD(x) |  (v)))
#define HW_ENET_MAC_GALR_CLR(x,v)    (HW_ENET_MAC_GALR_WR(x,HW_ENET_MAC_GALR_RD(x) & ~(v)))
#define HW_ENET_MAC_GALR_TOG(x,v)    (HW_ENET_MAC_GALR_WR(x,HW_ENET_MAC_GALR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_GALR bitfields
 */
/* --- Register HW_ENET_MAC_GALR, field GADDR2 */

#define BP_ENET_MAC_GALR_GADDR2      0
#define BM_ENET_MAC_GALR_GADDR2      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_GALR_GADDR2(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_GALR_GADDR2(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_GALR_GADDR2(x,v)   (HW_ENET_MAC_GALR.B.GADDR2 = (v))
#endif



/*
 * HW_ENET_MAC_TFW_SFCR - ENET MAC Transmit FIFO Watermark and Store and Forward Control Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TFWR     :  6;
        unsigned RSRVD1   :  2;
        unsigned STR_FWD  :  1;
        unsigned RSRVD0   : 23;
    } B;
} hw_enet_mac_tfw_sfcr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TFW_SFCR register
 */
#define HW_ENET_MAC_TFW_SFCR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000144)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TFW_SFCR(x)           (*(volatile hw_enet_mac_tfw_sfcr_t *) HW_ENET_MAC_TFW_SFCR_ADDR(x))
#define HW_ENET_MAC_TFW_SFCR_RD(x)      (HW_ENET_MAC_TFW_SFCR(x).U)
#define HW_ENET_MAC_TFW_SFCR_WR(x,v)     (HW_ENET_MAC_TFW_SFCR(x).U = (v))
#define HW_ENET_MAC_TFW_SFCR_SET(x,v)    (HW_ENET_MAC_TFW_SFCR_WR(x,HW_ENET_MAC_TFW_SFCR_RD(x) |  (v)))
#define HW_ENET_MAC_TFW_SFCR_CLR(x,v)    (HW_ENET_MAC_TFW_SFCR_WR(x,HW_ENET_MAC_TFW_SFCR_RD(x) & ~(v)))
#define HW_ENET_MAC_TFW_SFCR_TOG(x,v)    (HW_ENET_MAC_TFW_SFCR_WR(x,HW_ENET_MAC_TFW_SFCR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TFW_SFCR bitfields
 */
/* --- Register HW_ENET_MAC_TFW_SFCR, field RSRVD0 */

#define BP_ENET_MAC_TFW_SFCR_RSRVD0      9
#define BM_ENET_MAC_TFW_SFCR_RSRVD0      0xFFFFFE00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TFW_SFCR_RSRVD0(v)   ((((reg32_t) v) << 9) & BM_ENET_MAC_TFW_SFCR_RSRVD0)
#else
#define BF_ENET_MAC_TFW_SFCR_RSRVD0(v)   (((v) << 9) & BM_ENET_MAC_TFW_SFCR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TFW_SFCR, field STR_FWD */

#define BP_ENET_MAC_TFW_SFCR_STR_FWD      8
#define BM_ENET_MAC_TFW_SFCR_STR_FWD      0x00000100

#define BF_ENET_MAC_TFW_SFCR_STR_FWD(v)   (((v) << 8) & BM_ENET_MAC_TFW_SFCR_STR_FWD)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TFW_SFCR_STR_FWD(n,v)   BF_CS1n(ENET_MAC_TFW_SFCR, n,STR_FWD,v)
#endif

/* --- Register HW_ENET_MAC_TFW_SFCR, field RSRVD1 */

#define BP_ENET_MAC_TFW_SFCR_RSRVD1      6
#define BM_ENET_MAC_TFW_SFCR_RSRVD1      0x000000C0

#define BF_ENET_MAC_TFW_SFCR_RSRVD1(v)   (((v) << 6) & BM_ENET_MAC_TFW_SFCR_RSRVD1)
/* --- Register HW_ENET_MAC_TFW_SFCR, field TFWR */

#define BP_ENET_MAC_TFW_SFCR_TFWR      0
#define BM_ENET_MAC_TFW_SFCR_TFWR      0x0000003F

#define BF_ENET_MAC_TFW_SFCR_TFWR(v)   (((v) << 0) & BM_ENET_MAC_TFW_SFCR_TFWR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TFW_SFCR_TFWR(n,v)   BF_CS1n(ENET_MAC_TFW_SFCR, n,TFWR,v)
#endif



/*
 * HW_ENET_MAC_FRBR - ENET MAC FIFO Receive Bound Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD1   :  2;
        unsigned R_BOUND  :  8;
        unsigned RSRVD0   : 22;
    } B;
} hw_enet_mac_frbr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_FRBR register
 */
#define HW_ENET_MAC_FRBR_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000014c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_FRBR(x)           (*(volatile hw_enet_mac_frbr_t *) HW_ENET_MAC_FRBR_ADDR(x))
#define HW_ENET_MAC_FRBR_RD(x)      (HW_ENET_MAC_FRBR(x).U)
#define HW_ENET_MAC_FRBR_WR(x,v)     (HW_ENET_MAC_FRBR(x).U = (v))
#define HW_ENET_MAC_FRBR_SET(x,v)    (HW_ENET_MAC_FRBR_WR(x,HW_ENET_MAC_FRBR_RD(x) |  (v)))
#define HW_ENET_MAC_FRBR_CLR(x,v)    (HW_ENET_MAC_FRBR_WR(x,HW_ENET_MAC_FRBR_RD(x) & ~(v)))
#define HW_ENET_MAC_FRBR_TOG(x,v)    (HW_ENET_MAC_FRBR_WR(x,HW_ENET_MAC_FRBR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_FRBR bitfields
 */
/* --- Register HW_ENET_MAC_FRBR, field RSRVD0 */

#define BP_ENET_MAC_FRBR_RSRVD0      10
#define BM_ENET_MAC_FRBR_RSRVD0      0xFFFFFC00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_FRBR_RSRVD0(v)   ((((reg32_t) v) << 10) & BM_ENET_MAC_FRBR_RSRVD0)
#else
#define BF_ENET_MAC_FRBR_RSRVD0(v)   (((v) << 10) & BM_ENET_MAC_FRBR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_FRBR, field R_BOUND */

#define BP_ENET_MAC_FRBR_R_BOUND      2
#define BM_ENET_MAC_FRBR_R_BOUND      0x000003FC

#define BF_ENET_MAC_FRBR_R_BOUND(v)   (((v) << 2) & BM_ENET_MAC_FRBR_R_BOUND)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_FRBR_R_BOUND(n,v)   BF_CS1n(ENET_MAC_FRBR, n,R_BOUND,v)
#endif

/* --- Register HW_ENET_MAC_FRBR, field RSRVD1 */

#define BP_ENET_MAC_FRBR_RSRVD1      0
#define BM_ENET_MAC_FRBR_RSRVD1      0x00000003

#define BF_ENET_MAC_FRBR_RSRVD1(v)   (((v) << 0) & BM_ENET_MAC_FRBR_RSRVD1)


/*
 * HW_ENET_MAC_FRSR - ENET MAC FIFO Receive FIFO Start Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD2    :  2;
        unsigned R_FSTART  :  8;
        unsigned RSRVD1    :  1;
        unsigned RSRVD0    : 21;
    } B;
} hw_enet_mac_frsr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_FRSR register
 */
#define HW_ENET_MAC_FRSR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000150)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_FRSR(x)           (*(volatile hw_enet_mac_frsr_t *) HW_ENET_MAC_FRSR_ADDR(x))
#define HW_ENET_MAC_FRSR_RD(x)      (HW_ENET_MAC_FRSR(x).U)
#define HW_ENET_MAC_FRSR_WR(x,v)     (HW_ENET_MAC_FRSR(x).U = (v))
#define HW_ENET_MAC_FRSR_SET(x,v)    (HW_ENET_MAC_FRSR_WR(x,HW_ENET_MAC_FRSR_RD(x) |  (v)))
#define HW_ENET_MAC_FRSR_CLR(x,v)    (HW_ENET_MAC_FRSR_WR(x,HW_ENET_MAC_FRSR_RD(x) & ~(v)))
#define HW_ENET_MAC_FRSR_TOG(x,v)    (HW_ENET_MAC_FRSR_WR(x,HW_ENET_MAC_FRSR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_FRSR bitfields
 */
/* --- Register HW_ENET_MAC_FRSR, field RSRVD0 */

#define BP_ENET_MAC_FRSR_RSRVD0      11
#define BM_ENET_MAC_FRSR_RSRVD0      0xFFFFF800

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_FRSR_RSRVD0(v)   ((((reg32_t) v) << 11) & BM_ENET_MAC_FRSR_RSRVD0)
#else
#define BF_ENET_MAC_FRSR_RSRVD0(v)   (((v) << 11) & BM_ENET_MAC_FRSR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_FRSR, field RSRVD1 */

#define BP_ENET_MAC_FRSR_RSRVD1      10
#define BM_ENET_MAC_FRSR_RSRVD1      0x00000400

#define BF_ENET_MAC_FRSR_RSRVD1(v)   (((v) << 10) & BM_ENET_MAC_FRSR_RSRVD1)
/* --- Register HW_ENET_MAC_FRSR, field R_FSTART */

#define BP_ENET_MAC_FRSR_R_FSTART      2
#define BM_ENET_MAC_FRSR_R_FSTART      0x000003FC

#define BF_ENET_MAC_FRSR_R_FSTART(v)   (((v) << 2) & BM_ENET_MAC_FRSR_R_FSTART)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_FRSR_R_FSTART(n,v)   BF_CS1n(ENET_MAC_FRSR, n,R_FSTART,v)
#endif

/* --- Register HW_ENET_MAC_FRSR, field RSRVD2 */

#define BP_ENET_MAC_FRSR_RSRVD2      0
#define BM_ENET_MAC_FRSR_RSRVD2      0x00000003

#define BF_ENET_MAC_FRSR_RSRVD2(v)   (((v) << 0) & BM_ENET_MAC_FRSR_RSRVD2)


/*
 * HW_ENET_MAC_ERDSR - ENET MAC Pointer to Receive Descriptor Ring Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD0       :  2;
        unsigned R_DES_START  : 30;
    } B;
} hw_enet_mac_erdsr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ERDSR register
 */
#define HW_ENET_MAC_ERDSR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000180)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ERDSR(x)           (*(volatile hw_enet_mac_erdsr_t *) HW_ENET_MAC_ERDSR_ADDR(x))
#define HW_ENET_MAC_ERDSR_RD(x)      (HW_ENET_MAC_ERDSR(x).U)
#define HW_ENET_MAC_ERDSR_WR(x,v)     (HW_ENET_MAC_ERDSR(x).U = (v))
#define HW_ENET_MAC_ERDSR_SET(x,v)    (HW_ENET_MAC_ERDSR_WR(x,HW_ENET_MAC_ERDSR_RD(x) |  (v)))
#define HW_ENET_MAC_ERDSR_CLR(x,v)    (HW_ENET_MAC_ERDSR_WR(x,HW_ENET_MAC_ERDSR_RD(x) & ~(v)))
#define HW_ENET_MAC_ERDSR_TOG(x,v)    (HW_ENET_MAC_ERDSR_WR(x,HW_ENET_MAC_ERDSR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ERDSR bitfields
 */
/* --- Register HW_ENET_MAC_ERDSR, field R_DES_START */

#define BP_ENET_MAC_ERDSR_R_DES_START      2
#define BM_ENET_MAC_ERDSR_R_DES_START      0xFFFFFFFC

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ERDSR_R_DES_START(v)   ((((reg32_t) v) << 2) & BM_ENET_MAC_ERDSR_R_DES_START)
#else
#define BF_ENET_MAC_ERDSR_R_DES_START(v)   (((v) << 2) & BM_ENET_MAC_ERDSR_R_DES_START)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ERDSR_R_DES_START(n,v)   BF_CS1n(ENET_MAC_ERDSR, n,R_DES_START,v)
#endif

/* --- Register HW_ENET_MAC_ERDSR, field RSRVD0 */

#define BP_ENET_MAC_ERDSR_RSRVD0      0
#define BM_ENET_MAC_ERDSR_RSRVD0      0x00000003

#define BF_ENET_MAC_ERDSR_RSRVD0(v)   (((v) << 0) & BM_ENET_MAC_ERDSR_RSRVD0)


/*
 * HW_ENET_MAC_ETDSR - ENET MAC Pointer to Transmit Descriptor Ring Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD0       :  2;
        unsigned X_DES_START  : 30;
    } B;
} hw_enet_mac_etdsr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ETDSR register
 */
#define HW_ENET_MAC_ETDSR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000184)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ETDSR(x)           (*(volatile hw_enet_mac_etdsr_t *) HW_ENET_MAC_ETDSR_ADDR(x))
#define HW_ENET_MAC_ETDSR_RD(x)      (HW_ENET_MAC_ETDSR(x).U)
#define HW_ENET_MAC_ETDSR_WR(x,v)     (HW_ENET_MAC_ETDSR(x).U = (v))
#define HW_ENET_MAC_ETDSR_SET(x,v)    (HW_ENET_MAC_ETDSR_WR(x,HW_ENET_MAC_ETDSR_RD(x) |  (v)))
#define HW_ENET_MAC_ETDSR_CLR(x,v)    (HW_ENET_MAC_ETDSR_WR(x,HW_ENET_MAC_ETDSR_RD(x) & ~(v)))
#define HW_ENET_MAC_ETDSR_TOG(x,v)    (HW_ENET_MAC_ETDSR_WR(x,HW_ENET_MAC_ETDSR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ETDSR bitfields
 */
/* --- Register HW_ENET_MAC_ETDSR, field X_DES_START */

#define BP_ENET_MAC_ETDSR_X_DES_START      2
#define BM_ENET_MAC_ETDSR_X_DES_START      0xFFFFFFFC

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ETDSR_X_DES_START(v)   ((((reg32_t) v) << 2) & BM_ENET_MAC_ETDSR_X_DES_START)
#else
#define BF_ENET_MAC_ETDSR_X_DES_START(v)   (((v) << 2) & BM_ENET_MAC_ETDSR_X_DES_START)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ETDSR_X_DES_START(n,v)   BF_CS1n(ENET_MAC_ETDSR, n,X_DES_START,v)
#endif

/* --- Register HW_ENET_MAC_ETDSR, field RSRVD0 */

#define BP_ENET_MAC_ETDSR_RSRVD0      0
#define BM_ENET_MAC_ETDSR_RSRVD0      0x00000003

#define BF_ENET_MAC_ETDSR_RSRVD0(v)   (((v) << 0) & BM_ENET_MAC_ETDSR_RSRVD0)


/*
 * HW_ENET_MAC_EMRBR - ENET MAC Maximum Receive Buffer Size Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RSRVD1      :  4;
        unsigned R_BUF_SIZE  :  7;
        unsigned RSRVD0      : 21;
    } B;
} hw_enet_mac_emrbr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_EMRBR register
 */
#define HW_ENET_MAC_EMRBR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000188)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_EMRBR(x)           (*(volatile hw_enet_mac_emrbr_t *) HW_ENET_MAC_EMRBR_ADDR(x))
#define HW_ENET_MAC_EMRBR_RD(x)      (HW_ENET_MAC_EMRBR(x).U)
#define HW_ENET_MAC_EMRBR_WR(x,v)     (HW_ENET_MAC_EMRBR(x).U = (v))
#define HW_ENET_MAC_EMRBR_SET(x,v)    (HW_ENET_MAC_EMRBR_WR(x,HW_ENET_MAC_EMRBR_RD(x) |  (v)))
#define HW_ENET_MAC_EMRBR_CLR(x,v)    (HW_ENET_MAC_EMRBR_WR(x,HW_ENET_MAC_EMRBR_RD(x) & ~(v)))
#define HW_ENET_MAC_EMRBR_TOG(x,v)    (HW_ENET_MAC_EMRBR_WR(x,HW_ENET_MAC_EMRBR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_EMRBR bitfields
 */
/* --- Register HW_ENET_MAC_EMRBR, field RSRVD0 */

#define BP_ENET_MAC_EMRBR_RSRVD0      11
#define BM_ENET_MAC_EMRBR_RSRVD0      0xFFFFF800

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_EMRBR_RSRVD0(v)   ((((reg32_t) v) << 11) & BM_ENET_MAC_EMRBR_RSRVD0)
#else
#define BF_ENET_MAC_EMRBR_RSRVD0(v)   (((v) << 11) & BM_ENET_MAC_EMRBR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_EMRBR, field R_BUF_SIZE */

#define BP_ENET_MAC_EMRBR_R_BUF_SIZE      4
#define BM_ENET_MAC_EMRBR_R_BUF_SIZE      0x000007F0

#define BF_ENET_MAC_EMRBR_R_BUF_SIZE(v)   (((v) << 4) & BM_ENET_MAC_EMRBR_R_BUF_SIZE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_EMRBR_R_BUF_SIZE(n,v)   BF_CS1n(ENET_MAC_EMRBR, n,R_BUF_SIZE,v)
#endif

/* --- Register HW_ENET_MAC_EMRBR, field RSRVD1 */

#define BP_ENET_MAC_EMRBR_RSRVD1      0
#define BM_ENET_MAC_EMRBR_RSRVD1      0x0000000F

#define BF_ENET_MAC_EMRBR_RSRVD1(v)   (((v) << 0) & BM_ENET_MAC_EMRBR_RSRVD1)


/*
 * HW_ENET_MAC_RX_SECTION_FULL - ENET MAC Receive FIFO Section Full Threshold Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RX_SECTION_FULL  :  8;
        unsigned RSRVD0           : 24;
    } B;
} hw_enet_mac_rx_section_full_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RX_SECTION_FULL register
 */
#define HW_ENET_MAC_RX_SECTION_FULL_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000190)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RX_SECTION_FULL(x)           (*(volatile hw_enet_mac_rx_section_full_t *) HW_ENET_MAC_RX_SECTION_FULL_ADDR(x))
#define HW_ENET_MAC_RX_SECTION_FULL_RD(x)      (HW_ENET_MAC_RX_SECTION_FULL(x).U)
#define HW_ENET_MAC_RX_SECTION_FULL_WR(x,v)     (HW_ENET_MAC_RX_SECTION_FULL(x).U = (v))
#define HW_ENET_MAC_RX_SECTION_FULL_SET(x,v)    (HW_ENET_MAC_RX_SECTION_FULL_WR(x,HW_ENET_MAC_RX_SECTION_FULL_RD(x) |  (v)))
#define HW_ENET_MAC_RX_SECTION_FULL_CLR(x,v)    (HW_ENET_MAC_RX_SECTION_FULL_WR(x,HW_ENET_MAC_RX_SECTION_FULL_RD(x) & ~(v)))
#define HW_ENET_MAC_RX_SECTION_FULL_TOG(x,v)    (HW_ENET_MAC_RX_SECTION_FULL_WR(x,HW_ENET_MAC_RX_SECTION_FULL_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RX_SECTION_FULL bitfields
 */
/* --- Register HW_ENET_MAC_RX_SECTION_FULL, field RSRVD0 */

#define BP_ENET_MAC_RX_SECTION_FULL_RSRVD0      8
#define BM_ENET_MAC_RX_SECTION_FULL_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RX_SECTION_FULL_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_RX_SECTION_FULL_RSRVD0)
#else
#define BF_ENET_MAC_RX_SECTION_FULL_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_RX_SECTION_FULL_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_RX_SECTION_FULL, field RX_SECTION_FULL */

#define BP_ENET_MAC_RX_SECTION_FULL_RX_SECTION_FULL      0
#define BM_ENET_MAC_RX_SECTION_FULL_RX_SECTION_FULL      0x000000FF

#define BF_ENET_MAC_RX_SECTION_FULL_RX_SECTION_FULL(v)   (((v) << 0) & BM_ENET_MAC_RX_SECTION_FULL_RX_SECTION_FULL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RX_SECTION_FULL_RX_SECTION_FULL(x,v)   (HW_ENET_MAC_RX_SECTION_FULL.B.RX_SECTION_FULL = (v))
#endif



/*
 * HW_ENET_MAC_RX_SECTION_EMPTY - ENET MAC Receive FIFO Section Empty Threshold Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RX_SECTION_EMPTY  :  8;
        unsigned RSRVD0            : 24;
    } B;
} hw_enet_mac_rx_section_empty_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RX_SECTION_EMPTY register
 */
#define HW_ENET_MAC_RX_SECTION_EMPTY_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000194)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RX_SECTION_EMPTY(x)           (*(volatile hw_enet_mac_rx_section_empty_t *) HW_ENET_MAC_RX_SECTION_EMPTY_ADDR(x))
#define HW_ENET_MAC_RX_SECTION_EMPTY_RD(x)      (HW_ENET_MAC_RX_SECTION_EMPTY(x).U)
#define HW_ENET_MAC_RX_SECTION_EMPTY_WR(x,v)     (HW_ENET_MAC_RX_SECTION_EMPTY(x).U = (v))
#define HW_ENET_MAC_RX_SECTION_EMPTY_SET(x,v)    (HW_ENET_MAC_RX_SECTION_EMPTY_WR(x,HW_ENET_MAC_RX_SECTION_EMPTY_RD(x) |  (v)))
#define HW_ENET_MAC_RX_SECTION_EMPTY_CLR(x,v)    (HW_ENET_MAC_RX_SECTION_EMPTY_WR(x,HW_ENET_MAC_RX_SECTION_EMPTY_RD(x) & ~(v)))
#define HW_ENET_MAC_RX_SECTION_EMPTY_TOG(x,v)    (HW_ENET_MAC_RX_SECTION_EMPTY_WR(x,HW_ENET_MAC_RX_SECTION_EMPTY_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RX_SECTION_EMPTY bitfields
 */
/* --- Register HW_ENET_MAC_RX_SECTION_EMPTY, field RSRVD0 */

#define BP_ENET_MAC_RX_SECTION_EMPTY_RSRVD0      8
#define BM_ENET_MAC_RX_SECTION_EMPTY_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RX_SECTION_EMPTY_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_RX_SECTION_EMPTY_RSRVD0)
#else
#define BF_ENET_MAC_RX_SECTION_EMPTY_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_RX_SECTION_EMPTY_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_RX_SECTION_EMPTY, field RX_SECTION_EMPTY */

#define BP_ENET_MAC_RX_SECTION_EMPTY_RX_SECTION_EMPTY      0
#define BM_ENET_MAC_RX_SECTION_EMPTY_RX_SECTION_EMPTY      0x000000FF

#define BF_ENET_MAC_RX_SECTION_EMPTY_RX_SECTION_EMPTY(v)   (((v) << 0) & BM_ENET_MAC_RX_SECTION_EMPTY_RX_SECTION_EMPTY)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RX_SECTION_EMPTY_RX_SECTION_EMPTY(x,v)   (HW_ENET_MAC_RX_SECTION_EMPTY.B.RX_SECTION_EMPTY = (v))
#endif



/*
 * HW_ENET_MAC_RX_ALMOST_EMPTY - ENET MAC Receive FIFO Almost Empty Threshold Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RX_ALMOST_EMPTY  :  8;
        unsigned RSRVD0           : 24;
    } B;
} hw_enet_mac_rx_almost_empty_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RX_ALMOST_EMPTY register
 */
#define HW_ENET_MAC_RX_ALMOST_EMPTY_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000198)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RX_ALMOST_EMPTY(x)           (*(volatile hw_enet_mac_rx_almost_empty_t *) HW_ENET_MAC_RX_ALMOST_EMPTY_ADDR(x))
#define HW_ENET_MAC_RX_ALMOST_EMPTY_RD(x)      (HW_ENET_MAC_RX_ALMOST_EMPTY(x).U)
#define HW_ENET_MAC_RX_ALMOST_EMPTY_WR(x,v)     (HW_ENET_MAC_RX_ALMOST_EMPTY(x).U = (v))
#define HW_ENET_MAC_RX_ALMOST_EMPTY_SET(x,v)    (HW_ENET_MAC_RX_ALMOST_EMPTY_WR(x,HW_ENET_MAC_RX_ALMOST_EMPTY_RD(x) |  (v)))
#define HW_ENET_MAC_RX_ALMOST_EMPTY_CLR(x,v)    (HW_ENET_MAC_RX_ALMOST_EMPTY_WR(x,HW_ENET_MAC_RX_ALMOST_EMPTY_RD(x) & ~(v)))
#define HW_ENET_MAC_RX_ALMOST_EMPTY_TOG(x,v)    (HW_ENET_MAC_RX_ALMOST_EMPTY_WR(x,HW_ENET_MAC_RX_ALMOST_EMPTY_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RX_ALMOST_EMPTY bitfields
 */
/* --- Register HW_ENET_MAC_RX_ALMOST_EMPTY, field RSRVD0 */

#define BP_ENET_MAC_RX_ALMOST_EMPTY_RSRVD0      8
#define BM_ENET_MAC_RX_ALMOST_EMPTY_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RX_ALMOST_EMPTY_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_RX_ALMOST_EMPTY_RSRVD0)
#else
#define BF_ENET_MAC_RX_ALMOST_EMPTY_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_RX_ALMOST_EMPTY_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_RX_ALMOST_EMPTY, field RX_ALMOST_EMPTY */

#define BP_ENET_MAC_RX_ALMOST_EMPTY_RX_ALMOST_EMPTY      0
#define BM_ENET_MAC_RX_ALMOST_EMPTY_RX_ALMOST_EMPTY      0x000000FF

#define BF_ENET_MAC_RX_ALMOST_EMPTY_RX_ALMOST_EMPTY(v)   (((v) << 0) & BM_ENET_MAC_RX_ALMOST_EMPTY_RX_ALMOST_EMPTY)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RX_ALMOST_EMPTY_RX_ALMOST_EMPTY(x,v)   (HW_ENET_MAC_RX_ALMOST_EMPTY.B.RX_ALMOST_EMPTY = (v))
#endif



/*
 * HW_ENET_MAC_RX_ALMOST_FULL - ENET MAC Receive FIFO Almost Full Thresholdt Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RX_ALMOST_FULL  :  8;
        unsigned RSRVD0          : 24;
    } B;
} hw_enet_mac_rx_almost_full_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RX_ALMOST_FULL register
 */
#define HW_ENET_MAC_RX_ALMOST_FULL_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000019c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RX_ALMOST_FULL(x)           (*(volatile hw_enet_mac_rx_almost_full_t *) HW_ENET_MAC_RX_ALMOST_FULL_ADDR(x))
#define HW_ENET_MAC_RX_ALMOST_FULL_RD(x)      (HW_ENET_MAC_RX_ALMOST_FULL(x).U)
#define HW_ENET_MAC_RX_ALMOST_FULL_WR(x,v)     (HW_ENET_MAC_RX_ALMOST_FULL(x).U = (v))
#define HW_ENET_MAC_RX_ALMOST_FULL_SET(x,v)    (HW_ENET_MAC_RX_ALMOST_FULL_WR(x,HW_ENET_MAC_RX_ALMOST_FULL_RD(x) |  (v)))
#define HW_ENET_MAC_RX_ALMOST_FULL_CLR(x,v)    (HW_ENET_MAC_RX_ALMOST_FULL_WR(x,HW_ENET_MAC_RX_ALMOST_FULL_RD(x) & ~(v)))
#define HW_ENET_MAC_RX_ALMOST_FULL_TOG(x,v)    (HW_ENET_MAC_RX_ALMOST_FULL_WR(x,HW_ENET_MAC_RX_ALMOST_FULL_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RX_ALMOST_FULL bitfields
 */
/* --- Register HW_ENET_MAC_RX_ALMOST_FULL, field RSRVD0 */

#define BP_ENET_MAC_RX_ALMOST_FULL_RSRVD0      8
#define BM_ENET_MAC_RX_ALMOST_FULL_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RX_ALMOST_FULL_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_RX_ALMOST_FULL_RSRVD0)
#else
#define BF_ENET_MAC_RX_ALMOST_FULL_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_RX_ALMOST_FULL_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_RX_ALMOST_FULL, field RX_ALMOST_FULL */

#define BP_ENET_MAC_RX_ALMOST_FULL_RX_ALMOST_FULL      0
#define BM_ENET_MAC_RX_ALMOST_FULL_RX_ALMOST_FULL      0x000000FF

#define BF_ENET_MAC_RX_ALMOST_FULL_RX_ALMOST_FULL(v)   (((v) << 0) & BM_ENET_MAC_RX_ALMOST_FULL_RX_ALMOST_FULL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_RX_ALMOST_FULL_RX_ALMOST_FULL(x,v)   (HW_ENET_MAC_RX_ALMOST_FULL.B.RX_ALMOST_FULL = (v))
#endif



/*
 * HW_ENET_MAC_TX_SECTION_EMPTY - ENET MAC Transmit FIFO Section Empty Threshold Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TX_SECTION_EMPTY  :  8;
        unsigned RSRVD0            : 24;
    } B;
} hw_enet_mac_tx_section_empty_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TX_SECTION_EMPTY register
 */
#define HW_ENET_MAC_TX_SECTION_EMPTY_ADDR(x)      (REGS_ENET_BASE(x) + 0x000001a0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TX_SECTION_EMPTY(x)           (*(volatile hw_enet_mac_tx_section_empty_t *) HW_ENET_MAC_TX_SECTION_EMPTY_ADDR(x))
#define HW_ENET_MAC_TX_SECTION_EMPTY_RD(x)      (HW_ENET_MAC_TX_SECTION_EMPTY(x).U)
#define HW_ENET_MAC_TX_SECTION_EMPTY_WR(x,v)     (HW_ENET_MAC_TX_SECTION_EMPTY(x).U = (v))
#define HW_ENET_MAC_TX_SECTION_EMPTY_SET(x,v)    (HW_ENET_MAC_TX_SECTION_EMPTY_WR(x,HW_ENET_MAC_TX_SECTION_EMPTY_RD(x) |  (v)))
#define HW_ENET_MAC_TX_SECTION_EMPTY_CLR(x,v)    (HW_ENET_MAC_TX_SECTION_EMPTY_WR(x,HW_ENET_MAC_TX_SECTION_EMPTY_RD(x) & ~(v)))
#define HW_ENET_MAC_TX_SECTION_EMPTY_TOG(x,v)    (HW_ENET_MAC_TX_SECTION_EMPTY_WR(x,HW_ENET_MAC_TX_SECTION_EMPTY_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TX_SECTION_EMPTY bitfields
 */
/* --- Register HW_ENET_MAC_TX_SECTION_EMPTY, field RSRVD0 */

#define BP_ENET_MAC_TX_SECTION_EMPTY_RSRVD0      8
#define BM_ENET_MAC_TX_SECTION_EMPTY_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TX_SECTION_EMPTY_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_TX_SECTION_EMPTY_RSRVD0)
#else
#define BF_ENET_MAC_TX_SECTION_EMPTY_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_TX_SECTION_EMPTY_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TX_SECTION_EMPTY, field TX_SECTION_EMPTY */

#define BP_ENET_MAC_TX_SECTION_EMPTY_TX_SECTION_EMPTY      0
#define BM_ENET_MAC_TX_SECTION_EMPTY_TX_SECTION_EMPTY      0x000000FF

#define BF_ENET_MAC_TX_SECTION_EMPTY_TX_SECTION_EMPTY(v)   (((v) << 0) & BM_ENET_MAC_TX_SECTION_EMPTY_TX_SECTION_EMPTY)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TX_SECTION_EMPTY_TX_SECTION_EMPTY(x,v)   (HW_ENET_MAC_TX_SECTION_EMPTY.B.TX_SECTION_EMPTY = (v))
#endif



/*
 * HW_ENET_MAC_TX_ALMOST_EMPTY - ENET MAC Transmit FIFO Almost Empty Threshold Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TX_ALMOST_EMPTY  :  8;
        unsigned RSRVD0           : 24;
    } B;
} hw_enet_mac_tx_almost_empty_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TX_ALMOST_EMPTY register
 */
#define HW_ENET_MAC_TX_ALMOST_EMPTY_ADDR(x)      (REGS_ENET_BASE(x) + 0x000001a4)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TX_ALMOST_EMPTY(x)           (*(volatile hw_enet_mac_tx_almost_empty_t *) HW_ENET_MAC_TX_ALMOST_EMPTY_ADDR(x))
#define HW_ENET_MAC_TX_ALMOST_EMPTY_RD(x)      (HW_ENET_MAC_TX_ALMOST_EMPTY(x).U)
#define HW_ENET_MAC_TX_ALMOST_EMPTY_WR(x,v)     (HW_ENET_MAC_TX_ALMOST_EMPTY(x).U = (v))
#define HW_ENET_MAC_TX_ALMOST_EMPTY_SET(x,v)    (HW_ENET_MAC_TX_ALMOST_EMPTY_WR(x,HW_ENET_MAC_TX_ALMOST_EMPTY_RD(x) |  (v)))
#define HW_ENET_MAC_TX_ALMOST_EMPTY_CLR(x,v)    (HW_ENET_MAC_TX_ALMOST_EMPTY_WR(x,HW_ENET_MAC_TX_ALMOST_EMPTY_RD(x) & ~(v)))
#define HW_ENET_MAC_TX_ALMOST_EMPTY_TOG(x,v)    (HW_ENET_MAC_TX_ALMOST_EMPTY_WR(x,HW_ENET_MAC_TX_ALMOST_EMPTY_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TX_ALMOST_EMPTY bitfields
 */
/* --- Register HW_ENET_MAC_TX_ALMOST_EMPTY, field RSRVD0 */

#define BP_ENET_MAC_TX_ALMOST_EMPTY_RSRVD0      8
#define BM_ENET_MAC_TX_ALMOST_EMPTY_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TX_ALMOST_EMPTY_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_TX_ALMOST_EMPTY_RSRVD0)
#else
#define BF_ENET_MAC_TX_ALMOST_EMPTY_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_TX_ALMOST_EMPTY_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TX_ALMOST_EMPTY, field TX_ALMOST_EMPTY */

#define BP_ENET_MAC_TX_ALMOST_EMPTY_TX_ALMOST_EMPTY      0
#define BM_ENET_MAC_TX_ALMOST_EMPTY_TX_ALMOST_EMPTY      0x000000FF

#define BF_ENET_MAC_TX_ALMOST_EMPTY_TX_ALMOST_EMPTY(v)   (((v) << 0) & BM_ENET_MAC_TX_ALMOST_EMPTY_TX_ALMOST_EMPTY)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TX_ALMOST_EMPTY_TX_ALMOST_EMPTY(x,v)   (HW_ENET_MAC_TX_ALMOST_EMPTY.B.TX_ALMOST_EMPTY = (v))
#endif



/*
 * HW_ENET_MAC_TX_ALMOST_FULL - ENET MAC Transmit FIFO Almost Full Threshold Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TX_ALMOST_FULL  :  8;
        unsigned RSRVD0          : 24;
    } B;
} hw_enet_mac_tx_almost_full_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TX_ALMOST_FULL register
 */
#define HW_ENET_MAC_TX_ALMOST_FULL_ADDR(x)      (REGS_ENET_BASE(x) + 0x000001a8)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TX_ALMOST_FULL(x)           (*(volatile hw_enet_mac_tx_almost_full_t *) HW_ENET_MAC_TX_ALMOST_FULL_ADDR(x))
#define HW_ENET_MAC_TX_ALMOST_FULL_RD(x)      (HW_ENET_MAC_TX_ALMOST_FULL(x).U)
#define HW_ENET_MAC_TX_ALMOST_FULL_WR(x,v)     (HW_ENET_MAC_TX_ALMOST_FULL(x).U = (v))
#define HW_ENET_MAC_TX_ALMOST_FULL_SET(x,v)    (HW_ENET_MAC_TX_ALMOST_FULL_WR(x,HW_ENET_MAC_TX_ALMOST_FULL_RD(x) |  (v)))
#define HW_ENET_MAC_TX_ALMOST_FULL_CLR(x,v)    (HW_ENET_MAC_TX_ALMOST_FULL_WR(x,HW_ENET_MAC_TX_ALMOST_FULL_RD(x) & ~(v)))
#define HW_ENET_MAC_TX_ALMOST_FULL_TOG(x,v)    (HW_ENET_MAC_TX_ALMOST_FULL_WR(x,HW_ENET_MAC_TX_ALMOST_FULL_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TX_ALMOST_FULL bitfields
 */
/* --- Register HW_ENET_MAC_TX_ALMOST_FULL, field RSRVD0 */

#define BP_ENET_MAC_TX_ALMOST_FULL_RSRVD0      8
#define BM_ENET_MAC_TX_ALMOST_FULL_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TX_ALMOST_FULL_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_TX_ALMOST_FULL_RSRVD0)
#else
#define BF_ENET_MAC_TX_ALMOST_FULL_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_TX_ALMOST_FULL_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TX_ALMOST_FULL, field TX_ALMOST_FULL */

#define BP_ENET_MAC_TX_ALMOST_FULL_TX_ALMOST_FULL      0
#define BM_ENET_MAC_TX_ALMOST_FULL_TX_ALMOST_FULL      0x000000FF

#define BF_ENET_MAC_TX_ALMOST_FULL_TX_ALMOST_FULL(v)   (((v) << 0) & BM_ENET_MAC_TX_ALMOST_FULL_TX_ALMOST_FULL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TX_ALMOST_FULL_TX_ALMOST_FULL(x,v)   (HW_ENET_MAC_TX_ALMOST_FULL.B.TX_ALMOST_FULL = (v))
#endif



/*
 * HW_ENET_MAC_TX_IPG_LENGTH - ENET MAC Transmit Inter-Packet Gap Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TX_IPG_LENGTH  :  5;
        unsigned RSRVD0         : 27;
    } B;
} hw_enet_mac_tx_ipg_length_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TX_IPG_LENGTH register
 */
#define HW_ENET_MAC_TX_IPG_LENGTH_ADDR(x)      (REGS_ENET_BASE(x) + 0x000001ac)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TX_IPG_LENGTH(x)           (*(volatile hw_enet_mac_tx_ipg_length_t *) HW_ENET_MAC_TX_IPG_LENGTH_ADDR(x))
#define HW_ENET_MAC_TX_IPG_LENGTH_RD(x)      (HW_ENET_MAC_TX_IPG_LENGTH(x).U)
#define HW_ENET_MAC_TX_IPG_LENGTH_WR(x,v)     (HW_ENET_MAC_TX_IPG_LENGTH(x).U = (v))
#define HW_ENET_MAC_TX_IPG_LENGTH_SET(x,v)    (HW_ENET_MAC_TX_IPG_LENGTH_WR(x,HW_ENET_MAC_TX_IPG_LENGTH_RD(x) |  (v)))
#define HW_ENET_MAC_TX_IPG_LENGTH_CLR(x,v)    (HW_ENET_MAC_TX_IPG_LENGTH_WR(x,HW_ENET_MAC_TX_IPG_LENGTH_RD(x) & ~(v)))
#define HW_ENET_MAC_TX_IPG_LENGTH_TOG(x,v)    (HW_ENET_MAC_TX_IPG_LENGTH_WR(x,HW_ENET_MAC_TX_IPG_LENGTH_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TX_IPG_LENGTH bitfields
 */
/* --- Register HW_ENET_MAC_TX_IPG_LENGTH, field RSRVD0 */

#define BP_ENET_MAC_TX_IPG_LENGTH_RSRVD0      5
#define BM_ENET_MAC_TX_IPG_LENGTH_RSRVD0      0xFFFFFFE0

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TX_IPG_LENGTH_RSRVD0(v)   ((((reg32_t) v) << 5) & BM_ENET_MAC_TX_IPG_LENGTH_RSRVD0)
#else
#define BF_ENET_MAC_TX_IPG_LENGTH_RSRVD0(v)   (((v) << 5) & BM_ENET_MAC_TX_IPG_LENGTH_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TX_IPG_LENGTH, field TX_IPG_LENGTH */

#define BP_ENET_MAC_TX_IPG_LENGTH_TX_IPG_LENGTH      0
#define BM_ENET_MAC_TX_IPG_LENGTH_TX_IPG_LENGTH      0x0000001F

#define BF_ENET_MAC_TX_IPG_LENGTH_TX_IPG_LENGTH(v)   (((v) << 0) & BM_ENET_MAC_TX_IPG_LENGTH_TX_IPG_LENGTH)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TX_IPG_LENGTH_TX_IPG_LENGTH(n,v)   BF_CS1n(ENET_MAC_TX_IPG_LENGTH, n,TX_IPG_LENGTH,v)
#endif



/*
 * HW_ENET_MAC_TRUNC_FL - ENET MAC Frame Truncation Length Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TRUNC_FL  : 14;
        unsigned RSRVD0    : 18;
    } B;
} hw_enet_mac_trunc_fl_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TRUNC_FL register
 */
#define HW_ENET_MAC_TRUNC_FL_ADDR(x)      (REGS_ENET_BASE(x) + 0x000001b0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TRUNC_FL(x)           (*(volatile hw_enet_mac_trunc_fl_t *) HW_ENET_MAC_TRUNC_FL_ADDR(x))
#define HW_ENET_MAC_TRUNC_FL_RD(x)      (HW_ENET_MAC_TRUNC_FL(x).U)
#define HW_ENET_MAC_TRUNC_FL_WR(x,v)     (HW_ENET_MAC_TRUNC_FL(x).U = (v))
#define HW_ENET_MAC_TRUNC_FL_SET(x,v)    (HW_ENET_MAC_TRUNC_FL_WR(x,HW_ENET_MAC_TRUNC_FL_RD(x) |  (v)))
#define HW_ENET_MAC_TRUNC_FL_CLR(x,v)    (HW_ENET_MAC_TRUNC_FL_WR(x,HW_ENET_MAC_TRUNC_FL_RD(x) & ~(v)))
#define HW_ENET_MAC_TRUNC_FL_TOG(x,v)    (HW_ENET_MAC_TRUNC_FL_WR(x,HW_ENET_MAC_TRUNC_FL_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TRUNC_FL bitfields
 */
/* --- Register HW_ENET_MAC_TRUNC_FL, field RSRVD0 */

#define BP_ENET_MAC_TRUNC_FL_RSRVD0      14
#define BM_ENET_MAC_TRUNC_FL_RSRVD0      0xFFFFC000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TRUNC_FL_RSRVD0(v)   ((((reg32_t) v) << 14) & BM_ENET_MAC_TRUNC_FL_RSRVD0)
#else
#define BF_ENET_MAC_TRUNC_FL_RSRVD0(v)   (((v) << 14) & BM_ENET_MAC_TRUNC_FL_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_TRUNC_FL, field TRUNC_FL */

#define BP_ENET_MAC_TRUNC_FL_TRUNC_FL      0
#define BM_ENET_MAC_TRUNC_FL_TRUNC_FL      0x00003FFF

#define BF_ENET_MAC_TRUNC_FL_TRUNC_FL(v)   (((v) << 0) & BM_ENET_MAC_TRUNC_FL_TRUNC_FL)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_TRUNC_FL_TRUNC_FL(n,v)   BF_CS1n(ENET_MAC_TRUNC_FL, n,TRUNC_FL,v)
#endif



/*
 * HW_ENET_MAC_IPACCTXCONF - ENET MAC Accelerator Transmit Function Configuration Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SHIFT16         :  1;
        unsigned RSRVD1          :  2;
        unsigned TX_IPCHK_INS    :  1;
        unsigned TX_PROTCHK_INS  :  1;
        unsigned RSRVD0          : 27;
    } B;
} hw_enet_mac_ipacctxconf_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IPACCTXCONF register
 */
#define HW_ENET_MAC_IPACCTXCONF_ADDR(x)      (REGS_ENET_BASE(x) + 0x000001c0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IPACCTXCONF(x)           (*(volatile hw_enet_mac_ipacctxconf_t *) HW_ENET_MAC_IPACCTXCONF_ADDR(x))
#define HW_ENET_MAC_IPACCTXCONF_RD(x)      (HW_ENET_MAC_IPACCTXCONF(x).U)
#define HW_ENET_MAC_IPACCTXCONF_WR(x,v)     (HW_ENET_MAC_IPACCTXCONF(x).U = (v))
#define HW_ENET_MAC_IPACCTXCONF_SET(x,v)    (HW_ENET_MAC_IPACCTXCONF_WR(x,HW_ENET_MAC_IPACCTXCONF_RD(x) |  (v)))
#define HW_ENET_MAC_IPACCTXCONF_CLR(x,v)    (HW_ENET_MAC_IPACCTXCONF_WR(x,HW_ENET_MAC_IPACCTXCONF_RD(x) & ~(v)))
#define HW_ENET_MAC_IPACCTXCONF_TOG(x,v)    (HW_ENET_MAC_IPACCTXCONF_WR(x,HW_ENET_MAC_IPACCTXCONF_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IPACCTXCONF bitfields
 */
/* --- Register HW_ENET_MAC_IPACCTXCONF, field RSRVD0 */

#define BP_ENET_MAC_IPACCTXCONF_RSRVD0      5
#define BM_ENET_MAC_IPACCTXCONF_RSRVD0      0xFFFFFFE0

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IPACCTXCONF_RSRVD0(v)   ((((reg32_t) v) << 5) & BM_ENET_MAC_IPACCTXCONF_RSRVD0)
#else
#define BF_ENET_MAC_IPACCTXCONF_RSRVD0(v)   (((v) << 5) & BM_ENET_MAC_IPACCTXCONF_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_IPACCTXCONF, field TX_PROTCHK_INS */

#define BP_ENET_MAC_IPACCTXCONF_TX_PROTCHK_INS      4
#define BM_ENET_MAC_IPACCTXCONF_TX_PROTCHK_INS      0x00000010

#define BF_ENET_MAC_IPACCTXCONF_TX_PROTCHK_INS(v)   (((v) << 4) & BM_ENET_MAC_IPACCTXCONF_TX_PROTCHK_INS)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCTXCONF_TX_PROTCHK_INS(n,v)   BF_CS1n(ENET_MAC_IPACCTXCONF, n,TX_PROTCHK_INS,v)
#endif

/* --- Register HW_ENET_MAC_IPACCTXCONF, field TX_IPCHK_INS */

#define BP_ENET_MAC_IPACCTXCONF_TX_IPCHK_INS      3
#define BM_ENET_MAC_IPACCTXCONF_TX_IPCHK_INS      0x00000008

#define BF_ENET_MAC_IPACCTXCONF_TX_IPCHK_INS(v)   (((v) << 3) & BM_ENET_MAC_IPACCTXCONF_TX_IPCHK_INS)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCTXCONF_TX_IPCHK_INS(n,v)   BF_CS1n(ENET_MAC_IPACCTXCONF, n,TX_IPCHK_INS,v)
#endif

/* --- Register HW_ENET_MAC_IPACCTXCONF, field RSRVD1 */

#define BP_ENET_MAC_IPACCTXCONF_RSRVD1      1
#define BM_ENET_MAC_IPACCTXCONF_RSRVD1      0x00000006

#define BF_ENET_MAC_IPACCTXCONF_RSRVD1(v)   (((v) << 1) & BM_ENET_MAC_IPACCTXCONF_RSRVD1)
/* --- Register HW_ENET_MAC_IPACCTXCONF, field SHIFT16 */

#define BP_ENET_MAC_IPACCTXCONF_SHIFT16      0
#define BM_ENET_MAC_IPACCTXCONF_SHIFT16      0x00000001

#define BF_ENET_MAC_IPACCTXCONF_SHIFT16(v)   (((v) << 0) & BM_ENET_MAC_IPACCTXCONF_SHIFT16)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCTXCONF_SHIFT16(n,v)   BF_CS1n(ENET_MAC_IPACCTXCONF, n,SHIFT16,v)
#endif



/*
 * HW_ENET_MAC_IPACCRXCONF - ENET MAC Accelerator Receive Function Configuration Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RX_IP_PAD_REMOVE    :  1;
        unsigned RX_IPERR_DISCARD    :  1;
        unsigned RX_PROTERR_DISCARD  :  1;
        unsigned RSRVD1              :  3;
        unsigned RX_LINEERR_DISC     :  1;
        unsigned SHIFT16             :  1;
        unsigned RSRVD0              : 24;
    } B;
} hw_enet_mac_ipaccrxconf_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IPACCRXCONF register
 */
#define HW_ENET_MAC_IPACCRXCONF_ADDR(x)      (REGS_ENET_BASE(x) + 0x000001c4)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IPACCRXCONF(x)           (*(volatile hw_enet_mac_ipaccrxconf_t *) HW_ENET_MAC_IPACCRXCONF_ADDR(x))
#define HW_ENET_MAC_IPACCRXCONF_RD(x)      (HW_ENET_MAC_IPACCRXCONF(x).U)
#define HW_ENET_MAC_IPACCRXCONF_WR(x,v)     (HW_ENET_MAC_IPACCRXCONF(x).U = (v))
#define HW_ENET_MAC_IPACCRXCONF_SET(x,v)    (HW_ENET_MAC_IPACCRXCONF_WR(x,HW_ENET_MAC_IPACCRXCONF_RD(x) |  (v)))
#define HW_ENET_MAC_IPACCRXCONF_CLR(x,v)    (HW_ENET_MAC_IPACCRXCONF_WR(x,HW_ENET_MAC_IPACCRXCONF_RD(x) & ~(v)))
#define HW_ENET_MAC_IPACCRXCONF_TOG(x,v)    (HW_ENET_MAC_IPACCRXCONF_WR(x,HW_ENET_MAC_IPACCRXCONF_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IPACCRXCONF bitfields
 */
/* --- Register HW_ENET_MAC_IPACCRXCONF, field RSRVD0 */

#define BP_ENET_MAC_IPACCRXCONF_RSRVD0      8
#define BM_ENET_MAC_IPACCRXCONF_RSRVD0      0xFFFFFF00

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IPACCRXCONF_RSRVD0(v)   ((((reg32_t) v) << 8) & BM_ENET_MAC_IPACCRXCONF_RSRVD0)
#else
#define BF_ENET_MAC_IPACCRXCONF_RSRVD0(v)   (((v) << 8) & BM_ENET_MAC_IPACCRXCONF_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_IPACCRXCONF, field SHIFT16 */

#define BP_ENET_MAC_IPACCRXCONF_SHIFT16      7
#define BM_ENET_MAC_IPACCRXCONF_SHIFT16      0x00000080

#define BF_ENET_MAC_IPACCRXCONF_SHIFT16(v)   (((v) << 7) & BM_ENET_MAC_IPACCRXCONF_SHIFT16)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCRXCONF_SHIFT16(n,v)   BF_CS1n(ENET_MAC_IPACCRXCONF, n,SHIFT16,v)
#endif

/* --- Register HW_ENET_MAC_IPACCRXCONF, field RX_LINEERR_DISC */

#define BP_ENET_MAC_IPACCRXCONF_RX_LINEERR_DISC      6
#define BM_ENET_MAC_IPACCRXCONF_RX_LINEERR_DISC      0x00000040

#define BF_ENET_MAC_IPACCRXCONF_RX_LINEERR_DISC(v)   (((v) << 6) & BM_ENET_MAC_IPACCRXCONF_RX_LINEERR_DISC)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCRXCONF_RX_LINEERR_DISC(n,v)   BF_CS1n(ENET_MAC_IPACCRXCONF, n,RX_LINEERR_DISC,v)
#endif

/* --- Register HW_ENET_MAC_IPACCRXCONF, field RSRVD1 */

#define BP_ENET_MAC_IPACCRXCONF_RSRVD1      3
#define BM_ENET_MAC_IPACCRXCONF_RSRVD1      0x00000038

#define BF_ENET_MAC_IPACCRXCONF_RSRVD1(v)   (((v) << 3) & BM_ENET_MAC_IPACCRXCONF_RSRVD1)
/* --- Register HW_ENET_MAC_IPACCRXCONF, field RX_PROTERR_DISCARD */

#define BP_ENET_MAC_IPACCRXCONF_RX_PROTERR_DISCARD      2
#define BM_ENET_MAC_IPACCRXCONF_RX_PROTERR_DISCARD      0x00000004

#define BF_ENET_MAC_IPACCRXCONF_RX_PROTERR_DISCARD(v)   (((v) << 2) & BM_ENET_MAC_IPACCRXCONF_RX_PROTERR_DISCARD)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCRXCONF_RX_PROTERR_DISCARD(n,v)   BF_CS1n(ENET_MAC_IPACCRXCONF, n,RX_PROTERR_DISCARD,v)
#endif

/* --- Register HW_ENET_MAC_IPACCRXCONF, field RX_IPERR_DISCARD */

#define BP_ENET_MAC_IPACCRXCONF_RX_IPERR_DISCARD      1
#define BM_ENET_MAC_IPACCRXCONF_RX_IPERR_DISCARD      0x00000002

#define BF_ENET_MAC_IPACCRXCONF_RX_IPERR_DISCARD(v)   (((v) << 1) & BM_ENET_MAC_IPACCRXCONF_RX_IPERR_DISCARD)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCRXCONF_RX_IPERR_DISCARD(n,v)   BF_CS1n(ENET_MAC_IPACCRXCONF, n,RX_IPERR_DISCARD,v)
#endif

/* --- Register HW_ENET_MAC_IPACCRXCONF, field RX_IP_PAD_REMOVE */

#define BP_ENET_MAC_IPACCRXCONF_RX_IP_PAD_REMOVE      0
#define BM_ENET_MAC_IPACCRXCONF_RX_IP_PAD_REMOVE      0x00000001

#define BF_ENET_MAC_IPACCRXCONF_RX_IP_PAD_REMOVE(v)   (((v) << 0) & BM_ENET_MAC_IPACCRXCONF_RX_IP_PAD_REMOVE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_IPACCRXCONF_RX_IP_PAD_REMOVE(n,v)   BF_CS1n(ENET_MAC_IPACCRXCONF, n,RX_IP_PAD_REMOVE,v)
#endif



/*
 * HW_ENET_MAC_RMON_T_DROP - ENET MAC RMON Tx packet drop
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_DROP  : 32;
    } B;
} hw_enet_mac_rmon_t_drop_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_DROP register
 */
#define HW_ENET_MAC_RMON_T_DROP_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000200)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_DROP(x)           (*(volatile hw_enet_mac_rmon_t_drop_t *) HW_ENET_MAC_RMON_T_DROP_ADDR(x))
#define HW_ENET_MAC_RMON_T_DROP_RD(x)      (HW_ENET_MAC_RMON_T_DROP(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_DROP bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_DROP, field RMON_T_DROP */

#define BP_ENET_MAC_RMON_T_DROP_RMON_T_DROP      0
#define BM_ENET_MAC_RMON_T_DROP_RMON_T_DROP      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_DROP_RMON_T_DROP(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_DROP_RMON_T_DROP(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_PACKETS - ENET MAC RMON Tx packet count
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_PACKETS  : 32;
    } B;
} hw_enet_mac_rmon_t_packets_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_PACKETS register
 */
#define HW_ENET_MAC_RMON_T_PACKETS_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000204)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_PACKETS(x)           (*(volatile hw_enet_mac_rmon_t_packets_t *) HW_ENET_MAC_RMON_T_PACKETS_ADDR(x))
#define HW_ENET_MAC_RMON_T_PACKETS_RD(x)      (HW_ENET_MAC_RMON_T_PACKETS(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_PACKETS bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_PACKETS, field RMON_T_PACKETS */

#define BP_ENET_MAC_RMON_T_PACKETS_RMON_T_PACKETS      0
#define BM_ENET_MAC_RMON_T_PACKETS_RMON_T_PACKETS      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_PACKETS_RMON_T_PACKETS(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_PACKETS_RMON_T_PACKETS(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_BC_PKT - ENET MAC RMON Tx Broadcast Packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_BC_PKT  : 32;
    } B;
} hw_enet_mac_rmon_t_bc_pkt_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_BC_PKT register
 */
#define HW_ENET_MAC_RMON_T_BC_PKT_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000208)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_BC_PKT(x)           (*(volatile hw_enet_mac_rmon_t_bc_pkt_t *) HW_ENET_MAC_RMON_T_BC_PKT_ADDR(x))
#define HW_ENET_MAC_RMON_T_BC_PKT_RD(x)      (HW_ENET_MAC_RMON_T_BC_PKT(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_BC_PKT bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_BC_PKT, field RMON_T_BC_PKT */

#define BP_ENET_MAC_RMON_T_BC_PKT_RMON_T_BC_PKT      0
#define BM_ENET_MAC_RMON_T_BC_PKT_RMON_T_BC_PKT      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_BC_PKT_RMON_T_BC_PKT(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_BC_PKT_RMON_T_BC_PKT(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_MC_PKT - ENET MAC RMON Tx Multicast Packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_MC_PKT  : 32;
    } B;
} hw_enet_mac_rmon_t_mc_pkt_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_MC_PKT register
 */
#define HW_ENET_MAC_RMON_T_MC_PKT_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000020c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_MC_PKT(x)           (*(volatile hw_enet_mac_rmon_t_mc_pkt_t *) HW_ENET_MAC_RMON_T_MC_PKT_ADDR(x))
#define HW_ENET_MAC_RMON_T_MC_PKT_RD(x)      (HW_ENET_MAC_RMON_T_MC_PKT(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_MC_PKT bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_MC_PKT, field RMON_T_MC_PKT */

#define BP_ENET_MAC_RMON_T_MC_PKT_RMON_T_MC_PKT      0
#define BM_ENET_MAC_RMON_T_MC_PKT_RMON_T_MC_PKT      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_MC_PKT_RMON_T_MC_PKT(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_MC_PKT_RMON_T_MC_PKT(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_CRC_ALIGN - ENET MAC RMON Tx Packets w CRC/Align error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_CRC_ALIGN  : 32;
    } B;
} hw_enet_mac_rmon_t_crc_align_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_CRC_ALIGN register
 */
#define HW_ENET_MAC_RMON_T_CRC_ALIGN_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000210)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_CRC_ALIGN(x)           (*(volatile hw_enet_mac_rmon_t_crc_align_t *) HW_ENET_MAC_RMON_T_CRC_ALIGN_ADDR(x))
#define HW_ENET_MAC_RMON_T_CRC_ALIGN_RD(x)      (HW_ENET_MAC_RMON_T_CRC_ALIGN(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_CRC_ALIGN bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_CRC_ALIGN, field RMON_T_CRC_ALIGN */

#define BP_ENET_MAC_RMON_T_CRC_ALIGN_RMON_T_CRC_ALIGN      0
#define BM_ENET_MAC_RMON_T_CRC_ALIGN_RMON_T_CRC_ALIGN      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_CRC_ALIGN_RMON_T_CRC_ALIGN(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_CRC_ALIGN_RMON_T_CRC_ALIGN(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_UNDERSIZE - ENET MAC RMON Tx Packets < 64 bytes, n,good CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_UNDERSIZE  : 32;
    } B;
} hw_enet_mac_rmon_t_undersize_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_UNDERSIZE register
 */
#define HW_ENET_MAC_RMON_T_UNDERSIZE_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000214)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_UNDERSIZE(x)           (*(volatile hw_enet_mac_rmon_t_undersize_t *) HW_ENET_MAC_RMON_T_UNDERSIZE_ADDR(x))
#define HW_ENET_MAC_RMON_T_UNDERSIZE_RD(x)      (HW_ENET_MAC_RMON_T_UNDERSIZE(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_UNDERSIZE bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_UNDERSIZE, field RMON_T_UNDERSIZE */

#define BP_ENET_MAC_RMON_T_UNDERSIZE_RMON_T_UNDERSIZE      0
#define BM_ENET_MAC_RMON_T_UNDERSIZE_RMON_T_UNDERSIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_UNDERSIZE_RMON_T_UNDERSIZE(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_UNDERSIZE_RMON_T_UNDERSIZE(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_OVERSIZE - ENET MAC RMON Tx Packets > MAX_FL bytes, n,good CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_OVERSIZE  : 32;
    } B;
} hw_enet_mac_rmon_t_oversize_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_OVERSIZE register
 */
#define HW_ENET_MAC_RMON_T_OVERSIZE_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000218)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_OVERSIZE(x)           (*(volatile hw_enet_mac_rmon_t_oversize_t *) HW_ENET_MAC_RMON_T_OVERSIZE_ADDR(x))
#define HW_ENET_MAC_RMON_T_OVERSIZE_RD(x)      (HW_ENET_MAC_RMON_T_OVERSIZE(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_OVERSIZE bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_OVERSIZE, field RMON_T_OVERSIZE */

#define BP_ENET_MAC_RMON_T_OVERSIZE_RMON_T_OVERSIZE      0
#define BM_ENET_MAC_RMON_T_OVERSIZE_RMON_T_OVERSIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_OVERSIZE_RMON_T_OVERSIZE(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_OVERSIZE_RMON_T_OVERSIZE(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_FRAG - ENET MAC RMON Tx Packets < 64 bytes, n,bad CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_FRAG  : 32;
    } B;
} hw_enet_mac_rmon_t_frag_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_FRAG register
 */
#define HW_ENET_MAC_RMON_T_FRAG_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000021c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_FRAG(x)           (*(volatile hw_enet_mac_rmon_t_frag_t *) HW_ENET_MAC_RMON_T_FRAG_ADDR(x))
#define HW_ENET_MAC_RMON_T_FRAG_RD(x)      (HW_ENET_MAC_RMON_T_FRAG(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_FRAG bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_FRAG, field RMON_T_FRAG */

#define BP_ENET_MAC_RMON_T_FRAG_RMON_T_FRAG      0
#define BM_ENET_MAC_RMON_T_FRAG_RMON_T_FRAG      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_FRAG_RMON_T_FRAG(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_FRAG_RMON_T_FRAG(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_JAB - ENET MAC RMON Tx Packets > MAX_FL bytes, n,bad CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_JAB  : 32;
    } B;
} hw_enet_mac_rmon_t_jab_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_JAB register
 */
#define HW_ENET_MAC_RMON_T_JAB_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000220)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_JAB(x)           (*(volatile hw_enet_mac_rmon_t_jab_t *) HW_ENET_MAC_RMON_T_JAB_ADDR(x))
#define HW_ENET_MAC_RMON_T_JAB_RD(x)      (HW_ENET_MAC_RMON_T_JAB(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_JAB bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_JAB, field RMON_T_JAB */

#define BP_ENET_MAC_RMON_T_JAB_RMON_T_JAB      0
#define BM_ENET_MAC_RMON_T_JAB_RMON_T_JAB      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_JAB_RMON_T_JAB(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_JAB_RMON_T_JAB(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_COL - ENET MAC RMON Tx collision count
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_COL  : 32;
    } B;
} hw_enet_mac_rmon_t_col_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_COL register
 */
#define HW_ENET_MAC_RMON_T_COL_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000224)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_COL(x)           (*(volatile hw_enet_mac_rmon_t_col_t *) HW_ENET_MAC_RMON_T_COL_ADDR(x))
#define HW_ENET_MAC_RMON_T_COL_RD(x)      (HW_ENET_MAC_RMON_T_COL(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_COL bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_COL, field RMON_T_COL */

#define BP_ENET_MAC_RMON_T_COL_RMON_T_COL      0
#define BM_ENET_MAC_RMON_T_COL_RMON_T_COL      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_COL_RMON_T_COL(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_COL_RMON_T_COL(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_P64 - ENET MAC RMON Tx 64 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_P64  : 32;
    } B;
} hw_enet_mac_rmon_t_p64_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_P64 register
 */
#define HW_ENET_MAC_RMON_T_P64_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000228)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_P64(x)           (*(volatile hw_enet_mac_rmon_t_p64_t *) HW_ENET_MAC_RMON_T_P64_ADDR(x))
#define HW_ENET_MAC_RMON_T_P64_RD(x)      (HW_ENET_MAC_RMON_T_P64(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_P64 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_P64, field RMON_T_P64 */

#define BP_ENET_MAC_RMON_T_P64_RMON_T_P64      0
#define BM_ENET_MAC_RMON_T_P64_RMON_T_P64      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_P64_RMON_T_P64(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_P64_RMON_T_P64(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_P65TO127N - ENET MAC RMON Tx 65 to 127 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_P65TO127N  : 32;
    } B;
} hw_enet_mac_rmon_t_p65to127n_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_P65TO127N register
 */
#define HW_ENET_MAC_RMON_T_P65TO127N_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000022c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_P65TO127N(x)           (*(volatile hw_enet_mac_rmon_t_p65to127n_t *) HW_ENET_MAC_RMON_T_P65TO127N_ADDR(x))
#define HW_ENET_MAC_RMON_T_P65TO127N_RD(x)      (HW_ENET_MAC_RMON_T_P65TO127N(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_P65TO127N bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_P65TO127N, field RMON_T_P65TO127N */

#define BP_ENET_MAC_RMON_T_P65TO127N_RMON_T_P65TO127N      0
#define BM_ENET_MAC_RMON_T_P65TO127N_RMON_T_P65TO127N      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_P65TO127N_RMON_T_P65TO127N(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_P65TO127N_RMON_T_P65TO127N(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_P128TO255N - ENET MAC RMON Tx 128 to 255 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_P128TO255N  : 32;
    } B;
} hw_enet_mac_rmon_t_p128to255n_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_P128TO255N register
 */
#define HW_ENET_MAC_RMON_T_P128TO255N_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000230)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_P128TO255N(x)           (*(volatile hw_enet_mac_rmon_t_p128to255n_t *) HW_ENET_MAC_RMON_T_P128TO255N_ADDR(x))
#define HW_ENET_MAC_RMON_T_P128TO255N_RD(x)      (HW_ENET_MAC_RMON_T_P128TO255N(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_P128TO255N bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_P128TO255N, field RMON_T_P128TO255N */

#define BP_ENET_MAC_RMON_T_P128TO255N_RMON_T_P128TO255N      0
#define BM_ENET_MAC_RMON_T_P128TO255N_RMON_T_P128TO255N      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_P128TO255N_RMON_T_P128TO255N(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_P128TO255N_RMON_T_P128TO255N(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_P256TO511 - ENET MAC RMON Tx 256 to 511 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_P256TO511  : 32;
    } B;
} hw_enet_mac_rmon_t_p256to511_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_P256TO511 register
 */
#define HW_ENET_MAC_RMON_T_P256TO511_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000234)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_P256TO511(x)           (*(volatile hw_enet_mac_rmon_t_p256to511_t *) HW_ENET_MAC_RMON_T_P256TO511_ADDR(x))
#define HW_ENET_MAC_RMON_T_P256TO511_RD(x)      (HW_ENET_MAC_RMON_T_P256TO511(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_P256TO511 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_P256TO511, field RMON_T_P256TO511 */

#define BP_ENET_MAC_RMON_T_P256TO511_RMON_T_P256TO511      0
#define BM_ENET_MAC_RMON_T_P256TO511_RMON_T_P256TO511      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_P256TO511_RMON_T_P256TO511(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_P256TO511_RMON_T_P256TO511(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_P512TO1023 - ENET MAC RMON Tx 512 to 1023 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_P512TO1023  : 32;
    } B;
} hw_enet_mac_rmon_t_p512to1023_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_P512TO1023 register
 */
#define HW_ENET_MAC_RMON_T_P512TO1023_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000238)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_P512TO1023(x)           (*(volatile hw_enet_mac_rmon_t_p512to1023_t *) HW_ENET_MAC_RMON_T_P512TO1023_ADDR(x))
#define HW_ENET_MAC_RMON_T_P512TO1023_RD(x)      (HW_ENET_MAC_RMON_T_P512TO1023(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_P512TO1023 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_P512TO1023, field RMON_T_P512TO1023 */

#define BP_ENET_MAC_RMON_T_P512TO1023_RMON_T_P512TO1023      0
#define BM_ENET_MAC_RMON_T_P512TO1023_RMON_T_P512TO1023      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_P512TO1023_RMON_T_P512TO1023(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_P512TO1023_RMON_T_P512TO1023(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_P1024TO2047 - ENET MAC RMON Tx 1024 to 2047 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_P1024TO2047  : 32;
    } B;
} hw_enet_mac_rmon_t_p1024to2047_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_P1024TO2047 register
 */
#define HW_ENET_MAC_RMON_T_P1024TO2047_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000023c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_P1024TO2047(x)           (*(volatile hw_enet_mac_rmon_t_p1024to2047_t *) HW_ENET_MAC_RMON_T_P1024TO2047_ADDR(x))
#define HW_ENET_MAC_RMON_T_P1024TO2047_RD(x)      (HW_ENET_MAC_RMON_T_P1024TO2047(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_P1024TO2047 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_P1024TO2047, field RMON_T_P1024TO2047 */

#define BP_ENET_MAC_RMON_T_P1024TO2047_RMON_T_P1024TO2047      0
#define BM_ENET_MAC_RMON_T_P1024TO2047_RMON_T_P1024TO2047      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_P1024TO2047_RMON_T_P1024TO2047(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_P1024TO2047_RMON_T_P1024TO2047(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_P_GTE2048 - ENET MAC RMON Tx packets w > 2048 bytes
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_P_GTE2048  : 32;
    } B;
} hw_enet_mac_rmon_t_p_gte2048_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_P_GTE2048 register
 */
#define HW_ENET_MAC_RMON_T_P_GTE2048_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000240)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_P_GTE2048(x)           (*(volatile hw_enet_mac_rmon_t_p_gte2048_t *) HW_ENET_MAC_RMON_T_P_GTE2048_ADDR(x))
#define HW_ENET_MAC_RMON_T_P_GTE2048_RD(x)      (HW_ENET_MAC_RMON_T_P_GTE2048(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_P_GTE2048 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_P_GTE2048, field RMON_T_P_GTE2048 */

#define BP_ENET_MAC_RMON_T_P_GTE2048_RMON_T_P_GTE2048      0
#define BM_ENET_MAC_RMON_T_P_GTE2048_RMON_T_P_GTE2048      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_P_GTE2048_RMON_T_P_GTE2048(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_P_GTE2048_RMON_T_P_GTE2048(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_T_OCTETS - ENET MAC RMON Tx Octets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_T_OCTETS  : 32;
    } B;
} hw_enet_mac_rmon_t_octets_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_T_OCTETS register
 */
#define HW_ENET_MAC_RMON_T_OCTETS_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000244)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_T_OCTETS(x)           (*(volatile hw_enet_mac_rmon_t_octets_t *) HW_ENET_MAC_RMON_T_OCTETS_ADDR(x))
#define HW_ENET_MAC_RMON_T_OCTETS_RD(x)      (HW_ENET_MAC_RMON_T_OCTETS(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_T_OCTETS bitfields
 */
/* --- Register HW_ENET_MAC_RMON_T_OCTETS, field RMON_T_OCTETS */

#define BP_ENET_MAC_RMON_T_OCTETS_RMON_T_OCTETS      0
#define BM_ENET_MAC_RMON_T_OCTETS_RMON_T_OCTETS      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_T_OCTETS_RMON_T_OCTETS(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_T_OCTETS_RMON_T_OCTETS(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_DROP - ENET MAC Frames Transmitted count drop
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_DROP  : 32;
    } B;
} hw_enet_mac_ieee_t_drop_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_DROP register
 */
#define HW_ENET_MAC_IEEE_T_DROP_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000248)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_DROP(x)           (*(volatile hw_enet_mac_ieee_t_drop_t *) HW_ENET_MAC_IEEE_T_DROP_ADDR(x))
#define HW_ENET_MAC_IEEE_T_DROP_RD(x)      (HW_ENET_MAC_IEEE_T_DROP(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_DROP bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_DROP, field IEEE_T_DROP */

#define BP_ENET_MAC_IEEE_T_DROP_IEEE_T_DROP      0
#define BM_ENET_MAC_IEEE_T_DROP_IEEE_T_DROP      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_DROP_IEEE_T_DROP(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_DROP_IEEE_T_DROP(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_FRAME_OK - ENET MAC Frames Transmitted OK
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_FRAME_OK  : 32;
    } B;
} hw_enet_mac_ieee_t_frame_ok_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_FRAME_OK register
 */
#define HW_ENET_MAC_IEEE_T_FRAME_OK_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000024c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_FRAME_OK(x)           (*(volatile hw_enet_mac_ieee_t_frame_ok_t *) HW_ENET_MAC_IEEE_T_FRAME_OK_ADDR(x))
#define HW_ENET_MAC_IEEE_T_FRAME_OK_RD(x)      (HW_ENET_MAC_IEEE_T_FRAME_OK(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_FRAME_OK bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_FRAME_OK, field IEEE_T_FRAME_OK */

#define BP_ENET_MAC_IEEE_T_FRAME_OK_IEEE_T_FRAME_OK      0
#define BM_ENET_MAC_IEEE_T_FRAME_OK_IEEE_T_FRAME_OK      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_FRAME_OK_IEEE_T_FRAME_OK(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_FRAME_OK_IEEE_T_FRAME_OK(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_1COL - ENET MAC Frames Transmitted with Single Collision
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_1COL  : 32;
    } B;
} hw_enet_mac_ieee_t_1col_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_1COL register
 */
#define HW_ENET_MAC_IEEE_T_1COL_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000250)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_1COL(x)           (*(volatile hw_enet_mac_ieee_t_1col_t *) HW_ENET_MAC_IEEE_T_1COL_ADDR(x))
#define HW_ENET_MAC_IEEE_T_1COL_RD(x)      (HW_ENET_MAC_IEEE_T_1COL(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_1COL bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_1COL, field IEEE_T_1COL */

#define BP_ENET_MAC_IEEE_T_1COL_IEEE_T_1COL      0
#define BM_ENET_MAC_IEEE_T_1COL_IEEE_T_1COL      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_1COL_IEEE_T_1COL(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_1COL_IEEE_T_1COL(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_MCOL - ENET MAC Frames Transmitted with Multiple Collisions
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_MCOL  : 32;
    } B;
} hw_enet_mac_ieee_t_mcol_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_MCOL register
 */
#define HW_ENET_MAC_IEEE_T_MCOL_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000254)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_MCOL(x)           (*(volatile hw_enet_mac_ieee_t_mcol_t *) HW_ENET_MAC_IEEE_T_MCOL_ADDR(x))
#define HW_ENET_MAC_IEEE_T_MCOL_RD(x)      (HW_ENET_MAC_IEEE_T_MCOL(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_MCOL bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_MCOL, field IEEE_T_MCOL */

#define BP_ENET_MAC_IEEE_T_MCOL_IEEE_T_MCOL      0
#define BM_ENET_MAC_IEEE_T_MCOL_IEEE_T_MCOL      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_MCOL_IEEE_T_MCOL(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_MCOL_IEEE_T_MCOL(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_DEF - ENET MAC Frames Transmitted after Deferral Delay
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_DEF  : 32;
    } B;
} hw_enet_mac_ieee_t_def_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_DEF register
 */
#define HW_ENET_MAC_IEEE_T_DEF_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000258)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_DEF(x)           (*(volatile hw_enet_mac_ieee_t_def_t *) HW_ENET_MAC_IEEE_T_DEF_ADDR(x))
#define HW_ENET_MAC_IEEE_T_DEF_RD(x)      (HW_ENET_MAC_IEEE_T_DEF(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_DEF bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_DEF, field IEEE_T_DEF */

#define BP_ENET_MAC_IEEE_T_DEF_IEEE_T_DEF      0
#define BM_ENET_MAC_IEEE_T_DEF_IEEE_T_DEF      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_DEF_IEEE_T_DEF(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_DEF_IEEE_T_DEF(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_LCOL - ENET MAC Frames Transmitted with Late Collision
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_LCOL  : 32;
    } B;
} hw_enet_mac_ieee_t_lcol_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_LCOL register
 */
#define HW_ENET_MAC_IEEE_T_LCOL_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000025c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_LCOL(x)           (*(volatile hw_enet_mac_ieee_t_lcol_t *) HW_ENET_MAC_IEEE_T_LCOL_ADDR(x))
#define HW_ENET_MAC_IEEE_T_LCOL_RD(x)      (HW_ENET_MAC_IEEE_T_LCOL(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_LCOL bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_LCOL, field IEEE_T_LCOL */

#define BP_ENET_MAC_IEEE_T_LCOL_IEEE_T_LCOL      0
#define BM_ENET_MAC_IEEE_T_LCOL_IEEE_T_LCOL      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_LCOL_IEEE_T_LCOL(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_LCOL_IEEE_T_LCOL(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_EXCOL - ENET MAC Frames Transmitted with Excessive Collisions
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_EXCOL  : 32;
    } B;
} hw_enet_mac_ieee_t_excol_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_EXCOL register
 */
#define HW_ENET_MAC_IEEE_T_EXCOL_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000260)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_EXCOL(x)           (*(volatile hw_enet_mac_ieee_t_excol_t *) HW_ENET_MAC_IEEE_T_EXCOL_ADDR(x))
#define HW_ENET_MAC_IEEE_T_EXCOL_RD(x)      (HW_ENET_MAC_IEEE_T_EXCOL(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_EXCOL bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_EXCOL, field IEEE_T_EXCOL */

#define BP_ENET_MAC_IEEE_T_EXCOL_IEEE_T_EXCOL      0
#define BM_ENET_MAC_IEEE_T_EXCOL_IEEE_T_EXCOL      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_EXCOL_IEEE_T_EXCOL(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_EXCOL_IEEE_T_EXCOL(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_MACERR - ENET MAC Frames Transmitted with Tx FIFO Underrun
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_MACERR  : 32;
    } B;
} hw_enet_mac_ieee_t_macerr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_MACERR register
 */
#define HW_ENET_MAC_IEEE_T_MACERR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000264)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_MACERR(x)           (*(volatile hw_enet_mac_ieee_t_macerr_t *) HW_ENET_MAC_IEEE_T_MACERR_ADDR(x))
#define HW_ENET_MAC_IEEE_T_MACERR_RD(x)      (HW_ENET_MAC_IEEE_T_MACERR(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_MACERR bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_MACERR, field IEEE_T_MACERR */

#define BP_ENET_MAC_IEEE_T_MACERR_IEEE_T_MACERR      0
#define BM_ENET_MAC_IEEE_T_MACERR_IEEE_T_MACERR      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_MACERR_IEEE_T_MACERR(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_MACERR_IEEE_T_MACERR(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_CSERR - ENET MAC Frames Transmitted with Carrier Sense Error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_CSERR  : 32;
    } B;
} hw_enet_mac_ieee_t_cserr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_CSERR register
 */
#define HW_ENET_MAC_IEEE_T_CSERR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000268)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_CSERR(x)           (*(volatile hw_enet_mac_ieee_t_cserr_t *) HW_ENET_MAC_IEEE_T_CSERR_ADDR(x))
#define HW_ENET_MAC_IEEE_T_CSERR_RD(x)      (HW_ENET_MAC_IEEE_T_CSERR(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_CSERR bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_CSERR, field IEEE_T_CSERR */

#define BP_ENET_MAC_IEEE_T_CSERR_IEEE_T_CSERR      0
#define BM_ENET_MAC_IEEE_T_CSERR_IEEE_T_CSERR      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_CSERR_IEEE_T_CSERR(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_CSERR_IEEE_T_CSERR(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_SQE - ENET MAC Frames Transmitted with SQE Error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_SQE  : 32;
    } B;
} hw_enet_mac_ieee_t_sqe_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_SQE register
 */
#define HW_ENET_MAC_IEEE_T_SQE_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000026c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_SQE(x)           (*(volatile hw_enet_mac_ieee_t_sqe_t *) HW_ENET_MAC_IEEE_T_SQE_ADDR(x))
#define HW_ENET_MAC_IEEE_T_SQE_RD(x)      (HW_ENET_MAC_IEEE_T_SQE(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_SQE bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_SQE, field IEEE_T_SQE */

#define BP_ENET_MAC_IEEE_T_SQE_IEEE_T_SQE      0
#define BM_ENET_MAC_IEEE_T_SQE_IEEE_T_SQE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_SQE_IEEE_T_SQE(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_SQE_IEEE_T_SQE(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_FDXFC - ENET MAC Frames Transmitted flow control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_FDXFC  : 32;
    } B;
} hw_enet_mac_ieee_t_fdxfc_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_FDXFC register
 */
#define HW_ENET_MAC_IEEE_T_FDXFC_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000270)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_FDXFC(x)           (*(volatile hw_enet_mac_ieee_t_fdxfc_t *) HW_ENET_MAC_IEEE_T_FDXFC_ADDR(x))
#define HW_ENET_MAC_IEEE_T_FDXFC_RD(x)      (HW_ENET_MAC_IEEE_T_FDXFC(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_FDXFC bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_FDXFC, field IEEE_T_FDXFC */

#define BP_ENET_MAC_IEEE_T_FDXFC_IEEE_T_FDXFC      0
#define BM_ENET_MAC_IEEE_T_FDXFC_IEEE_T_FDXFC      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_FDXFC_IEEE_T_FDXFC(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_FDXFC_IEEE_T_FDXFC(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_T_OCTETS_OK - ENET MAC Frames Transmitted error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_T_OCTETS_OK  : 32;
    } B;
} hw_enet_mac_ieee_t_octets_ok_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_T_OCTETS_OK register
 */
#define HW_ENET_MAC_IEEE_T_OCTETS_OK_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000274)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_T_OCTETS_OK(x)           (*(volatile hw_enet_mac_ieee_t_octets_ok_t *) HW_ENET_MAC_IEEE_T_OCTETS_OK_ADDR(x))
#define HW_ENET_MAC_IEEE_T_OCTETS_OK_RD(x)      (HW_ENET_MAC_IEEE_T_OCTETS_OK(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_T_OCTETS_OK bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_T_OCTETS_OK, field IEEE_T_OCTETS_OK */

#define BP_ENET_MAC_IEEE_T_OCTETS_OK_IEEE_T_OCTETS_OK      0
#define BM_ENET_MAC_IEEE_T_OCTETS_OK_IEEE_T_OCTETS_OK      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_T_OCTETS_OK_IEEE_T_OCTETS_OK(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_T_OCTETS_OK_IEEE_T_OCTETS_OK(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_PACKETS - ENET MAC RMON Rx packet count
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_PACKETS  : 32;
    } B;
} hw_enet_mac_rmon_r_packets_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_PACKETS register
 */
#define HW_ENET_MAC_RMON_R_PACKETS_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000284)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_PACKETS(x)           (*(volatile hw_enet_mac_rmon_r_packets_t *) HW_ENET_MAC_RMON_R_PACKETS_ADDR(x))
#define HW_ENET_MAC_RMON_R_PACKETS_RD(x)      (HW_ENET_MAC_RMON_R_PACKETS(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_PACKETS bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_PACKETS, field RMON_R_PACKETS */

#define BP_ENET_MAC_RMON_R_PACKETS_RMON_R_PACKETS      0
#define BM_ENET_MAC_RMON_R_PACKETS_RMON_R_PACKETS      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_PACKETS_RMON_R_PACKETS(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_PACKETS_RMON_R_PACKETS(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_BC_PKT - ENET MAC RMON Rx Broadcast Packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_BC_PKT  : 32;
    } B;
} hw_enet_mac_rmon_r_bc_pkt_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_BC_PKT register
 */
#define HW_ENET_MAC_RMON_R_BC_PKT_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000288)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_BC_PKT(x)           (*(volatile hw_enet_mac_rmon_r_bc_pkt_t *) HW_ENET_MAC_RMON_R_BC_PKT_ADDR(x))
#define HW_ENET_MAC_RMON_R_BC_PKT_RD(x)      (HW_ENET_MAC_RMON_R_BC_PKT(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_BC_PKT bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_BC_PKT, field RMON_R_BC_PKT */

#define BP_ENET_MAC_RMON_R_BC_PKT_RMON_R_BC_PKT      0
#define BM_ENET_MAC_RMON_R_BC_PKT_RMON_R_BC_PKT      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_BC_PKT_RMON_R_BC_PKT(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_BC_PKT_RMON_R_BC_PKT(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_MC_PKT - ENET MAC RMON Rx Multicast Packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_MC_PKT  : 32;
    } B;
} hw_enet_mac_rmon_r_mc_pkt_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_MC_PKT register
 */
#define HW_ENET_MAC_RMON_R_MC_PKT_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000028c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_MC_PKT(x)           (*(volatile hw_enet_mac_rmon_r_mc_pkt_t *) HW_ENET_MAC_RMON_R_MC_PKT_ADDR(x))
#define HW_ENET_MAC_RMON_R_MC_PKT_RD(x)      (HW_ENET_MAC_RMON_R_MC_PKT(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_MC_PKT bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_MC_PKT, field RMON_R_MC_PKT */

#define BP_ENET_MAC_RMON_R_MC_PKT_RMON_R_MC_PKT      0
#define BM_ENET_MAC_RMON_R_MC_PKT_RMON_R_MC_PKT      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_MC_PKT_RMON_R_MC_PKT(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_MC_PKT_RMON_R_MC_PKT(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_CRC_ALIGN - ENET MAC RMON Rx Packets w CRC/Align error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_CRC_ALIGN  : 32;
    } B;
} hw_enet_mac_rmon_r_crc_align_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_CRC_ALIGN register
 */
#define HW_ENET_MAC_RMON_R_CRC_ALIGN_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000290)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_CRC_ALIGN(x)           (*(volatile hw_enet_mac_rmon_r_crc_align_t *) HW_ENET_MAC_RMON_R_CRC_ALIGN_ADDR(x))
#define HW_ENET_MAC_RMON_R_CRC_ALIGN_RD(x)      (HW_ENET_MAC_RMON_R_CRC_ALIGN(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_CRC_ALIGN bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_CRC_ALIGN, field RMON_R_CRC_ALIGN */

#define BP_ENET_MAC_RMON_R_CRC_ALIGN_RMON_R_CRC_ALIGN      0
#define BM_ENET_MAC_RMON_R_CRC_ALIGN_RMON_R_CRC_ALIGN      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_CRC_ALIGN_RMON_R_CRC_ALIGN(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_CRC_ALIGN_RMON_R_CRC_ALIGN(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_UNDERSIZE - ENET MAC RMON Rx Packets < 64 bytes, n,good CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_UNDERSIZE  : 32;
    } B;
} hw_enet_mac_rmon_r_undersize_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_UNDERSIZE register
 */
#define HW_ENET_MAC_RMON_R_UNDERSIZE_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000294)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_UNDERSIZE(x)           (*(volatile hw_enet_mac_rmon_r_undersize_t *) HW_ENET_MAC_RMON_R_UNDERSIZE_ADDR(x))
#define HW_ENET_MAC_RMON_R_UNDERSIZE_RD(x)      (HW_ENET_MAC_RMON_R_UNDERSIZE(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_UNDERSIZE bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_UNDERSIZE, field RMON_R_UNDERSIZE */

#define BP_ENET_MAC_RMON_R_UNDERSIZE_RMON_R_UNDERSIZE      0
#define BM_ENET_MAC_RMON_R_UNDERSIZE_RMON_R_UNDERSIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_UNDERSIZE_RMON_R_UNDERSIZE(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_UNDERSIZE_RMON_R_UNDERSIZE(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_OVERSIZE - ENET MAC RMON Rx Packets > MAX_FL, n,good CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_OVERSIZE  : 32;
    } B;
} hw_enet_mac_rmon_r_oversize_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_OVERSIZE register
 */
#define HW_ENET_MAC_RMON_R_OVERSIZE_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000298)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_OVERSIZE(x)           (*(volatile hw_enet_mac_rmon_r_oversize_t *) HW_ENET_MAC_RMON_R_OVERSIZE_ADDR(x))
#define HW_ENET_MAC_RMON_R_OVERSIZE_RD(x)      (HW_ENET_MAC_RMON_R_OVERSIZE(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_OVERSIZE bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_OVERSIZE, field RMON_R_OVERSIZE */

#define BP_ENET_MAC_RMON_R_OVERSIZE_RMON_R_OVERSIZE      0
#define BM_ENET_MAC_RMON_R_OVERSIZE_RMON_R_OVERSIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_OVERSIZE_RMON_R_OVERSIZE(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_OVERSIZE_RMON_R_OVERSIZE(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_FRAG - ENET MAC RMON Rx Packets < 64 bytes, n,bad CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_FRAG  : 32;
    } B;
} hw_enet_mac_rmon_r_frag_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_FRAG register
 */
#define HW_ENET_MAC_RMON_R_FRAG_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000029c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_FRAG(x)           (*(volatile hw_enet_mac_rmon_r_frag_t *) HW_ENET_MAC_RMON_R_FRAG_ADDR(x))
#define HW_ENET_MAC_RMON_R_FRAG_RD(x)      (HW_ENET_MAC_RMON_R_FRAG(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_FRAG bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_FRAG, field RMON_R_FRAG */

#define BP_ENET_MAC_RMON_R_FRAG_RMON_R_FRAG      0
#define BM_ENET_MAC_RMON_R_FRAG_RMON_R_FRAG      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_FRAG_RMON_R_FRAG(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_FRAG_RMON_R_FRAG(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_JAB - ENET MAC RMON Rx Packets > MAX_FL bytes, n,bad CRC
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_JAB  : 32;
    } B;
} hw_enet_mac_rmon_r_jab_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_JAB register
 */
#define HW_ENET_MAC_RMON_R_JAB_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002a0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_JAB(x)           (*(volatile hw_enet_mac_rmon_r_jab_t *) HW_ENET_MAC_RMON_R_JAB_ADDR(x))
#define HW_ENET_MAC_RMON_R_JAB_RD(x)      (HW_ENET_MAC_RMON_R_JAB(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_JAB bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_JAB, field RMON_R_JAB */

#define BP_ENET_MAC_RMON_R_JAB_RMON_R_JAB      0
#define BM_ENET_MAC_RMON_R_JAB_RMON_R_JAB      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_JAB_RMON_R_JAB(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_JAB_RMON_R_JAB(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_P64 - ENET MAC RMON Rx 64 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_P64  : 32;
    } B;
} hw_enet_mac_rmon_r_p64_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_P64 register
 */
#define HW_ENET_MAC_RMON_R_P64_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002a8)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_P64(x)           (*(volatile hw_enet_mac_rmon_r_p64_t *) HW_ENET_MAC_RMON_R_P64_ADDR(x))
#define HW_ENET_MAC_RMON_R_P64_RD(x)      (HW_ENET_MAC_RMON_R_P64(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_P64 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_P64, field RMON_R_P64 */

#define BP_ENET_MAC_RMON_R_P64_RMON_R_P64      0
#define BM_ENET_MAC_RMON_R_P64_RMON_R_P64      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_P64_RMON_R_P64(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_P64_RMON_R_P64(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_P65TO127 - ENET MAC RMON Rx 65 to 127 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_P65TO127  : 32;
    } B;
} hw_enet_mac_rmon_r_p65to127_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_P65TO127 register
 */
#define HW_ENET_MAC_RMON_R_P65TO127_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002ac)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_P65TO127(x)           (*(volatile hw_enet_mac_rmon_r_p65to127_t *) HW_ENET_MAC_RMON_R_P65TO127_ADDR(x))
#define HW_ENET_MAC_RMON_R_P65TO127_RD(x)      (HW_ENET_MAC_RMON_R_P65TO127(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_P65TO127 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_P65TO127, field RMON_R_P65TO127 */

#define BP_ENET_MAC_RMON_R_P65TO127_RMON_R_P65TO127      0
#define BM_ENET_MAC_RMON_R_P65TO127_RMON_R_P65TO127      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_P65TO127_RMON_R_P65TO127(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_P65TO127_RMON_R_P65TO127(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_P128TO255 - ENET MAC RMON Rx 128 to 255 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_P128TO255  : 32;
    } B;
} hw_enet_mac_rmon_r_p128to255_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_P128TO255 register
 */
#define HW_ENET_MAC_RMON_R_P128TO255_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002b0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_P128TO255(x)           (*(volatile hw_enet_mac_rmon_r_p128to255_t *) HW_ENET_MAC_RMON_R_P128TO255_ADDR(x))
#define HW_ENET_MAC_RMON_R_P128TO255_RD(x)      (HW_ENET_MAC_RMON_R_P128TO255(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_P128TO255 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_P128TO255, field RMON_R_P128TO255 */

#define BP_ENET_MAC_RMON_R_P128TO255_RMON_R_P128TO255      0
#define BM_ENET_MAC_RMON_R_P128TO255_RMON_R_P128TO255      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_P128TO255_RMON_R_P128TO255(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_P128TO255_RMON_R_P128TO255(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_P256TO511 - ENET MAC RMON Rx 256 to 511 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_P256TO511  : 32;
    } B;
} hw_enet_mac_rmon_r_p256to511_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_P256TO511 register
 */
#define HW_ENET_MAC_RMON_R_P256TO511_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002b4)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_P256TO511(x)           (*(volatile hw_enet_mac_rmon_r_p256to511_t *) HW_ENET_MAC_RMON_R_P256TO511_ADDR(x))
#define HW_ENET_MAC_RMON_R_P256TO511_RD(x)      (HW_ENET_MAC_RMON_R_P256TO511(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_P256TO511 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_P256TO511, field RMON_R_P256TO511 */

#define BP_ENET_MAC_RMON_R_P256TO511_RMON_R_P256TO511      0
#define BM_ENET_MAC_RMON_R_P256TO511_RMON_R_P256TO511      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_P256TO511_RMON_R_P256TO511(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_P256TO511_RMON_R_P256TO511(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_P512TO1023 - ENET MAC RMON Rx 512 to 1023 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_P512TO1023  : 32;
    } B;
} hw_enet_mac_rmon_r_p512to1023_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_P512TO1023 register
 */
#define HW_ENET_MAC_RMON_R_P512TO1023_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002b8)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_P512TO1023(x)           (*(volatile hw_enet_mac_rmon_r_p512to1023_t *) HW_ENET_MAC_RMON_R_P512TO1023_ADDR(x))
#define HW_ENET_MAC_RMON_R_P512TO1023_RD(x)      (HW_ENET_MAC_RMON_R_P512TO1023(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_P512TO1023 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_P512TO1023, field RMON_R_P512TO1023 */

#define BP_ENET_MAC_RMON_R_P512TO1023_RMON_R_P512TO1023      0
#define BM_ENET_MAC_RMON_R_P512TO1023_RMON_R_P512TO1023      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_P512TO1023_RMON_R_P512TO1023(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_P512TO1023_RMON_R_P512TO1023(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_P1024TO2047 - ENET MAC RMON Rx 1024 to 2047 byte packets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_P1024TO2047  : 32;
    } B;
} hw_enet_mac_rmon_r_p1024to2047_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_P1024TO2047 register
 */
#define HW_ENET_MAC_RMON_R_P1024TO2047_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002bc)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_P1024TO2047(x)           (*(volatile hw_enet_mac_rmon_r_p1024to2047_t *) HW_ENET_MAC_RMON_R_P1024TO2047_ADDR(x))
#define HW_ENET_MAC_RMON_R_P1024TO2047_RD(x)      (HW_ENET_MAC_RMON_R_P1024TO2047(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_P1024TO2047 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_P1024TO2047, field RMON_R_P1024TO2047 */

#define BP_ENET_MAC_RMON_R_P1024TO2047_RMON_R_P1024TO2047      0
#define BM_ENET_MAC_RMON_R_P1024TO2047_RMON_R_P1024TO2047      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_P1024TO2047_RMON_R_P1024TO2047(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_P1024TO2047_RMON_R_P1024TO2047(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_P_GTE2048 - ENET MAC RMON Rx packets w > 2048 bytes
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_P_GTE2048  : 32;
    } B;
} hw_enet_mac_rmon_r_p_gte2048_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_P_GTE2048 register
 */
#define HW_ENET_MAC_RMON_R_P_GTE2048_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002c0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_P_GTE2048(x)           (*(volatile hw_enet_mac_rmon_r_p_gte2048_t *) HW_ENET_MAC_RMON_R_P_GTE2048_ADDR(x))
#define HW_ENET_MAC_RMON_R_P_GTE2048_RD(x)      (HW_ENET_MAC_RMON_R_P_GTE2048(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_P_GTE2048 bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_P_GTE2048, field RMON_R_P_GTE2048 */

#define BP_ENET_MAC_RMON_R_P_GTE2048_RMON_R_P_GTE2048      0
#define BM_ENET_MAC_RMON_R_P_GTE2048_RMON_R_P_GTE2048      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_P_GTE2048_RMON_R_P_GTE2048(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_P_GTE2048_RMON_R_P_GTE2048(v)   (v)
#endif


/*
 * HW_ENET_MAC_RMON_R_OCTETS - ENET MAC RMON Rx Octets
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned RMON_R_OCTETS  : 32;
    } B;
} hw_enet_mac_rmon_r_octets_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_RMON_R_OCTETS register
 */
#define HW_ENET_MAC_RMON_R_OCTETS_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002c4)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_RMON_R_OCTETS(x)           (*(volatile hw_enet_mac_rmon_r_octets_t *) HW_ENET_MAC_RMON_R_OCTETS_ADDR(x))
#define HW_ENET_MAC_RMON_R_OCTETS_RD(x)      (HW_ENET_MAC_RMON_R_OCTETS(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_RMON_R_OCTETS bitfields
 */
/* --- Register HW_ENET_MAC_RMON_R_OCTETS, field RMON_R_OCTETS */

#define BP_ENET_MAC_RMON_R_OCTETS_RMON_R_OCTETS      0
#define BM_ENET_MAC_RMON_R_OCTETS_RMON_R_OCTETS      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_RMON_R_OCTETS_RMON_R_OCTETS(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_RMON_R_OCTETS_RMON_R_OCTETS(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_R_DROP - ENET MAC Frames Received count
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_R_DROP  : 32;
    } B;
} hw_enet_mac_ieee_r_drop_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_R_DROP register
 */
#define HW_ENET_MAC_IEEE_R_DROP_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002c8)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_R_DROP(x)           (*(volatile hw_enet_mac_ieee_r_drop_t *) HW_ENET_MAC_IEEE_R_DROP_ADDR(x))
#define HW_ENET_MAC_IEEE_R_DROP_RD(x)      (HW_ENET_MAC_IEEE_R_DROP(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_R_DROP bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_R_DROP, field IEEE_R_DROP */

#define BP_ENET_MAC_IEEE_R_DROP_IEEE_R_DROP      0
#define BM_ENET_MAC_IEEE_R_DROP_IEEE_R_DROP      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_R_DROP_IEEE_R_DROP(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_R_DROP_IEEE_R_DROP(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_R_FRAME_OK - ENET MAC Frames Received OK
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_R_FRAME_OK  : 32;
    } B;
} hw_enet_mac_ieee_r_frame_ok_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_R_FRAME_OK register
 */
#define HW_ENET_MAC_IEEE_R_FRAME_OK_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002cc)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_R_FRAME_OK(x)           (*(volatile hw_enet_mac_ieee_r_frame_ok_t *) HW_ENET_MAC_IEEE_R_FRAME_OK_ADDR(x))
#define HW_ENET_MAC_IEEE_R_FRAME_OK_RD(x)      (HW_ENET_MAC_IEEE_R_FRAME_OK(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_R_FRAME_OK bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_R_FRAME_OK, field IEEE_R_FRAME_OK */

#define BP_ENET_MAC_IEEE_R_FRAME_OK_IEEE_R_FRAME_OK      0
#define BM_ENET_MAC_IEEE_R_FRAME_OK_IEEE_R_FRAME_OK      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_R_FRAME_OK_IEEE_R_FRAME_OK(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_R_FRAME_OK_IEEE_R_FRAME_OK(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_R_CRC - ENET MAC Frames Received with CRC Error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_R_CRC  : 32;
    } B;
} hw_enet_mac_ieee_r_crc_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_R_CRC register
 */
#define HW_ENET_MAC_IEEE_R_CRC_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002d0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_R_CRC(x)          (*(volatile hw_enet_mac_ieee_r_crc_t *) HW_ENET_MAC_IEEE_R_CRC_ADDR(x))
#define HW_ENET_MAC_IEEE_R_CRC_RD(x)      (HW_ENET_MAC_IEEE_R_CRC(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_R_CRC bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_R_CRC, field IEEE_R_CRC */

#define BP_ENET_MAC_IEEE_R_CRC_IEEE_R_CRC      0
#define BM_ENET_MAC_IEEE_R_CRC_IEEE_R_CRC      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_R_CRC_IEEE_R_CRC(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_R_CRC_IEEE_R_CRC(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_R_ALIGN - ENET MAC Frames Received with Alignment Error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_R_ALIGN  : 32;
    } B;
} hw_enet_mac_ieee_r_align_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_R_ALIGN register
 */
#define HW_ENET_MAC_IEEE_R_ALIGN_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002d4)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_R_ALIGN(x)           (*(volatile hw_enet_mac_ieee_r_align_t *) HW_ENET_MAC_IEEE_R_ALIGN_ADDR(x))
#define HW_ENET_MAC_IEEE_R_ALIGN_RD(x)      (HW_ENET_MAC_IEEE_R_ALIGN(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_R_ALIGN bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_R_ALIGN, field IEEE_R_ALIGN */

#define BP_ENET_MAC_IEEE_R_ALIGN_IEEE_R_ALIGN      0
#define BM_ENET_MAC_IEEE_R_ALIGN_IEEE_R_ALIGN      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_R_ALIGN_IEEE_R_ALIGN(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_R_ALIGN_IEEE_R_ALIGN(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_R_MACERR - ENET MAC Frames Received overflow
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_R_MACERR  : 32;
    } B;
} hw_enet_mac_ieee_r_macerr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_R_MACERR register
 */
#define HW_ENET_MAC_IEEE_R_MACERR_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002d8)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_R_MACERR(x)           (*(volatile hw_enet_mac_ieee_r_macerr_t *) HW_ENET_MAC_IEEE_R_MACERR_ADDR(x))
#define HW_ENET_MAC_IEEE_R_MACERR_RD(x)      (HW_ENET_MAC_IEEE_R_MACERR(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_R_MACERR bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_R_MACERR, field IEEE_R_MACERR */

#define BP_ENET_MAC_IEEE_R_MACERR_IEEE_R_MACERR      0
#define BM_ENET_MAC_IEEE_R_MACERR_IEEE_R_MACERR      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_R_MACERR_IEEE_R_MACERR(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_R_MACERR_IEEE_R_MACERR(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_R_FDXFC - ENET MAC Frames Received flow control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_R_FDXFC  : 32;
    } B;
} hw_enet_mac_ieee_r_fdxfc_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_R_FDXFC register
 */
#define HW_ENET_MAC_IEEE_R_FDXFC_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002dc)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_R_FDXFC(x)           (*(volatile hw_enet_mac_ieee_r_fdxfc_t *) HW_ENET_MAC_IEEE_R_FDXFC_ADDR(x))
#define HW_ENET_MAC_IEEE_R_FDXFC_RD(x)      (HW_ENET_MAC_IEEE_R_FDXFC(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_R_FDXFC bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_R_FDXFC, field IEEE_R_FDXFC */

#define BP_ENET_MAC_IEEE_R_FDXFC_IEEE_R_FDXFC      0
#define BM_ENET_MAC_IEEE_R_FDXFC_IEEE_R_FDXFC      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_R_FDXFC_IEEE_R_FDXFC(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_R_FDXFC_IEEE_R_FDXFC(v)   (v)
#endif


/*
 * HW_ENET_MAC_IEEE_R_OCTETS_OK - ENET MAC Frames Received error
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned IEEE_R_OCTETS_OK  : 32;
    } B;
} hw_enet_mac_ieee_r_octets_ok_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_IEEE_R_OCTETS_OK register
 */
#define HW_ENET_MAC_IEEE_R_OCTETS_OK_ADDR(x)      (REGS_ENET_BASE(x) + 0x000002e0)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_IEEE_R_OCTETS_OK(x)           (*(volatile hw_enet_mac_ieee_r_octets_ok_t *) HW_ENET_MAC_IEEE_R_OCTETS_OK_ADDR(x))
#define HW_ENET_MAC_IEEE_R_OCTETS_OK_RD(x)      (HW_ENET_MAC_IEEE_R_OCTETS_OK(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_IEEE_R_OCTETS_OK bitfields
 */
/* --- Register HW_ENET_MAC_IEEE_R_OCTETS_OK, field IEEE_R_OCTETS_OK */

#define BP_ENET_MAC_IEEE_R_OCTETS_OK_IEEE_R_OCTETS_OK      0
#define BM_ENET_MAC_IEEE_R_OCTETS_OK_IEEE_R_OCTETS_OK      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_IEEE_R_OCTETS_OK_IEEE_R_OCTETS_OK(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_IEEE_R_OCTETS_OK_IEEE_R_OCTETS_OK(v)   (v)
#endif


/*
 * HW_ENET_MAC_ATIME_CTRL - ENET MAC IEEE1588 Timer Control Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ENABLE          :  1;
        unsigned ONE_SHOT        :  1;
        unsigned EVT_OFFSET_ENA  :  1;
        unsigned EVT_OFFSET_RST  :  1;
        unsigned EVT_PERIOD_ENA  :  1;
        unsigned EVT_PERIOD_RST  :  1;
        unsigned RSRVD4          :  1;
        unsigned PIN_PERIOD_ENA  :  1;
        unsigned RSRVD3          :  1;
        unsigned RESTART         :  1;
        unsigned RSRVD2          :  1;
        unsigned CAPTURE         :  1;
        unsigned RSRVD1          :  1;
        unsigned FRC_SLAVE       :  1;
        unsigned RSRVD0          : 18;
    } B;
} hw_enet_mac_atime_ctrl_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ATIME_CTRL register
 */
#define HW_ENET_MAC_ATIME_CTRL_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000400)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ATIME_CTRL(x)           (*(volatile hw_enet_mac_atime_ctrl_t *) HW_ENET_MAC_ATIME_CTRL_ADDR(x))
#define HW_ENET_MAC_ATIME_CTRL_RD(x)      (HW_ENET_MAC_ATIME_CTRL(x).U)
#define HW_ENET_MAC_ATIME_CTRL_WR(x,v)     (HW_ENET_MAC_ATIME_CTRL(x).U = (v))
#define HW_ENET_MAC_ATIME_CTRL_SET(x,v)    (HW_ENET_MAC_ATIME_CTRL_WR(x,HW_ENET_MAC_ATIME_CTRL_RD(x) |  (v)))
#define HW_ENET_MAC_ATIME_CTRL_CLR(x,v)    (HW_ENET_MAC_ATIME_CTRL_WR(x,HW_ENET_MAC_ATIME_CTRL_RD(x) & ~(v)))
#define HW_ENET_MAC_ATIME_CTRL_TOG(x,v)    (HW_ENET_MAC_ATIME_CTRL_WR(x,HW_ENET_MAC_ATIME_CTRL_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ATIME_CTRL bitfields
 */
/* --- Register HW_ENET_MAC_ATIME_CTRL, field RSRVD0 */

#define BP_ENET_MAC_ATIME_CTRL_RSRVD0      14
#define BM_ENET_MAC_ATIME_CTRL_RSRVD0      0xFFFFC000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ATIME_CTRL_RSRVD0(v)   ((((reg32_t) v) << 14) & BM_ENET_MAC_ATIME_CTRL_RSRVD0)
#else
#define BF_ENET_MAC_ATIME_CTRL_RSRVD0(v)   (((v) << 14) & BM_ENET_MAC_ATIME_CTRL_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_ATIME_CTRL, field FRC_SLAVE */

#define BP_ENET_MAC_ATIME_CTRL_FRC_SLAVE      13
#define BM_ENET_MAC_ATIME_CTRL_FRC_SLAVE      0x00002000

#define BF_ENET_MAC_ATIME_CTRL_FRC_SLAVE(v)   (((v) << 13) & BM_ENET_MAC_ATIME_CTRL_FRC_SLAVE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_FRC_SLAVE(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,FRC_SLAVE,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field RSRVD1 */

#define BP_ENET_MAC_ATIME_CTRL_RSRVD1      12
#define BM_ENET_MAC_ATIME_CTRL_RSRVD1      0x00001000

#define BF_ENET_MAC_ATIME_CTRL_RSRVD1(v)   (((v) << 12) & BM_ENET_MAC_ATIME_CTRL_RSRVD1)
/* --- Register HW_ENET_MAC_ATIME_CTRL, field CAPTURE */

#define BP_ENET_MAC_ATIME_CTRL_CAPTURE      11
#define BM_ENET_MAC_ATIME_CTRL_CAPTURE      0x00000800

#define BF_ENET_MAC_ATIME_CTRL_CAPTURE(v)   (((v) << 11) & BM_ENET_MAC_ATIME_CTRL_CAPTURE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_CAPTURE(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,CAPTURE,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field RSRVD2 */

#define BP_ENET_MAC_ATIME_CTRL_RSRVD2      10
#define BM_ENET_MAC_ATIME_CTRL_RSRVD2      0x00000400

#define BF_ENET_MAC_ATIME_CTRL_RSRVD2(v)   (((v) << 10) & BM_ENET_MAC_ATIME_CTRL_RSRVD2)
/* --- Register HW_ENET_MAC_ATIME_CTRL, field RESTART */

#define BP_ENET_MAC_ATIME_CTRL_RESTART      9
#define BM_ENET_MAC_ATIME_CTRL_RESTART      0x00000200

#define BF_ENET_MAC_ATIME_CTRL_RESTART(v)   (((v) << 9) & BM_ENET_MAC_ATIME_CTRL_RESTART)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_RESTART(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,RESTART,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field RSRVD3 */

#define BP_ENET_MAC_ATIME_CTRL_RSRVD3      8
#define BM_ENET_MAC_ATIME_CTRL_RSRVD3      0x00000100

#define BF_ENET_MAC_ATIME_CTRL_RSRVD3(v)   (((v) << 8) & BM_ENET_MAC_ATIME_CTRL_RSRVD3)
/* --- Register HW_ENET_MAC_ATIME_CTRL, field PIN_PERIOD_ENA */

#define BP_ENET_MAC_ATIME_CTRL_PIN_PERIOD_ENA      7
#define BM_ENET_MAC_ATIME_CTRL_PIN_PERIOD_ENA      0x00000080

#define BF_ENET_MAC_ATIME_CTRL_PIN_PERIOD_ENA(v)   (((v) << 7) & BM_ENET_MAC_ATIME_CTRL_PIN_PERIOD_ENA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_PIN_PERIOD_ENA(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,PIN_PERIOD_ENA,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field RSRVD4 */

#define BP_ENET_MAC_ATIME_CTRL_RSRVD4      6
#define BM_ENET_MAC_ATIME_CTRL_RSRVD4      0x00000040

#define BF_ENET_MAC_ATIME_CTRL_RSRVD4(v)   (((v) << 6) & BM_ENET_MAC_ATIME_CTRL_RSRVD4)
/* --- Register HW_ENET_MAC_ATIME_CTRL, field EVT_PERIOD_RST */

#define BP_ENET_MAC_ATIME_CTRL_EVT_PERIOD_RST      5
#define BM_ENET_MAC_ATIME_CTRL_EVT_PERIOD_RST      0x00000020

#define BF_ENET_MAC_ATIME_CTRL_EVT_PERIOD_RST(v)   (((v) << 5) & BM_ENET_MAC_ATIME_CTRL_EVT_PERIOD_RST)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_EVT_PERIOD_RST(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,EVT_PERIOD_RST,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field EVT_PERIOD_ENA */

#define BP_ENET_MAC_ATIME_CTRL_EVT_PERIOD_ENA      4
#define BM_ENET_MAC_ATIME_CTRL_EVT_PERIOD_ENA      0x00000010

#define BF_ENET_MAC_ATIME_CTRL_EVT_PERIOD_ENA(v)   (((v) << 4) & BM_ENET_MAC_ATIME_CTRL_EVT_PERIOD_ENA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_EVT_PERIOD_ENA(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,EVT_PERIOD_ENA,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field EVT_OFFSET_RST */

#define BP_ENET_MAC_ATIME_CTRL_EVT_OFFSET_RST      3
#define BM_ENET_MAC_ATIME_CTRL_EVT_OFFSET_RST      0x00000008

#define BF_ENET_MAC_ATIME_CTRL_EVT_OFFSET_RST(v)   (((v) << 3) & BM_ENET_MAC_ATIME_CTRL_EVT_OFFSET_RST)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_EVT_OFFSET_RST(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,EVT_OFFSET_RST,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field EVT_OFFSET_ENA */

#define BP_ENET_MAC_ATIME_CTRL_EVT_OFFSET_ENA      2
#define BM_ENET_MAC_ATIME_CTRL_EVT_OFFSET_ENA      0x00000004

#define BF_ENET_MAC_ATIME_CTRL_EVT_OFFSET_ENA(v)   (((v) << 2) & BM_ENET_MAC_ATIME_CTRL_EVT_OFFSET_ENA)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_EVT_OFFSET_ENA(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,EVT_OFFSET_ENA,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field ONE_SHOT */

#define BP_ENET_MAC_ATIME_CTRL_ONE_SHOT      1
#define BM_ENET_MAC_ATIME_CTRL_ONE_SHOT      0x00000002

#define BF_ENET_MAC_ATIME_CTRL_ONE_SHOT(v)   (((v) << 1) & BM_ENET_MAC_ATIME_CTRL_ONE_SHOT)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_ONE_SHOT(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,ONE_SHOT,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_CTRL, field ENABLE */

#define BP_ENET_MAC_ATIME_CTRL_ENABLE      0
#define BM_ENET_MAC_ATIME_CTRL_ENABLE      0x00000001

#define BF_ENET_MAC_ATIME_CTRL_ENABLE(v)   (((v) << 0) & BM_ENET_MAC_ATIME_CTRL_ENABLE)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CTRL_ENABLE(n,v)   BF_CS1n(ENET_MAC_ATIME_CTRL, n,ENABLE,v)
#endif




/*
 * HW_ENET_MAC_ATIME - ENET MAC IEEE1588 Timer value Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ATIME  : 32;
    } B;
} hw_enet_mac_atime_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ATIME register
 */
#define HW_ENET_MAC_ATIME_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000404)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ATIME(x)           (*(volatile hw_enet_mac_atime_t *) HW_ENET_MAC_ATIME_ADDR(x))
#define HW_ENET_MAC_ATIME_RD(x)      (HW_ENET_MAC_ATIME(x).U)
#define HW_ENET_MAC_ATIME_WR(x,v)     (HW_ENET_MAC_ATIME(x).U = (v))
#define HW_ENET_MAC_ATIME_SET(x,v)    (HW_ENET_MAC_ATIME_WR(x,HW_ENET_MAC_ATIME_RD(x) |  (v)))
#define HW_ENET_MAC_ATIME_CLR(x,v)    (HW_ENET_MAC_ATIME_WR(x,HW_ENET_MAC_ATIME_RD(x) & ~(v)))
#define HW_ENET_MAC_ATIME_TOG(x,v)    (HW_ENET_MAC_ATIME_WR(x,HW_ENET_MAC_ATIME_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ATIME bitfields
 */
/* --- Register HW_ENET_MAC_ATIME, field ATIME */

#define BP_ENET_MAC_ATIME_ATIME      0
#define BM_ENET_MAC_ATIME_ATIME      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ATIME_ATIME(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_ATIME_ATIME(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_ATIME(x,v)   (HW_ENET_MAC_ATIME.B.ATIME = (v))
#endif



/*
 * HW_ENET_MAC_ATIME_EVT_OFFSET - ENET MAC IEEE1588 Offsetvalue for one-shot event generation Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ATIME_EVT_OFFSET  : 32;
    } B;
} hw_enet_mac_atime_evt_offset_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ATIME_EVT_OFFSET register
 */
#define HW_ENET_MAC_ATIME_EVT_OFFSET_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000408)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ATIME_EVT_OFFSET(x)           (*(volatile hw_enet_mac_atime_evt_offset_t *) HW_ENET_MAC_ATIME_EVT_OFFSET_ADDR(x))
#define HW_ENET_MAC_ATIME_EVT_OFFSET_RD(x)      (HW_ENET_MAC_ATIME_EVT_OFFSET(x).U)
#define HW_ENET_MAC_ATIME_EVT_OFFSET_WR(x,v)     (HW_ENET_MAC_ATIME_EVT_OFFSET(x).U = (v))
#define HW_ENET_MAC_ATIME_EVT_OFFSET_SET(x,v)    (HW_ENET_MAC_ATIME_EVT_OFFSET_WR(x,HW_ENET_MAC_ATIME_EVT_OFFSET_RD(x) |  (v)))
#define HW_ENET_MAC_ATIME_EVT_OFFSET_CLR(x,v)    (HW_ENET_MAC_ATIME_EVT_OFFSET_WR(x,HW_ENET_MAC_ATIME_EVT_OFFSET_RD(x) & ~(v)))
#define HW_ENET_MAC_ATIME_EVT_OFFSET_TOG(x,v)    (HW_ENET_MAC_ATIME_EVT_OFFSET_WR(x,HW_ENET_MAC_ATIME_EVT_OFFSET_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ATIME_EVT_OFFSET bitfields
 */
/* --- Register HW_ENET_MAC_ATIME_EVT_OFFSET, field ATIME_EVT_OFFSET */

#define BP_ENET_MAC_ATIME_EVT_OFFSET_ATIME_EVT_OFFSET      0
#define BM_ENET_MAC_ATIME_EVT_OFFSET_ATIME_EVT_OFFSET      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ATIME_EVT_OFFSET_ATIME_EVT_OFFSET(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_ATIME_EVT_OFFSET_ATIME_EVT_OFFSET(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_EVT_OFFSET_ATIME_EVT_OFFSET(x,v)   (HW_ENET_MAC_ATIME_EVT_OFFSET.B.ATIME_EVT_OFFSET = (v))
#endif



/*
 * HW_ENET_MAC_ATIME_EVT_PERIOD - ENET MAC IEEE1588 Timer Period Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ATIME_EVT_PERIOD  : 32;
    } B;
} hw_enet_mac_atime_evt_period_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ATIME_EVT_PERIOD register
 */
#define HW_ENET_MAC_ATIME_EVT_PERIOD_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000040c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ATIME_EVT_PERIOD(x)           (*(volatile hw_enet_mac_atime_evt_period_t *) HW_ENET_MAC_ATIME_EVT_PERIOD_ADDR(x))
#define HW_ENET_MAC_ATIME_EVT_PERIOD_RD(x)      (HW_ENET_MAC_ATIME_EVT_PERIOD(x).U)
#define HW_ENET_MAC_ATIME_EVT_PERIOD_WR(x,v)     (HW_ENET_MAC_ATIME_EVT_PERIOD(x).U = (v))
#define HW_ENET_MAC_ATIME_EVT_PERIOD_SET(x,v)    (HW_ENET_MAC_ATIME_EVT_PERIOD_WR(x,HW_ENET_MAC_ATIME_EVT_PERIOD_RD(x) |  (v)))
#define HW_ENET_MAC_ATIME_EVT_PERIOD_CLR(x,v)    (HW_ENET_MAC_ATIME_EVT_PERIOD_WR(x,HW_ENET_MAC_ATIME_EVT_PERIOD_RD(x) & ~(v)))
#define HW_ENET_MAC_ATIME_EVT_PERIOD_TOG(x,v)    (HW_ENET_MAC_ATIME_EVT_PERIOD_WR(x,HW_ENET_MAC_ATIME_EVT_PERIOD_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ATIME_EVT_PERIOD bitfields
 */
/* --- Register HW_ENET_MAC_ATIME_EVT_PERIOD, field ATIME_EVT_PERIOD */

#define BP_ENET_MAC_ATIME_EVT_PERIOD_ATIME_EVT_PERIOD      0
#define BM_ENET_MAC_ATIME_EVT_PERIOD_ATIME_EVT_PERIOD      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ATIME_EVT_PERIOD_ATIME_EVT_PERIOD(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_ATIME_EVT_PERIOD_ATIME_EVT_PERIOD(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_EVT_PERIOD_ATIME_EVT_PERIOD(x,v)   (HW_ENET_MAC_ATIME_EVT_PERIOD.B.ATIME_EVT_PERIOD = (v))
#endif



/*
 * HW_ENET_MAC_ATIME_CORR - ENET MAC IEEE1588 Correction counter wrap around value Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ATIME_CORR  : 31;
        unsigned RSRVD0      :  1;
    } B;
} hw_enet_mac_atime_corr_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ATIME_CORR register
 */
#define HW_ENET_MAC_ATIME_CORR_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000410)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ATIME_CORR(x)           (*(volatile hw_enet_mac_atime_corr_t *) HW_ENET_MAC_ATIME_CORR_ADDR(x))
#define HW_ENET_MAC_ATIME_CORR_RD(x)      (HW_ENET_MAC_ATIME_CORR(x).U)
#define HW_ENET_MAC_ATIME_CORR_WR(x,v)     (HW_ENET_MAC_ATIME_CORR(x).U = (v))
#define HW_ENET_MAC_ATIME_CORR_SET(x,v)    (HW_ENET_MAC_ATIME_CORR_WR(x,HW_ENET_MAC_ATIME_CORR_RD(x) |  (v)))
#define HW_ENET_MAC_ATIME_CORR_CLR(x,v)    (HW_ENET_MAC_ATIME_CORR_WR(x,HW_ENET_MAC_ATIME_CORR_RD(x) & ~(v)))
#define HW_ENET_MAC_ATIME_CORR_TOG(x,v)    (HW_ENET_MAC_ATIME_CORR_WR(x,HW_ENET_MAC_ATIME_CORR_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ATIME_CORR bitfields
 */
/* --- Register HW_ENET_MAC_ATIME_CORR, field RSRVD0 */

#define BP_ENET_MAC_ATIME_CORR_RSRVD0      31
#define BM_ENET_MAC_ATIME_CORR_RSRVD0      0x80000000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ATIME_CORR_RSRVD0(v)   ((((reg32_t) v) << 31) & BM_ENET_MAC_ATIME_CORR_RSRVD0)
#else
#define BF_ENET_MAC_ATIME_CORR_RSRVD0(v)   (((v) << 31) & BM_ENET_MAC_ATIME_CORR_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_ATIME_CORR, field ATIME_CORR */

#define BP_ENET_MAC_ATIME_CORR_ATIME_CORR      0
#define BM_ENET_MAC_ATIME_CORR_ATIME_CORR      0x7FFFFFFF

#define BF_ENET_MAC_ATIME_CORR_ATIME_CORR(v)   (((v) << 0) & BM_ENET_MAC_ATIME_CORR_ATIME_CORR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_CORR_ATIME_CORR(n,v)   BF_CS1n(ENET_MAC_ATIME_CORR, n,ATIME_CORR,v)
#endif



/*
 * HW_ENET_MAC_ATIME_INC - ENET MAC IEEE1588 Clock period of the timestamping clock (ts_clk) in nanoseconds and correction increment Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ATIME_INC       :  7;
        unsigned RSRVD1          :  1;
        unsigned ATIME_INC_CORR  :  7;
        unsigned RSRVD0          : 17;
    } B;
} hw_enet_mac_atime_inc_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_ATIME_INC register
 */
#define HW_ENET_MAC_ATIME_INC_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000414)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_ATIME_INC(x)           (*(volatile hw_enet_mac_atime_inc_t *) HW_ENET_MAC_ATIME_INC_ADDR(x))
#define HW_ENET_MAC_ATIME_INC_RD(x)      (HW_ENET_MAC_ATIME_INC(x).U)
#define HW_ENET_MAC_ATIME_INC_WR(x,v)     (HW_ENET_MAC_ATIME_INC(x).U = (v))
#define HW_ENET_MAC_ATIME_INC_SET(x,v)    (HW_ENET_MAC_ATIME_INC_WR(x,HW_ENET_MAC_ATIME_INC_RD(x) |  (v)))
#define HW_ENET_MAC_ATIME_INC_CLR(x,v)    (HW_ENET_MAC_ATIME_INC_WR(x,HW_ENET_MAC_ATIME_INC_RD(x) & ~(v)))
#define HW_ENET_MAC_ATIME_INC_TOG(x,v)    (HW_ENET_MAC_ATIME_INC_WR(x,HW_ENET_MAC_ATIME_INC_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_ATIME_INC bitfields
 */
/* --- Register HW_ENET_MAC_ATIME_INC, field RSRVD0 */

#define BP_ENET_MAC_ATIME_INC_RSRVD0      15
#define BM_ENET_MAC_ATIME_INC_RSRVD0      0xFFFF8000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_ATIME_INC_RSRVD0(v)   ((((reg32_t) v) << 15) & BM_ENET_MAC_ATIME_INC_RSRVD0)
#else
#define BF_ENET_MAC_ATIME_INC_RSRVD0(v)   (((v) << 15) & BM_ENET_MAC_ATIME_INC_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_ATIME_INC, field ATIME_INC_CORR */

#define BP_ENET_MAC_ATIME_INC_ATIME_INC_CORR      8
#define BM_ENET_MAC_ATIME_INC_ATIME_INC_CORR      0x00007F00

#define BF_ENET_MAC_ATIME_INC_ATIME_INC_CORR(v)   (((v) << 8) & BM_ENET_MAC_ATIME_INC_ATIME_INC_CORR)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_INC_ATIME_INC_CORR(n,v)   BF_CS1n(ENET_MAC_ATIME_INC, n,ATIME_INC_CORR,v)
#endif

/* --- Register HW_ENET_MAC_ATIME_INC, field RSRVD1 */

#define BP_ENET_MAC_ATIME_INC_RSRVD1      7
#define BM_ENET_MAC_ATIME_INC_RSRVD1      0x00000080

#define BF_ENET_MAC_ATIME_INC_RSRVD1(v)   (((v) << 7) & BM_ENET_MAC_ATIME_INC_RSRVD1)
/* --- Register HW_ENET_MAC_ATIME_INC, field ATIME_INC */

#define BP_ENET_MAC_ATIME_INC_ATIME_INC      0
#define BM_ENET_MAC_ATIME_INC_ATIME_INC      0x0000007F

#define BF_ENET_MAC_ATIME_INC_ATIME_INC(v)   (((v) << 0) & BM_ENET_MAC_ATIME_INC_ATIME_INC)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_ATIME_INC_ATIME_INC(n,v)   BF_CS1n(ENET_MAC_ATIME_INC, n,ATIME_INC,v)
#endif



/*
 * HW_ENET_MAC_TS_TIMESTAMP - ENET MAC IEEE1588 Timestamp of the last Frame Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned TS_TIMESTAMP  : 32;
    } B;
} hw_enet_mac_ts_timestamp_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_TS_TIMESTAMP register
 */
#define HW_ENET_MAC_TS_TIMESTAMP_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000418)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_TS_TIMESTAMP(x)           (*(volatile hw_enet_mac_ts_timestamp_t *) HW_ENET_MAC_TS_TIMESTAMP_ADDR(x))
#define HW_ENET_MAC_TS_TIMESTAMP_RD(x)      (HW_ENET_MAC_TS_TIMESTAMP(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_TS_TIMESTAMP bitfields
 */
/* --- Register HW_ENET_MAC_TS_TIMESTAMP, field TS_TIMESTAMP */

#define BP_ENET_MAC_TS_TIMESTAMP_TS_TIMESTAMP      0
#define BM_ENET_MAC_TS_TIMESTAMP_TS_TIMESTAMP      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_TS_TIMESTAMP_TS_TIMESTAMP(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_TS_TIMESTAMP_TS_TIMESTAMP(v)   (v)
#endif


/*
 * HW_ENET_MAC_SMAC_0_0 - ENET MAC Supplemental MAC ADDR(x)ess 0
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_0_0  : 32;
    } B;
} hw_enet_mac_smac_0_0_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_0_0 register
 */
#define HW_ENET_MAC_SMAC_0_0_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000500)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_0_0(x)           (*(volatile hw_enet_mac_smac_0_0_t *) HW_ENET_MAC_SMAC_0_0_ADDR(x))
#define HW_ENET_MAC_SMAC_0_0_RD(x)      (HW_ENET_MAC_SMAC_0_0(x).U)
#define HW_ENET_MAC_SMAC_0_0_WR(x,v)     (HW_ENET_MAC_SMAC_0_0(x).U = (v))
#define HW_ENET_MAC_SMAC_0_0_SET(x,v)    (HW_ENET_MAC_SMAC_0_0_WR(x,HW_ENET_MAC_SMAC_0_0_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_0_0_CLR(x,v)    (HW_ENET_MAC_SMAC_0_0_WR(x,HW_ENET_MAC_SMAC_0_0_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_0_0_TOG(x,v)    (HW_ENET_MAC_SMAC_0_0_WR(x,HW_ENET_MAC_SMAC_0_0_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_0_0 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_0_0, field SMAC_0_0 */

#define BP_ENET_MAC_SMAC_0_0_SMAC_0_0      0
#define BM_ENET_MAC_SMAC_0_0_SMAC_0_0      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_0_0_SMAC_0_0(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_0_0_SMAC_0_0(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_0_0_SMAC_0_0(x,v)   (HW_ENET_MAC_SMAC_0_0.B.SMAC_0_0 = (v))
#endif



/*
 * HW_ENET_MAC_SMAC_0_1 - ENET MAC Supplemental MAC ADDR(x)ess 0
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_0_1  : 32;
    } B;
} hw_enet_mac_smac_0_1_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_0_1 register
 */
#define HW_ENET_MAC_SMAC_0_1_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000504)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_0_1(x)           (*(volatile hw_enet_mac_smac_0_1_t *) HW_ENET_MAC_SMAC_0_1_ADDR(x))
#define HW_ENET_MAC_SMAC_0_1_RD(x)      (HW_ENET_MAC_SMAC_0_1(x).U)
#define HW_ENET_MAC_SMAC_0_1_WR(x,v)     (HW_ENET_MAC_SMAC_0_1(x).U = (v))
#define HW_ENET_MAC_SMAC_0_1_SET(x,v)    (HW_ENET_MAC_SMAC_0_1_WR(x,HW_ENET_MAC_SMAC_0_1_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_0_1_CLR(x,v)    (HW_ENET_MAC_SMAC_0_1_WR(x,HW_ENET_MAC_SMAC_0_1_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_0_1_TOG(x,v)    (HW_ENET_MAC_SMAC_0_1_WR(x,HW_ENET_MAC_SMAC_0_1_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_0_1 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_0_1, field SMAC_0_1 */

#define BP_ENET_MAC_SMAC_0_1_SMAC_0_1      0
#define BM_ENET_MAC_SMAC_0_1_SMAC_0_1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_0_1_SMAC_0_1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_0_1_SMAC_0_1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_0_1_SMAC_0_1(x,v)   (HW_ENET_MAC_SMAC_0_1.B.SMAC_0_1 = (v))
#endif



/*
 * HW_ENET_MAC_SMAC_1_0 - ENET MAC Supplemental MAC ADDR(x)ess 1
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_1_0  : 32;
    } B;
} hw_enet_mac_smac_1_0_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_1_0 register
 */
#define HW_ENET_MAC_SMAC_1_0_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000508)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_1_0(x)           (*(volatile hw_enet_mac_smac_1_0_t *) HW_ENET_MAC_SMAC_1_0_ADDR(x))
#define HW_ENET_MAC_SMAC_1_0_RD(x)      (HW_ENET_MAC_SMAC_1_0(x).U)
#define HW_ENET_MAC_SMAC_1_0_WR(x,v)     (HW_ENET_MAC_SMAC_1_0(x).U = (v))
#define HW_ENET_MAC_SMAC_1_0_SET(x,v)    (HW_ENET_MAC_SMAC_1_0_WR(x,HW_ENET_MAC_SMAC_1_0_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_1_0_CLR(x,v)    (HW_ENET_MAC_SMAC_1_0_WR(x,HW_ENET_MAC_SMAC_1_0_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_1_0_TOG(x,v)    (HW_ENET_MAC_SMAC_1_0_WR(x,HW_ENET_MAC_SMAC_1_0_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_1_0 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_1_0, field SMAC_1_0 */

#define BP_ENET_MAC_SMAC_1_0_SMAC_1_0      0
#define BM_ENET_MAC_SMAC_1_0_SMAC_1_0      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_1_0_SMAC_1_0(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_1_0_SMAC_1_0(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_1_0_SMAC_1_0(x,v)   (HW_ENET_MAC_SMAC_1_0.B.SMAC_1_0 = (v))
#endif



/*
 * HW_ENET_MAC_SMAC_1_1 - ENET MAC Supplemental MAC ADDR(x)ess 1
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_1_1  : 32;
    } B;
} hw_enet_mac_smac_1_1_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_1_1 register
 */
#define HW_ENET_MAC_SMAC_1_1_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000050c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_1_1(x)           (*(volatile hw_enet_mac_smac_1_1_t *) HW_ENET_MAC_SMAC_1_1_ADDR(x))
#define HW_ENET_MAC_SMAC_1_1_RD(x)      (HW_ENET_MAC_SMAC_1_1(x).U)
#define HW_ENET_MAC_SMAC_1_1_WR(x,v)     (HW_ENET_MAC_SMAC_1_1(x).U = (v))
#define HW_ENET_MAC_SMAC_1_1_SET(x,v)    (HW_ENET_MAC_SMAC_1_1_WR(x,HW_ENET_MAC_SMAC_1_1_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_1_1_CLR(x,v)    (HW_ENET_MAC_SMAC_1_1_WR(x,HW_ENET_MAC_SMAC_1_1_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_1_1_TOG(x,v)    (HW_ENET_MAC_SMAC_1_1_WR(x,HW_ENET_MAC_SMAC_1_1_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_1_1 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_1_1, field SMAC_1_1 */

#define BP_ENET_MAC_SMAC_1_1_SMAC_1_1      0
#define BM_ENET_MAC_SMAC_1_1_SMAC_1_1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_1_1_SMAC_1_1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_1_1_SMAC_1_1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_1_1_SMAC_1_1(x,v)   (HW_ENET_MAC_SMAC_1_1.B.SMAC_1_1 = (v))
#endif



/*
 * HW_ENET_MAC_SMAC_2_0 - ENET MAC Supplemental MAC ADDR(x)ess 2
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_2_0  : 32;
    } B;
} hw_enet_mac_smac_2_0_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_2_0 register
 */
#define HW_ENET_MAC_SMAC_2_0_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000510)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_2_0(x)           (*(volatile hw_enet_mac_smac_2_0_t *) HW_ENET_MAC_SMAC_2_0_ADDR(x))
#define HW_ENET_MAC_SMAC_2_0_RD(x)      (HW_ENET_MAC_SMAC_2_0(x).U)
#define HW_ENET_MAC_SMAC_2_0_WR(x,v)     (HW_ENET_MAC_SMAC_2_0(x).U = (v))
#define HW_ENET_MAC_SMAC_2_0_SET(x,v)    (HW_ENET_MAC_SMAC_2_0_WR(x,HW_ENET_MAC_SMAC_2_0_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_2_0_CLR(x,v)    (HW_ENET_MAC_SMAC_2_0_WR(x,HW_ENET_MAC_SMAC_2_0_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_2_0_TOG(x,v)    (HW_ENET_MAC_SMAC_2_0_WR(x,HW_ENET_MAC_SMAC_2_0_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_2_0 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_2_0, field SMAC_2_0 */

#define BP_ENET_MAC_SMAC_2_0_SMAC_2_0      0
#define BM_ENET_MAC_SMAC_2_0_SMAC_2_0      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_2_0_SMAC_2_0(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_2_0_SMAC_2_0(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_2_0_SMAC_2_0(x,v)   (HW_ENET_MAC_SMAC_2_0.B.SMAC_2_0 = (v))
#endif



/*
 * HW_ENET_MAC_SMAC_2_1 - ENET MAC Supplemental MAC ADDR(x)ess 2
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_2_1  : 32;
    } B;
} hw_enet_mac_smac_2_1_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_2_1 register
 */
#define HW_ENET_MAC_SMAC_2_1_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000514)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_2_1(x)           (*(volatile hw_enet_mac_smac_2_1_t *) HW_ENET_MAC_SMAC_2_1_ADDR(x))
#define HW_ENET_MAC_SMAC_2_1_RD(x)      (HW_ENET_MAC_SMAC_2_1(x).U)
#define HW_ENET_MAC_SMAC_2_1_WR(x,v)     (HW_ENET_MAC_SMAC_2_1(x).U = (v))
#define HW_ENET_MAC_SMAC_2_1_SET(x,v)    (HW_ENET_MAC_SMAC_2_1_WR(x,HW_ENET_MAC_SMAC_2_1_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_2_1_CLR(x,v)    (HW_ENET_MAC_SMAC_2_1_WR(x,HW_ENET_MAC_SMAC_2_1_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_2_1_TOG(x,v)    (HW_ENET_MAC_SMAC_2_1_WR(x,HW_ENET_MAC_SMAC_2_1_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_2_1 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_2_1, field SMAC_2_1 */

#define BP_ENET_MAC_SMAC_2_1_SMAC_2_1      0
#define BM_ENET_MAC_SMAC_2_1_SMAC_2_1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_2_1_SMAC_2_1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_2_1_SMAC_2_1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_2_1_SMAC_2_1(x,v)   (HW_ENET_MAC_SMAC_2_1.B.SMAC_2_1 = (v))
#endif



/*
 * HW_ENET_MAC_SMAC_3_0 - ENET MAC Supplemental MAC ADDR(x)ess 3
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_3_0  : 32;
    } B;
} hw_enet_mac_smac_3_0_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_3_0 register
 */
#define HW_ENET_MAC_SMAC_3_0_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000518)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_3_0(x)           (*(volatile hw_enet_mac_smac_3_0_t *) HW_ENET_MAC_SMAC_3_0_ADDR(x))
#define HW_ENET_MAC_SMAC_3_0_RD(x)      (HW_ENET_MAC_SMAC_3_0(x).U)
#define HW_ENET_MAC_SMAC_3_0_WR(x,v)     (HW_ENET_MAC_SMAC_3_0(x).U = (v))
#define HW_ENET_MAC_SMAC_3_0_SET(x,v)    (HW_ENET_MAC_SMAC_3_0_WR(x,HW_ENET_MAC_SMAC_3_0_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_3_0_CLR(x,v)    (HW_ENET_MAC_SMAC_3_0_WR(x,HW_ENET_MAC_SMAC_3_0_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_3_0_TOG(x,v)    (HW_ENET_MAC_SMAC_3_0_WR(x,HW_ENET_MAC_SMAC_3_0_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_3_0 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_3_0, field SMAC_3_0 */

#define BP_ENET_MAC_SMAC_3_0_SMAC_3_0      0
#define BM_ENET_MAC_SMAC_3_0_SMAC_3_0      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_3_0_SMAC_3_0(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_3_0_SMAC_3_0(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_3_0_SMAC_3_0(x,v)   (HW_ENET_MAC_SMAC_3_0.B.SMAC_3_0 = (v))
#endif



/*
 * HW_ENET_MAC_SMAC_3_1 - ENET MAC Supplemental MAC ADDR(x)ess 3
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned SMAC_3_1  : 32;
    } B;
} hw_enet_mac_smac_3_1_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_SMAC_3_1 register
 */
#define HW_ENET_MAC_SMAC_3_1_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000051c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_SMAC_3_1(x)           (*(volatile hw_enet_mac_smac_3_1_t *) HW_ENET_MAC_SMAC_3_1_ADDR(x))
#define HW_ENET_MAC_SMAC_3_1_RD(x)      (HW_ENET_MAC_SMAC_3_1(x).U)
#define HW_ENET_MAC_SMAC_3_1_WR(x,v)     (HW_ENET_MAC_SMAC_3_1(x).U = (v))
#define HW_ENET_MAC_SMAC_3_1_SET(x,v)    (HW_ENET_MAC_SMAC_3_1_WR(x,HW_ENET_MAC_SMAC_3_1_RD(x) |  (v)))
#define HW_ENET_MAC_SMAC_3_1_CLR(x,v)    (HW_ENET_MAC_SMAC_3_1_WR(x,HW_ENET_MAC_SMAC_3_1_RD(x) & ~(v)))
#define HW_ENET_MAC_SMAC_3_1_TOG(x,v)    (HW_ENET_MAC_SMAC_3_1_WR(x,HW_ENET_MAC_SMAC_3_1_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_SMAC_3_1 bitfields
 */
/* --- Register HW_ENET_MAC_SMAC_3_1, field SMAC_3_1 */

#define BP_ENET_MAC_SMAC_3_1_SMAC_3_1      0
#define BM_ENET_MAC_SMAC_3_1_SMAC_3_1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_SMAC_3_1_SMAC_3_1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_SMAC_3_1_SMAC_3_1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_SMAC_3_1_SMAC_3_1(x,v)   (HW_ENET_MAC_SMAC_3_1.B.SMAC_3_1 = (v))
#endif



/*
 * HW_ENET_MAC_COMP_REG_0 - ENET MAC Compare register 0
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned COMP_REG_0  : 32;
    } B;
} hw_enet_mac_comp_reg_0_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_COMP_REG_0 register
 */
#define HW_ENET_MAC_COMP_REG_0_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000600)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_COMP_REG_0(x)           (*(volatile hw_enet_mac_comp_reg_0_t *) HW_ENET_MAC_COMP_REG_0_ADDR(x))
#define HW_ENET_MAC_COMP_REG_0_RD(x)      (HW_ENET_MAC_COMP_REG_0(x).U)
#define HW_ENET_MAC_COMP_REG_0_WR(x,v)     (HW_ENET_MAC_COMP_REG_0(x).U = (v))
#define HW_ENET_MAC_COMP_REG_0_SET(x,v)    (HW_ENET_MAC_COMP_REG_0_WR(x,HW_ENET_MAC_COMP_REG_0_RD(x) |  (v)))
#define HW_ENET_MAC_COMP_REG_0_CLR(x,v)    (HW_ENET_MAC_COMP_REG_0_WR(x,HW_ENET_MAC_COMP_REG_0_RD(x) & ~(v)))
#define HW_ENET_MAC_COMP_REG_0_TOG(x,v)    (HW_ENET_MAC_COMP_REG_0_WR(x,HW_ENET_MAC_COMP_REG_0_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_COMP_REG_0 bitfields
 */
/* --- Register HW_ENET_MAC_COMP_REG_0, field COMP_REG_0 */

#define BP_ENET_MAC_COMP_REG_0_COMP_REG_0      0
#define BM_ENET_MAC_COMP_REG_0_COMP_REG_0      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_COMP_REG_0_COMP_REG_0(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_COMP_REG_0_COMP_REG_0(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_COMP_REG_0_COMP_REG_0(x,v)   (HW_ENET_MAC_COMP_REG_0.B.COMP_REG_0 = (v))
#endif



/*
 * HW_ENET_MAC_COMP_REG_1 - ENET MAC Compare register 1
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned COMP_REG_1  : 32;
    } B;
} hw_enet_mac_comp_reg_1_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_COMP_REG_1 register
 */
#define HW_ENET_MAC_COMP_REG_1_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000604)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_COMP_REG_1(x)           (*(volatile hw_enet_mac_comp_reg_1_t *) HW_ENET_MAC_COMP_REG_1_ADDR(x))
#define HW_ENET_MAC_COMP_REG_1_RD(x)      (HW_ENET_MAC_COMP_REG_1(x).U)
#define HW_ENET_MAC_COMP_REG_1_WR(x,v)     (HW_ENET_MAC_COMP_REG_1(x).U = (v))
#define HW_ENET_MAC_COMP_REG_1_SET(x,v)    (HW_ENET_MAC_COMP_REG_1_WR(x,HW_ENET_MAC_COMP_REG_1_RD(x) |  (v)))
#define HW_ENET_MAC_COMP_REG_1_CLR(x,v)    (HW_ENET_MAC_COMP_REG_1_WR(x,HW_ENET_MAC_COMP_REG_1_RD(x) & ~(v)))
#define HW_ENET_MAC_COMP_REG_1_TOG(x,v)    (HW_ENET_MAC_COMP_REG_1_WR(x,HW_ENET_MAC_COMP_REG_1_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_COMP_REG_1 bitfields
 */
/* --- Register HW_ENET_MAC_COMP_REG_1, field COMP_REG_1 */

#define BP_ENET_MAC_COMP_REG_1_COMP_REG_1      0
#define BM_ENET_MAC_COMP_REG_1_COMP_REG_1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_COMP_REG_1_COMP_REG_1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_COMP_REG_1_COMP_REG_1(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_COMP_REG_1_COMP_REG_1(x,v)   (HW_ENET_MAC_COMP_REG_1.B.COMP_REG_1 = (v))
#endif



/*
 * HW_ENET_MAC_COMP_REG_2 - ENET MAC Compare register 2
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned COMP_REG_2  : 32;
    } B;
} hw_enet_mac_comp_reg_2_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_COMP_REG_2 register
 */
#define HW_ENET_MAC_COMP_REG_2_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000608)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_COMP_REG_2(x)           (*(volatile hw_enet_mac_comp_reg_2_t *) HW_ENET_MAC_COMP_REG_2_ADDR(x))
#define HW_ENET_MAC_COMP_REG_2_RD(x)      (HW_ENET_MAC_COMP_REG_2(x).U)
#define HW_ENET_MAC_COMP_REG_2_WR(x,v)     (HW_ENET_MAC_COMP_REG_2(x).U = (v))
#define HW_ENET_MAC_COMP_REG_2_SET(x,v)    (HW_ENET_MAC_COMP_REG_2_WR(x,HW_ENET_MAC_COMP_REG_2_RD(x) |  (v)))
#define HW_ENET_MAC_COMP_REG_2_CLR(x,v)    (HW_ENET_MAC_COMP_REG_2_WR(x,HW_ENET_MAC_COMP_REG_2_RD(x) & ~(v)))
#define HW_ENET_MAC_COMP_REG_2_TOG(x,v)    (HW_ENET_MAC_COMP_REG_2_WR(x,HW_ENET_MAC_COMP_REG_2_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_COMP_REG_2 bitfields
 */
/* --- Register HW_ENET_MAC_COMP_REG_2, field COMP_REG_2 */

#define BP_ENET_MAC_COMP_REG_2_COMP_REG_2      0
#define BM_ENET_MAC_COMP_REG_2_COMP_REG_2      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_COMP_REG_2_COMP_REG_2(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_COMP_REG_2_COMP_REG_2(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_COMP_REG_2_COMP_REG_2(x,v)   (HW_ENET_MAC_COMP_REG_2.B.COMP_REG_2 = (v))
#endif



/*
 * HW_ENET_MAC_COMP_REG_3 - ENET MAC Compare register 3
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned COMP_REG_3  : 32;
    } B;
} hw_enet_mac_comp_reg_3_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_COMP_REG_3 register
 */
#define HW_ENET_MAC_COMP_REG_3_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000060c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_COMP_REG_3(x)           (*(volatile hw_enet_mac_comp_reg_3_t *) HW_ENET_MAC_COMP_REG_3_ADDR(x))
#define HW_ENET_MAC_COMP_REG_3_RD(x)      (HW_ENET_MAC_COMP_REG_3(x).U)
#define HW_ENET_MAC_COMP_REG_3_WR(x,v)     (HW_ENET_MAC_COMP_REG_3(x).U = (v))
#define HW_ENET_MAC_COMP_REG_3_SET(x,v)    (HW_ENET_MAC_COMP_REG_3_WR(x,HW_ENET_MAC_COMP_REG_3_RD(x) |  (v)))
#define HW_ENET_MAC_COMP_REG_3_CLR(x,v)    (HW_ENET_MAC_COMP_REG_3_WR(x,HW_ENET_MAC_COMP_REG_3_RD(x) & ~(v)))
#define HW_ENET_MAC_COMP_REG_3_TOG(x,v)    (HW_ENET_MAC_COMP_REG_3_WR(x,HW_ENET_MAC_COMP_REG_3_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_COMP_REG_3 bitfields
 */
/* --- Register HW_ENET_MAC_COMP_REG_3, field COMP_REG_3 */

#define BP_ENET_MAC_COMP_REG_3_COMP_REG_3      0
#define BM_ENET_MAC_COMP_REG_3_COMP_REG_3      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_COMP_REG_3_COMP_REG_3(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_COMP_REG_3_COMP_REG_3(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_COMP_REG_3_COMP_REG_3(x,v)   (HW_ENET_MAC_COMP_REG_3.B.COMP_REG_3 = (v))
#endif



/*
 * HW_ENET_MAC_CAPT_REG_0 - ENET MAC Capture register 0
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CAPT_REG_0  : 32;
    } B;
} hw_enet_mac_capt_reg_0_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_CAPT_REG_0 register
 */
#define HW_ENET_MAC_CAPT_REG_0_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000640)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_CAPT_REG_0(x)           (*(volatile hw_enet_mac_capt_reg_0_t *) HW_ENET_MAC_CAPT_REG_0_ADDR(x))
#define HW_ENET_MAC_CAPT_REG_0_RD(x)      (HW_ENET_MAC_CAPT_REG_0(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_CAPT_REG_0 bitfields
 */
/* --- Register HW_ENET_MAC_CAPT_REG_0, field CAPT_REG_0 */

#define BP_ENET_MAC_CAPT_REG_0_CAPT_REG_0      0
#define BM_ENET_MAC_CAPT_REG_0_CAPT_REG_0      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_CAPT_REG_0_CAPT_REG_0(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_CAPT_REG_0_CAPT_REG_0(v)   (v)
#endif


/*
 * HW_ENET_MAC_CAPT_REG_1 - ENET MAC Capture register 1
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CAPT_REG_1  : 32;
    } B;
} hw_enet_mac_capt_reg_1_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_CAPT_REG_1 register
 */
#define HW_ENET_MAC_CAPT_REG_1_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000644)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_CAPT_REG_1(x)           (*(volatile hw_enet_mac_capt_reg_1_t *) HW_ENET_MAC_CAPT_REG_1_ADDR(x))
#define HW_ENET_MAC_CAPT_REG_1_RD(x)        (HW_ENET_MAC_CAPT_REG_1(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_CAPT_REG_1 bitfields
 */
/* --- Register HW_ENET_MAC_CAPT_REG_1, field CAPT_REG_1 */

#define BP_ENET_MAC_CAPT_REG_1_CAPT_REG_1      0
#define BM_ENET_MAC_CAPT_REG_1_CAPT_REG_1      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_CAPT_REG_1_CAPT_REG_1(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_CAPT_REG_1_CAPT_REG_1(v)   (v)
#endif


/*
 * HW_ENET_MAC_CAPT_REG_2 - ENET MAC Capture register 2
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CAPT_REG_2  : 32;
    } B;
} hw_enet_mac_capt_reg_2_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_CAPT_REG_2 register
 */
#define HW_ENET_MAC_CAPT_REG_2_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000648)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_CAPT_REG_2(x)           (*(volatile hw_enet_mac_capt_reg_2_t *) HW_ENET_MAC_CAPT_REG_2_ADDR(x))
#define HW_ENET_MAC_CAPT_REG_2_RD(x)        (HW_ENET_MAC_CAPT_REG_2(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_CAPT_REG_2 bitfields
 */
/* --- Register HW_ENET_MAC_CAPT_REG_2, field CAPT_REG_2 */

#define BP_ENET_MAC_CAPT_REG_2_CAPT_REG_2      0
#define BM_ENET_MAC_CAPT_REG_2_CAPT_REG_2      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_CAPT_REG_2_CAPT_REG_2(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_CAPT_REG_2_CAPT_REG_2(v)   (v)
#endif


/*
 * HW_ENET_MAC_CAPT_REG_3 - ENET MAC Capture register 3
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CAPT_REG_3  : 32;
    } B;
} hw_enet_mac_capt_reg_3_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_CAPT_REG_3 register
 */
#define HW_ENET_MAC_CAPT_REG_3_ADDR(x)      (REGS_ENET_BASE(x) + 0x0000064c)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_CAPT_REG_3(x)           (*(volatile hw_enet_mac_capt_reg_3_t *) HW_ENET_MAC_CAPT_REG_3_ADDR(x))
#define HW_ENET_MAC_CAPT_REG_3_RD(x)        (HW_ENET_MAC_CAPT_REG_3(x).U)
#endif


/*
 * constants & macros for individual HW_ENET_MAC_CAPT_REG_3 bitfields
 */
/* --- Register HW_ENET_MAC_CAPT_REG_3, field CAPT_REG_3 */

#define BP_ENET_MAC_CAPT_REG_3_CAPT_REG_3      0
#define BM_ENET_MAC_CAPT_REG_3_CAPT_REG_3      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_CAPT_REG_3_CAPT_REG_3(v)   ((reg32_t) v)
#else
#define BF_ENET_MAC_CAPT_REG_3_CAPT_REG_3(v)   (v)
#endif


/*
 * HW_ENET_MAC_CCB_INT - ENET MAC IEEE1588 Interrupt register.
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CAPTURE0  :  1;
        unsigned CAPTURE1  :  1;
        unsigned CAPTURE2  :  1;
        unsigned CAPTURE3  :  1;
        unsigned RSRVD1    : 12;
        unsigned COMPARE0  :  1;
        unsigned COMPARE1  :  1;
        unsigned COMPARE2  :  1;
        unsigned COMPARE3  :  1;
        unsigned RSRVD0    : 12;
    } B;
} hw_enet_mac_ccb_int_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_CCB_INT register
 */
#define HW_ENET_MAC_CCB_INT_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000680)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_CCB_INT(x)           (*(volatile hw_enet_mac_ccb_int_t *) HW_ENET_MAC_CCB_INT_ADDR(x))
#define HW_ENET_MAC_CCB_INT_RD(x)      (HW_ENET_MAC_CCB_INT(x).U)
#define HW_ENET_MAC_CCB_INT_WR(x,v)     (HW_ENET_MAC_CCB_INT(x).U = (v))
#define HW_ENET_MAC_CCB_INT_SET(x,v)    (HW_ENET_MAC_CCB_INT_WR(x,HW_ENET_MAC_CCB_INT_RD(x) |  (v)))
#define HW_ENET_MAC_CCB_INT_CLR(x,v)    (HW_ENET_MAC_CCB_INT_WR(x,HW_ENET_MAC_CCB_INT_RD(x) & ~(v)))
#define HW_ENET_MAC_CCB_INT_TOG(x,v)    (HW_ENET_MAC_CCB_INT_WR(x,HW_ENET_MAC_CCB_INT_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_CCB_INT bitfields
 */
/* --- Register HW_ENET_MAC_CCB_INT, field RSRVD0 */

#define BP_ENET_MAC_CCB_INT_RSRVD0      20
#define BM_ENET_MAC_CCB_INT_RSRVD0      0xFFF00000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_CCB_INT_RSRVD0(v)   ((((reg32_t) v) << 20) & BM_ENET_MAC_CCB_INT_RSRVD0)
#else
#define BF_ENET_MAC_CCB_INT_RSRVD0(v)   (((v) << 20) & BM_ENET_MAC_CCB_INT_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_CCB_INT, field COMPARE3 */

#define BP_ENET_MAC_CCB_INT_COMPARE3      19
#define BM_ENET_MAC_CCB_INT_COMPARE3      0x00080000

#define BF_ENET_MAC_CCB_INT_COMPARE3(v)   (((v) << 19) & BM_ENET_MAC_CCB_INT_COMPARE3)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_COMPARE3(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,COMPARE3,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT, field COMPARE2 */

#define BP_ENET_MAC_CCB_INT_COMPARE2      18
#define BM_ENET_MAC_CCB_INT_COMPARE2      0x00040000

#define BF_ENET_MAC_CCB_INT_COMPARE2(v)   (((v) << 18) & BM_ENET_MAC_CCB_INT_COMPARE2)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_COMPARE2(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,COMPARE2,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT, field COMPARE1 */

#define BP_ENET_MAC_CCB_INT_COMPARE1      17
#define BM_ENET_MAC_CCB_INT_COMPARE1      0x00020000

#define BF_ENET_MAC_CCB_INT_COMPARE1(v)   (((v) << 17) & BM_ENET_MAC_CCB_INT_COMPARE1)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_COMPARE1(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,COMPARE1,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT, field COMPARE0 */

#define BP_ENET_MAC_CCB_INT_COMPARE0      16
#define BM_ENET_MAC_CCB_INT_COMPARE0      0x00010000

#define BF_ENET_MAC_CCB_INT_COMPARE0(v)   (((v) << 16) & BM_ENET_MAC_CCB_INT_COMPARE0)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_COMPARE0(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,COMPARE0,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT, field RSRVD1 */

#define BP_ENET_MAC_CCB_INT_RSRVD1      4
#define BM_ENET_MAC_CCB_INT_RSRVD1      0x0000FFF0

#define BF_ENET_MAC_CCB_INT_RSRVD1(v)   (((v) << 4) & BM_ENET_MAC_CCB_INT_RSRVD1)
/* --- Register HW_ENET_MAC_CCB_INT, field CAPTURE3 */

#define BP_ENET_MAC_CCB_INT_CAPTURE3      3
#define BM_ENET_MAC_CCB_INT_CAPTURE3      0x00000008

#define BF_ENET_MAC_CCB_INT_CAPTURE3(v)   (((v) << 3) & BM_ENET_MAC_CCB_INT_CAPTURE3)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_CAPTURE3(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,CAPTURE3,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT, field CAPTURE2 */

#define BP_ENET_MAC_CCB_INT_CAPTURE2      2
#define BM_ENET_MAC_CCB_INT_CAPTURE2      0x00000004

#define BF_ENET_MAC_CCB_INT_CAPTURE2(v)   (((v) << 2) & BM_ENET_MAC_CCB_INT_CAPTURE2)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_CAPTURE2(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,CAPTURE2,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT, field CAPTURE1 */

#define BP_ENET_MAC_CCB_INT_CAPTURE1      1
#define BM_ENET_MAC_CCB_INT_CAPTURE1      0x00000002

#define BF_ENET_MAC_CCB_INT_CAPTURE1(v)   (((v) << 1) & BM_ENET_MAC_CCB_INT_CAPTURE1)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_CAPTURE1(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,CAPTURE1,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT, field CAPTURE0 */

#define BP_ENET_MAC_CCB_INT_CAPTURE0      0
#define BM_ENET_MAC_CCB_INT_CAPTURE0      0x00000001

#define BF_ENET_MAC_CCB_INT_CAPTURE0(v)   (((v) << 0) & BM_ENET_MAC_CCB_INT_CAPTURE0)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_CAPTURE0(n,v)   BF_CS1n(ENET_MAC_CCB_INT, n,CAPTURE0,v)
#endif


/*
 * HW_ENET_MAC_CCB_INT_MASK - ENET MAC IEEE1588 Interrupt enable mask register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CAPTURE0  :  1;
        unsigned CAPTURE1  :  1;
        unsigned CAPTURE2  :  1;
        unsigned CAPTURE3  :  1;
        unsigned RSRVD1    : 12;
        unsigned COMPARE0  :  1;
        unsigned COMPARE1  :  1;
        unsigned COMPARE2  :  1;
        unsigned COMPARE3  :  1;
        unsigned RSRVD0    : 12;
    } B;
} hw_enet_mac_ccb_int_mask_t;
#endif

/*
 * constants & macros for entire HW_ENET_MAC_CCB_INT_MASK register
 */
#define HW_ENET_MAC_CCB_INT_MASK_ADDR(x)      (REGS_ENET_BASE(x) + 0x00000684)

#ifndef __LANGUAGE_ASM__
#define HW_ENET_MAC_CCB_INT_MASK(x)           (*(volatile hw_enet_mac_ccb_int_mask_t *) HW_ENET_MAC_CCB_INT_MASK_ADDR(x))
#define HW_ENET_MAC_CCB_INT_MASK_RD(x)      (HW_ENET_MAC_CCB_INT_MASK(x).U)
#define HW_ENET_MAC_CCB_INT_MASK_WR(x,v)     (HW_ENET_MAC_CCB_INT_MASK(x).U = (v))
#define HW_ENET_MAC_CCB_INT_MASK_SET(x,v)    (HW_ENET_MAC_CCB_INT_MASK_WR(x,HW_ENET_MAC_CCB_INT_MASK_RD(x) |  (v)))
#define HW_ENET_MAC_CCB_INT_MASK_CLR(x,v)    (HW_ENET_MAC_CCB_INT_MASK_WR(x,HW_ENET_MAC_CCB_INT_MASK_RD(x) & ~(v)))
#define HW_ENET_MAC_CCB_INT_MASK_TOG(x,v)    (HW_ENET_MAC_CCB_INT_MASK_WR(x,HW_ENET_MAC_CCB_INT_MASK_RD(x) ^  (v)))
#endif


/*
 * constants & macros for individual HW_ENET_MAC_CCB_INT_MASK bitfields
 */
/* --- Register HW_ENET_MAC_CCB_INT_MASK, field RSRVD0 */

#define BP_ENET_MAC_CCB_INT_MASK_RSRVD0      20
#define BM_ENET_MAC_CCB_INT_MASK_RSRVD0      0xFFF00000

#ifndef __LANGUAGE_ASM__
#define BF_ENET_MAC_CCB_INT_MASK_RSRVD0(v)   ((((reg32_t) v) << 20) & BM_ENET_MAC_CCB_INT_MASK_RSRVD0)
#else
#define BF_ENET_MAC_CCB_INT_MASK_RSRVD0(v)   (((v) << 20) & BM_ENET_MAC_CCB_INT_MASK_RSRVD0)
#endif
/* --- Register HW_ENET_MAC_CCB_INT_MASK, field COMPARE3 */

#define BP_ENET_MAC_CCB_INT_MASK_COMPARE3      19
#define BM_ENET_MAC_CCB_INT_MASK_COMPARE3      0x00080000

#define BF_ENET_MAC_CCB_INT_MASK_COMPARE3(v)   (((v) << 19) & BM_ENET_MAC_CCB_INT_MASK_COMPARE3)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_COMPARE3(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,COMPARE3,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT_MASK, field COMPARE2 */

#define BP_ENET_MAC_CCB_INT_MASK_COMPARE2      18
#define BM_ENET_MAC_CCB_INT_MASK_COMPARE2      0x00040000

#define BF_ENET_MAC_CCB_INT_MASK_COMPARE2(v)   (((v) << 18) & BM_ENET_MAC_CCB_INT_MASK_COMPARE2)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_COMPARE2(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,COMPARE2,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT_MASK, field COMPARE1 */

#define BP_ENET_MAC_CCB_INT_MASK_COMPARE1      17
#define BM_ENET_MAC_CCB_INT_MASK_COMPARE1      0x00020000

#define BF_ENET_MAC_CCB_INT_MASK_COMPARE1(v)   (((v) << 17) & BM_ENET_MAC_CCB_INT_MASK_COMPARE1)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_COMPARE1(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,COMPARE1,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT_MASK, field COMPARE0 */

#define BP_ENET_MAC_CCB_INT_MASK_COMPARE0      16
#define BM_ENET_MAC_CCB_INT_MASK_COMPARE0      0x00010000

#define BF_ENET_MAC_CCB_INT_MASK_COMPARE0(v)   (((v) << 16) & BM_ENET_MAC_CCB_INT_MASK_COMPARE0)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_COMPARE0(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,COMPARE0,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT_MASK, field RSRVD1 */

#define BP_ENET_MAC_CCB_INT_MASK_RSRVD1      4
#define BM_ENET_MAC_CCB_INT_MASK_RSRVD1      0x0000FFF0

#define BF_ENET_MAC_CCB_INT_MASK_RSRVD1(v)   (((v) << 4) & BM_ENET_MAC_CCB_INT_MASK_RSRVD1)
/* --- Register HW_ENET_MAC_CCB_INT_MASK, field CAPTURE3 */

#define BP_ENET_MAC_CCB_INT_MASK_CAPTURE3      3
#define BM_ENET_MAC_CCB_INT_MASK_CAPTURE3      0x00000008

#define BF_ENET_MAC_CCB_INT_MASK_CAPTURE3(v)   (((v) << 3) & BM_ENET_MAC_CCB_INT_MASK_CAPTURE3)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_CAPTURE3(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,CAPTURE3,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT_MASK, field CAPTURE2 */

#define BP_ENET_MAC_CCB_INT_MASK_CAPTURE2      2
#define BM_ENET_MAC_CCB_INT_MASK_CAPTURE2      0x00000004

#define BF_ENET_MAC_CCB_INT_MASK_CAPTURE2(v)   (((v) << 2) & BM_ENET_MAC_CCB_INT_MASK_CAPTURE2)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_CAPTURE2(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,CAPTURE2,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT_MASK, field CAPTURE1 */

#define BP_ENET_MAC_CCB_INT_MASK_CAPTURE1      1
#define BM_ENET_MAC_CCB_INT_MASK_CAPTURE1      0x00000002

#define BF_ENET_MAC_CCB_INT_MASK_CAPTURE1(v)   (((v) << 1) & BM_ENET_MAC_CCB_INT_MASK_CAPTURE1)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_CAPTURE1(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,CAPTURE1,v)
#endif

/* --- Register HW_ENET_MAC_CCB_INT_MASK, field CAPTURE0 */

#define BP_ENET_MAC_CCB_INT_MASK_CAPTURE0      0
#define BM_ENET_MAC_CCB_INT_MASK_CAPTURE0      0x00000001

#define BF_ENET_MAC_CCB_INT_MASK_CAPTURE0(v)   (((v) << 0) & BM_ENET_MAC_CCB_INT_MASK_CAPTURE0)
#ifndef __LANGUAGE_ASM__
#define BW_ENET_MAC_CCB_INT_MASK_CAPTURE0(n,v)   BF_CS1n(ENET_MAC_CCB_INT_MASK, n,CAPTURE0,v)
#endif

#endif /* _ENET_H */

////////////////////////////////////////////////////////////////////////////////
