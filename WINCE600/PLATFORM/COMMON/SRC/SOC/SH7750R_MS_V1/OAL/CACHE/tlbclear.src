;
; Copyright (c) Microsoft Corporation.  All rights reserved.
;
;
; Use of this sample source code is subject to the terms of the Microsoft
; license agreement under which you licensed this sample source code. If
; you did not accept the terms of the license agreement, you are not
; authorized to use this sample source code. For the terms of the license,
; please see the license agreement between you and Microsoft or, if applicable,
; see the LICENSE.RTF on your install media or the root of your tools installation.
; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
;
    .include "kxshx.h"
    .include "shx.inc"

    .align 4

; MMU control register
CCN_MMUCR_OFFSET        .equ    h'0010      ; MMU control register offset
CCN_MMUCR               .equ    (CCN_REGBASE + CCN_MMUCR_OFFSET)    ; MMU control register

; MMUCR values
TLB_ENABLE              .equ    h'0001      ; enable TLB
TLB_FLUSH               .equ    h'0004      ; flush TLB


;-----------------------------------------------------------------------------
; Routine Description:
;    Flush and invalidate the entire unified TLB.
;
; Syntax:
;   void SH4ClearTLB(void);
;
; Arguments:
;   -- none --
;
; Return Value:
;   -- none --
;-----------------------------------------------------------------------------

    LEAF_ENTRY _SH4ClearTLB
    mov     #h'A0000000, r2     ; (r2) = un-cached, un-mapped region base
    mov.l   TLB1, r1
    or      r2, r1              ; (r1) = un-cached destination
    jmp     @r1                 ; jump to un-cached region
    nop

    ; SH4 cpu architecture requires when modifying UTLB/ITLB from P2 area (un-cached),
    ; at least 8 instructions must be in between before issuing a branch
    ; to U0/P0/P1/P3 area.
    
    .align 4
TLB1:    .data.l TLB2
TLB2:
    mov     #CCN_MMUCR, r1              ; r1 = MMUCR
    mov     #(TLB_ENABLE+TLB_FLUSH), r0 ; r0 = TLB Flush and Enable
    mov.l   r0, @r1                     ; flush TLB

    ; Wait for 7 NOPs after changing MMUCR
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    
    mov.l   TLB3, r2            ; the 8th instructon before branch 
    
    jmp     @r2                 ; jump to cached region
    nop
    
    .align 4
TLB3:    .data.l TLB4
TLB4: 
    rts
    nop
    
    .endf

    .end
