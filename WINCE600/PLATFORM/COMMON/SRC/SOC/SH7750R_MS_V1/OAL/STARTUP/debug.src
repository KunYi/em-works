;
; Copyright (c) Microsoft Corporation.  All rights reserved.
;
;
; Use of this sample source code is subject to the terms of the Microsoft
; license agreement under which you licensed this sample source code. If
; you did not accept the terms of the license agreement, you are not
; authorized to use this sample source code. For the terms of the license,
; please see the license agreement between you and Microsoft or, if applicable,
; see the LICENSE.RTF on your install media or the root of your tools installation.
; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES.
;
;;-----------------------------------------------------------------------------
;;
;;  File:  debug.src
;;
;;  This file has some assembly code that is useful for debugging the startup
;;  routine. Essentially, these snippets of code should be macros
;;
;;-----------------------------------------------------------------------------

;AlphaS: mov.l   #0xA401007C, r5     ; Alpha LED location
;        mov.l   #0x0F, r6           ; Init mask value
;        mov.l   #0x30, r9           ; Hex value of ascii '0'
;        mov.l   #0, r8              ; Number of rotations so far
;        mov.l   #0, r10             ; Compare value
;
;AlphaL: cmp/eq  r10, r6             ; Check to see if the mask has been shifted out
;        bt      AlphaE
;        nop
;
;        mov.l   r0, r7              ; Copy value to print to scratch register
;        and     r6, r7              ; Mask out useless bits
;        shld    r8, r7              ; Rotate right -r8 bits
;
;        mov.l   #0x30, r9
;        mov.l   #10, r10            ; Check if the value should be a character
;        cmp/ge  r7, r10             
;        bt      AlphaC
;        nop
;        sub     r10, r7             ; The character is [A-F]
;        mov.l   #0x41, r9
;
;AlphaC: add     r9, r7              ; Convert r7 to ascii
;        mov.b   r7, @r5             ; Copy to LED Buffer
;
;        mov.l   #4, r7
;        sub     r7, r5              ; Update the location in the LED Buffer
;        sub     r7, r8              ; Update the number of mask rotations
;        shll2   r6
;        shll2   r6                  ; Rotate the mask 4 bits
;
;        mov.l   #0, r10
;        bra     AlphaL              ; Loop around
;AlphaE: nop
;
;        mov.l   #0x00010000, r1
;Loop0:  dt      r1
;        bf      Loop0
;        nop
