//------------------------------------------------------------------------------
//
//  Copyright (C) 2007-2009, Freescale Semiconductor, Inc. All Rights Reserved.
//  THIS SOURCE CODE, AND ITS USE AND DISTRIBUTION, IS SUBJECT TO THE TERMS
//  AND CONDITIONS OF THE APPLICABLE LICENSE AGREEMENT
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//
//  Header:  tve.h
//
//  Provides definitions for the TV encoder V2 chip.
//
//------------------------------------------------------------------------------

#ifndef __TVE_H
#define __TVE_H

#include "tve_sdk.h"

// TVE Events 

#define TVE_INTR_EVENT                   L"Tve Interrupt Event"
  
#define TVE_FIELD_EVENT_NAME             L"Tve Field Event"
#define TVE_FRAME_EVENT_NAME             L"Tve Frame Event"
#define TVE_CGMS_F2_EVENT_NAME           L"Tve CGMS F2 Event"
#define TVE_CGMS_F1_EVENT_NAME           L"Tve CGMS F1 Event"
#define TVE_CC_F2_EVENT_NAME             L"Tve CC F2 Event"
#define TVE_CC_F1_EVENT_NAME             L"Tve CC F1 Event"
#define TVE_CD_MON_EVENT_NAME            L"Tve CD Mon Event"
#define TVE_CD_SM_EVENT_NAME             L"Tve CD SM Event"
#define TVE_CD_LM_EVENT_NAME             L"Tve CD LM Event"

static BOOL bIntrThreadLoop;             // Interrupt thread loop flag
static HANDLE hTveIST = NULL;
static DWORD dwSysIntr;                  // System Interrupt ID

//------------------------------------------------------------------------------
// Defines
//------------------------------------------------------------------------------
#define TVE_WAIT_TIMEOUT                    1000

#define TVE_S297_CLK                        297   // 297MHz for HD
#define TVE_S148_5_CLK                      148.5 // 148.5MHz for HD

#define TVE_S216_CLK                        216  // 216MHz for SD
#define TVE_S108_CLK                        108  // 108MHz for SD
#define TVE_S54_CLK                         54   // 54MHz for SD
#define TVE_S27_CLK                         27   // 27MHz for SD
 
//------------------------------------------------------------------------------
// Types
//------------------------------------------------------------------------------


#define TVE_FUNCTION_ENTRY() \
    DEBUGMSG(1, (TEXT("++%s\r\n"), __WFUNCTION__))
#define TVE_FUNCTION_EXIT() \
    DEBUGMSG(1, (TEXT("--%s\r\n"), __WFUNCTION__))


typedef enum {
    TVE_CD_TRIGGER_IN_MANUAL = 0, // "on demand" ( on the trigger control generated by software), when CD_TRIG_MODE is 1.
    TVE_CD_TRIGGER_IN_STANDBY,    // standby mode, when TV_OUT_MODE is 000 and CD_TRIG_MODE is 0.
    TVE_CD_TRIGGER_IN_FUNC,       // normal operation mode, when TV_OUT_MODE is 000 and CD_TRIG_MODE is 0.
} TVE_CABLE_DETECTION_MODE;

typedef enum {
    SD_SAMPLING_RATE_216MHZ   = 0,
    SD_SAMPLING_RATE_108MHZ   = 1,
    SD_SAMPLING_RATE_54MHZ    = 2,
    SD_SAMPLING_RATE_27MHZ    = 3,
    HD_SAMPLING_RATE_297MHZ   = 0,
    HD_SAMPLING_RATE_148_5MHZ = 1,
    SAMPLING_RATE_NONE        = -1  // invaild sampleing rate
} TVE_TVDAC_SAMPLING_RATE;

typedef enum {
    IPU_VIDEO_DATA_BUS1          = 0,
    IPU_VIDEO_DATA_BUS2          = 1,
    EXTERNAL_TEST_DATA_BUS       = 2,
    INTERNAL_COLOR_BAR_GENERATOR = 3
} TVE_INPUT_DATA_SOURCE;

typedef enum {
    VIDEO_YCBCR422          = 0,
    VIDEO_YCBCR444          = 1
} TVE_INPUT_VIDEO_FORM;

//-------------------------------------------------------------------------------------------------------
// Functions
//-------------------------------------------------------------------------------------------------------
class TveClass
{

    public:
    
        // tve.cpp
        TveClass();
        ~TveClass();

        BOOL TveInit(void);
        BOOL TveDeinit(void);
        BOOL TveEnable(void);
        BOOL TveDisable(void);
        
        // tve_vbi.cpp
        void TveSetVBIControlReg();
       
        BOOL TveSetClosedCaption(TVECC cc_f1_odd_field_data, TVECC cc_f2_even_field_data);
        void TveSetCgmsWssFor625LinePAL(UINT32 cgms_f1_wss_data);
        void TveSetCgmsWssFor525LineNTSC(UINT32 cgms_f1_wss_data, UINT32 cgms_f2_data);
        
        void TveSetHDCgmsBHeader(UINT32 cgms_hdb_f1_header, UINT32 cgms_hdb_f2_header);
        void TveSetHDCgmsAData(UINT32 cgms_f1_data, UINT32 cgms_f2_data);
        void TveSetHDCgmsBData(TVEHDCgmsBInfo *pCgmsInfo);
        
        
        PTVEV2_REGS         m_pTVE;
        TVE_TV_OUT_MODE     m_eTVOutputMode; 
        TVE_TV_STAND        m_eTVStd; 
        TVE_TV_RES_SIZE     m_eTVResSize; 
        BOOL                m_bHD; // True is for HD, False is for SD.
    private:
        
         // tve.cpp
        void TveConfigureCommonReg(TVE_TVDAC_SAMPLING_RATE sampling_rate, TVE_INPUT_DATA_SOURCE data_source,
                                   TVE_INPUT_VIDEO_FORM video_form);
        void TveConfigureInterruptCtrlReg();
        void TveConfigureLumaCtrlReg();
        void TveConfigureChromaCtrlReg();                             
        static void WINAPI TveIST(LPVOID lpParameter);
        void TveISTLoop(UINT32 timeout);
        BOOL TveSetClock(DWORD clock_frequency);
        void TveDumpRegs();
        
        // tve_cd.cpp
        BOOL TveSetCableDetection(TVE_CABLE_DETECTION_MODE cd_mode);
        BOOL TveIsCableDetected();

        // tve_tvdac.cpp
        TVE_TVDAC_SAMPLING_RATE TveGetTVDACSampleRateByClock(DWORD tveClock);
        void TveSetClockBySamplingRate(TVE_TVDAC_SAMPLING_RATE sampleRate);
        
        HANDLE m_hTveIntrEvent;    // TVE Interrupt Event

        HANDLE m_hTveFieldEvent;   // TVE Field Event
        HANDLE m_hTveFrameEvent;   // TVE Frame Event
        HANDLE m_hTveCgmsF2Event;  // TVE CGMS F2 Event 
        HANDLE m_hTveCgmsF1Event;  // TVE CGMS F1 Event
        HANDLE m_hTveCcF2Event;    // TVE CC F2 Event
        HANDLE m_hTveCcF1Event;    // TVE CC F1 Event
        HANDLE m_hTveCdMonEvent;   // TVE CD MON Event
        HANDLE m_hTveCdSmEvent;    // TVE CD SM Event
        HANDLE m_hTveCdLmEvent;    // TVE CD LM Event
    

};


#endif // __TVE_H


