;
; Copyright (c) Microsoft Corporation.  All rights reserved.
;
;
; Use of this source code is subject to the terms of the Microsoft end-user
; license agreement (EULA) under which you licensed this SOFTWARE PRODUCT.
; If you did not accept the terms of the EULA, you are not authorized to use
; this source code. For a copy of the EULA, please see the LICENSE.RTF on your
; install media.
;
;------------------------------------------------------------------------------
;
;  Copyright (C) 2004-2009, Freescale Semiconductor, Inc. All Rights Reserved.
;  THIS SOURCE CODE, AND ITS USE AND DISTRIBUTION, IS SUBJECT TO THE TERMS
;  AND CONDITIONS OF THE APPLICABLE LICENSE AGREEMENT
;
;------------------------------------------------------------------------------
;
;  File:  image_cfg.inc
;
;  Defines configuration parameters used to create the NK and Bootloader
;  program images.
;
;------------------------------------------------------------------------------

    IF  !:DEF: image_cfg_inc
image_cfg_inc    EQU 1


;;------------------------------------------------------------------------------
;;  RESTRICTION
;;
;;  This file is a configuration file. It should ONLY contain simple #define 
;;  directives defining constants. This file is included by other files that 
;;  only support simple substitutions.
;;
;;------------------------------------------------------------------------------

;;------------------------------------------------------------------------------
;;  NAMING CONVENTION
;;
;;  The IMAGE_ naming convention ...
;;
;;  IMAGE_<NAME>_<SECTION>_<MEMORY_DEVICE>_[OFFSET|SIZE|START|END]
;;
;;      <NAME>          - WINCE, BOOT, SHARE
;;      <SECTION>       - section name: user defined
;;      <MEMORY_DEVICE> - the memory device the block resides on
;;      OFFSET          - number of bytes from memory device start address
;;      SIZE            - maximum size of the block
;;      START           - start address of block    (device address + offset)
;;      END             - end address of block      (start address  + size - 1)
;;
;;------------------------------------------------------------------------------

;;------------------------------------------------------------------------------
;; RAM image defines
IMAGE_BOOT_RAMDEV_RAM_PA_START      EQU     CSP_BASE_MEM_PA_CSD0  ;; 64 MB RAM CSD0
IMAGE_BOOT_RAMDEV_RAM_UA_START      EQU     (0xA0000000)
IMAGE_BOOT_RAMDEV_RAM_CA_START      EQU     (0x80000000)
IMAGE_BOOT_RAMDEV_RAM_SIZE          EQU     (64*1024*1024)
IMAGE_BOOT_RAMDEV_RAM_PA_END        EQU     (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_RAMDEV_RAM_SIZE-1)

IMAGE_SHARE_ARGS_RAM_OFFSET         EQU     (0)
IMAGE_SHARE_ARGS_RAM_PA_START       EQU     (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_SHARE_ARGS_RAM_OFFSET)
IMAGE_SHARE_ARGS_RAM_UA_START       EQU     (IMAGE_BOOT_RAMDEV_RAM_UA_START+IMAGE_SHARE_ARGS_RAM_OFFSET)
IMAGE_SHARE_ARGS_RAM_SIZE           EQU     (4*1024)

;; XLDR and Boot Stack share the region
IMAGE_BOOT_XLDR_RAM_OFFSET          EQU     (IMAGE_SHARE_ARGS_RAM_OFFSET+IMAGE_SHARE_ARGS_RAM_SIZE)
IMAGE_BOOT_XLDR_RAM_START           EQU     (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_XLDR_RAM_OFFSET)
IMAGE_BOOT_XLDR_RAM_SIZE            EQU     (236*1024)
;; Stack grows downward.  Start must be at top of reserved region.
IMAGE_BOOT_STACK_RAM_PA_START       EQU     (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_XLDR_RAM_OFFSET+IMAGE_BOOT_XLDR_RAM_SIZE)
IMAGE_BOOT_STACK_RAM_CA_START       EQU     (IMAGE_BOOT_RAMDEV_RAM_CA_START+IMAGE_BOOT_XLDR_RAM_OFFSET+IMAGE_BOOT_XLDR_RAM_SIZE)

IMAGE_BOOT_BOOTPT_RAM_OFFSET        EQU     (IMAGE_BOOT_XLDR_RAM_OFFSET+IMAGE_BOOT_XLDR_RAM_SIZE)
IMAGE_BOOT_BOOTPT_RAM_PA_START      EQU     (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_BOOTPT_RAM_OFFSET)
IMAGE_BOOT_BOOTPT_RAM_SIZE          EQU     (16*1024)
IMAGE_BOOT_BOOTPT_RAM_PA_END        EQU     (IMAGE_BOOT_BOOTPT_RAM_PA_START+IMAGE_BOOT_BOOTPT_RAM_SIZE-1)

IMAGE_BOOT_BOOTIMAGE_RAM_OFFSET     EQU     (IMAGE_BOOT_BOOTPT_RAM_OFFSET+IMAGE_BOOT_BOOTPT_RAM_SIZE)
IMAGE_BOOT_BOOTIMAGE_RAM_PA_START   EQU     (IMAGE_BOOT_RAMDEV_RAM_PA_START+IMAGE_BOOT_BOOTIMAGE_RAM_OFFSET)
IMAGE_BOOT_BOOTIMAGE_RAM_SIZE       EQU     (256*1024)
IMAGE_BOOT_BOOTIMAGE_RAM_PA_END     EQU     (IMAGE_BOOT_BOOTIMAGE_RAM_PA_START+IMAGE_BOOT_BOOTIMAGE_RAM_SIZE-1)


;;------------------------------------------------------------------------------
;; NAND flash image defines

;; NOTE:  EBOOT assumes these NAND regions are block-aligned

;; Define a special unused SOC address range that can be used to detect when an
;; image is destined for NAND flash
IMAGE_BOOT_NANDDEV_NAND_PA_START    EQU     CSP_BASE_REG_PA_NANDFC
;IMAGE_BOOT_NANDDEV_RESERVED_SIZE    EQU     (36 * 1024 * 1024)
;IMAGE_BOOT_NANDDEV_RESERVED_SIZE    EQU     (40 * 1024 * 1024)			;CS&ZHL MAY-17-2011
IMAGE_BOOT_NANDDEV_RESERVED_SIZE    EQU     (42 * 1024 * 1024)			;CS&ZHL AUG-12-2011
IMAGE_BOOT_NANDDEV_NAND_PA_END      EQU     (IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_NANDDEV_RESERVED_SIZE-1)

;
; CS&ZHL MAY-17-2011: assume BlockSize = 128 * 2048  = 256KB
;                                      re-allocate all items as follows
;
IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET		EQU		(0)
IMAGE_BOOT_XLDRIMAGE_NAND_PA_START	EQU		(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET)
IMAGE_BOOT_XLDRIMAGE_NAND_SIZE				EQU		(1 * 128 * 2048)				; -> 1 Block
IMAGE_BOOT_XLDRIMAGE_NAND_PA_END		EQU		(IMAGE_BOOT_XLDRIMAGE_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE-1)

;EBOOT_START = 0x0004_0000
IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET		EQU		(IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE)
IMAGE_BOOT_BOOTIMAGE_NAND_PA_START	EQU		(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET)
IMAGE_BOOT_BOOTIMAGE_NAND_SIZE			EQU		(2 * 128 * 2048)				; -> 2 Blocks, use 1 block = 256KB only
IMAGE_BOOT_BOOTIMAGE_NAND_PA_END		EQU		(IMAGE_BOOT_BOOTIMAGE_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_SIZE-1)

;EBOOT_CFG_START = 0x000C_0000
IMAGE_BOOT_BOOTCFG_NAND_OFFSET			EQU		(IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET + IMAGE_BOOT_BOOTIMAGE_NAND_SIZE)
IMAGE_BOOT_BOOTCFG_NAND_PA_START		EQU		(IMAGE_BOOT_NANDDEV_NAND_PA_START + IMAGE_BOOT_BOOTCFG_NAND_OFFSET)
IMAGE_BOOT_BOOTCFG_NAND_SIZE				EQU		(2 * 128 * 2048)				; -> 2 Blocks, use size <= 128KB
IMAGE_BOOT_BOOTCFG_NAND_PA_END			EQU		(IMAGE_BOOT_BOOTCFG_NAND_PA_START + IMAGE_BOOT_BOOTCFG_NAND_SIZE-1)

;SPLASH_START = 0x0014_0000
IMAGE_BOOT_SPLASH_NAND_OFFSET				EQU		(IMAGE_BOOT_BOOTCFG_NAND_OFFSET + IMAGE_BOOT_BOOTCFG_NAND_SIZE)
IMAGE_BOOT_SPLASH_NAND_PA_START			EQU		(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_SPLASH_NAND_OFFSET)
IMAGE_BOOT_SPLASH_NAND_SIZE					EQU		(3 * 128 * 2048)				; -> 3 blocks, use size = 470KB

;MBR_START = 0x0020_0000 for BinFS, MBR = Master Boot Record
IMAGE_BOOT_MBR_NAND_OFFSET					EQU		(IMAGE_BOOT_SPLASH_NAND_OFFSET + IMAGE_BOOT_SPLASH_NAND_SIZE)
IMAGE_BOOT_MBR_NAND_PA_START				EQU		(IMAGE_BOOT_NANDDEV_NAND_PA_START + IMAGE_BOOT_MBR_NAND_OFFSET)
IMAGE_BOOT_MBR_NAND_SIZE						EQU		(2 * 128 * 2048)				; -> 2 blocks, use size = 128KB

;NK_START = 0x0028_0000
IMAGE_BOOT_NKIMAGE_NAND_OFFSET			EQU		(IMAGE_BOOT_MBR_NAND_OFFSET + IMAGE_BOOT_MBR_NAND_SIZE)
IMAGE_BOOT_NKIMAGE_NAND_PA_START		EQU		(IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_OFFSET)
;CS&ZHL MAY-26-2011: change to 37.5MB
;IMAGE_BOOT_NKIMAGE_NAND_SIZE				EQU		(150 * 128 * 2048)			; -> 150 blocks = 150 * 256KB = 37.5MB
;CS&ZHL MAY-26-2011: change to 39.5MB
IMAGE_BOOT_NKIMAGE_NAND_SIZE					EQU		(158 * 128 * 2048)			; -> 158 blocks = 158 * 256KB = 39.5MB
IMAGE_BOOT_NKIMAGE_NAND_PA_END			EQU		(IMAGE_BOOT_NKIMAGE_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_SIZE-1)

;CS&ZHL MAY-17-2011: comment old config...
;IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET		EQU     (0)
;IMAGE_BOOT_XLDRIMAGE_NAND_PA_START	EQU     (IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET)
;IMAGE_BOOT_XLDRIMAGE_NAND_SIZE				EQU     (3 * 128 * 4096)
;IMAGE_BOOT_XLDRIMAGE_NAND_PA_END		EQU     (IMAGE_BOOT_XLDRIMAGE_NAND_PA_START+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE-1)
;
;IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET    EQU     (IMAGE_BOOT_XLDRIMAGE_NAND_OFFSET+IMAGE_BOOT_XLDRIMAGE_NAND_SIZE)
;IMAGE_BOOT_BOOTIMAGE_NAND_PA_START  EQU     (IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET)
;IMAGE_BOOT_BOOTIMAGE_NAND_SIZE      EQU     (2 * 128 * 4096)
;IMAGE_BOOT_BOOTIMAGE_NAND_PA_END    EQU     (IMAGE_BOOT_BOOTIMAGE_NAND_PA_START+IMAGE_BOOT_BOOTIMAGE_NAND_SIZE-1)
;
;IMAGE_BOOT_NKIMAGE_NAND_OFFSET      EQU     (IMAGE_BOOT_BOOTIMAGE_NAND_OFFSET+IMAGE_BOOT_BOOTIMAGE_NAND_SIZE)
;IMAGE_BOOT_NKIMAGE_NAND_PA_START    EQU     (IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_OFFSET)
;IMAGE_BOOT_NKIMAGE_NAND_SIZE        EQU     (32 * 1024 * 1024)
;IMAGE_BOOT_NKIMAGE_NAND_PA_END      EQU     (IMAGE_BOOT_NKIMAGE_NAND_PA_START+IMAGE_BOOT_NKIMAGE_NAND_SIZE-1)
;
;; Last 256K of NAND reserved for boot configuration
;IMAGE_BOOT_BOOTCFG_NAND_OFFSET      EQU     (IMAGE_BOOT_NKIMAGE_NAND_OFFSET + IMAGE_BOOT_NKIMAGE_NAND_SIZE)
;IMAGE_BOOT_BOOTCFG_NAND_PA_START    EQU     (IMAGE_BOOT_NANDDEV_NAND_PA_START+IMAGE_BOOT_BOOTCFG_NAND_OFFSET)
;IMAGE_BOOT_BOOTCFG_NAND_SIZE        EQU     (2 * 128 * 4096)
;IMAGE_BOOT_BOOTCFG_NAND_PA_END      EQU     (IMAGE_BOOT_BOOTCFG_NAND_PA_START+IMAGE_BOOT_BOOTCFG_NAND_SIZE-1)


;------------------------------------------------------------------------------
; SDHC flash image defines

; NOTE:  EBOOT/SBOOT assumes these SDHC regions are block-aligned

; Define a special unused SOC address range that can be used to detect when an
; image is destined for SD/MMC Memory
; Assuming a minimum size of 36MB card to support all images
IMAGE_BOOT_SDHCDEV_SD_PA_START      EQU     CSP_BASE_MEM_PA_IRAM
IMAGE_BOOT_SDHCDEV_SD_SIZE          EQU     (36*1024*1024)
IMAGE_BOOT_SDHCDEV_SD_PA_END        EQU     (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_SDHCDEV_SD_SIZE-1)

IMAGE_BOOT_MBR_SD_OFFSET            EQU     (0)
IMAGE_BOOT_MBR_SD_PA_START          EQU     (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_MBR_SD_OFFSET)
IMAGE_BOOT_MBR_SD_SIZE              EQU     (1024)
IMAGE_BOOT_MBR_SD_PA_END            EQU     (IMAGE_BOOT_MBR_SD_PA_START+IMAGE_BOOT_MBR_SD_SIZE-1)

IMAGE_BOOT_XLDRIMAGE_SD_OFFSET      EQU     (IMAGE_BOOT_MBR_SD_OFFSET+IMAGE_BOOT_MBR_SD_SIZE)
IMAGE_BOOT_XLDRIMAGE_SD_PA_START    EQU     (IMAGE_BOOT_MBR_SD_PA_START+IMAGE_BOOT_XLDRIMAGE_SD_OFFSET)
IMAGE_BOOT_XLDRIMAGE_SD_SIZE        EQU     (127*1024)
IMAGE_BOOT_XLDRIMAGE_SD_PA_END      EQU     (IMAGE_BOOT_XLDRIMAGE_SD_PA_START+IMAGE_BOOT_XLDRIMAGE_SD_SIZE-1)

IMAGE_BOOT_BOOTIMAGE_SD_OFFSET      EQU     (IMAGE_BOOT_XLDRIMAGE_SD_OFFSET+IMAGE_BOOT_XLDRIMAGE_SD_SIZE)
IMAGE_BOOT_BOOTIMAGE_SD_PA_START    EQU     (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_BOOTIMAGE_SD_OFFSET)
IMAGE_BOOT_BOOTIMAGE_SD_SIZE        EQU     (256*1024)
IMAGE_BOOT_BOOTIMAGE_SD_PA_END      EQU     (IMAGE_BOOT_BOOTIMAGE_SD_PA_START+IMAGE_BOOT_BOOTIMAGE_SD_SIZE-1)

; next 128K  reserved for boot configuration
IMAGE_BOOT_BOOTCFG_SD_OFFSET        EQU     (IMAGE_BOOT_BOOTIMAGE_SD_OFFSET+IMAGE_BOOT_BOOTIMAGE_SD_SIZE)
IMAGE_BOOT_BOOTCFG_SD_PA_START      EQU     (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_BOOTCFG_SD_OFFSET)
IMAGE_BOOT_BOOTCFG_SD_SIZE          EQU     (128*1024)
IMAGE_BOOT_BOOTCFG_SD_PA_END        EQU     (IMAGE_BOOT_BOOTCFG_SD_PA_START+IMAGE_BOOT_BOOTCFG_SD_SIZE-1)

; Remaining space for NK
IMAGE_BOOT_NKIMAGE_SD_OFFSET        EQU     (IMAGE_BOOT_BOOTCFG_SD_OFFSET+IMAGE_BOOT_BOOTCFG_SD_SIZE)
IMAGE_BOOT_NKIMAGE_SD_PA_START      EQU     (IMAGE_BOOT_SDHCDEV_SD_PA_START+IMAGE_BOOT_NKIMAGE_SD_OFFSET)
IMAGE_BOOT_NKIMAGE_SD_SIZE          EQU     (IMAGE_BOOT_SDHCDEV_SD_SIZE-IMAGE_BOOT_NKIMAGE_SD_OFFSET)
IMAGE_BOOT_NKIMAGE_SD_PA_END        EQU     (IMAGE_BOOT_NKIMAGE_SD_PA_START+IMAGE_BOOT_NKIMAGE_SD_SIZE-1)

;;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; I2C EEPROM image defines
; Define a special unused SOC address range that can be used to detect when an
; image is destined for I2C EEPROM
IMAGE_BOOT_I2CDEV_ROM_PA_START      EQU    CSP_BASE_MEM_PA_CSD1
IMAGE_BOOT_I2CDEV_ROM_SIZE          EQU    (4*1024)
IMAGE_BOOT_I2CDEV_ROM_PA_END        EQU    (IMAGE_BOOT_I2CDEV_ROM_SIZE+IMAGE_BOOT_I2CDEV_ROM_SIZE-1)

IMAGE_BOOT_XLDRIMAGE_I2C_ROM_OFFSET     EQU     (0)
IMAGE_BOOT_XLDRIMAGE_I2C_ROM_PA_START   EQU     (IMAGE_BOOT_I2CDEV_ROM_PA_START+IMAGE_BOOT_XLDRIMAGE_I2C_ROM_OFFSET)
IMAGE_BOOT_XLDRIMAGE_I2C_ROM_SIZE       EQU     (8*1024)
IMAGE_BOOT_XLDRIMAGE_I2C_ROM_PA_END     EQU     (IMAGE_BOOT_XLDRIMAGE_I2C_ROM_PA_START+IMAGE_BOOT_XLDRIMAGE_I2C_ROM_SIZE-1)

;;------------------------------------------------------------------------------

;;------------------------------------------------------------------------------
;; SPI flash image defines

;; NOTE:  EBOOT/SBOOT assumes these SPI regions are block-aligned

;; Define a special unused SOC address range that can be used to detect when an
;; image is destined for SPI Flash
IMAGE_BOOT_SPIDEV_FLASH_PA_START    EQU     CSP_BASE_MEM_PA_CSD1 + (64*1024*1024)
IMAGE_BOOT_SPIDEV_FLASH_SIZE        EQU     (2*1024*1024)
IMAGE_BOOT_SPIDEV_FLASH_PA_END      EQU     (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_SPIDEV_FLASH_SIZE-1)

IMAGE_BOOT_XLDRIMAGE_SPI_OFFSET     EQU     (0)
IMAGE_BOOT_XLDRIMAGE_SPI_PA_START   EQU     (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_XLDRIMAGE_SPI_OFFSET)
IMAGE_BOOT_XLDRIMAGE_SPI_SIZE       EQU     (64*1024)
IMAGE_BOOT_XLDRIMAGE_SPI_PA_END     EQU     (IMAGE_BOOT_XLDRIMAGE_SPI_PA_START+IMAGE_BOOT_XLDRIMAGE_SPI_SIZE-1)

IMAGE_BOOT_BOOTIMAGE_SPI_OFFSET     EQU     (IMAGE_BOOT_XLDRIMAGE_SPI_OFFSET+IMAGE_BOOT_XLDRIMAGE_SPI_SIZE)
IMAGE_BOOT_BOOTIMAGE_SPI_PA_START   EQU     (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_BOOTIMAGE_SPI_OFFSET)
IMAGE_BOOT_BOOTIMAGE_SPI_SIZE       EQU     (256*1024)
IMAGE_BOOT_BOOTIMAGE_SPI_PA_END     EQU     (IMAGE_BOOT_BOOTIMAGE_SPI_PA_START+IMAGE_BOOT_BOOTIMAGE_SPI_SIZE-1)

;; Last 128K of 2MB SPI Flash reserved for boot configuration
IMAGE_BOOT_BOOTCFG_SPI_SIZE         EQU     (128*1024)
IMAGE_BOOT_BOOTCFG_SPI_OFFSET       EQU     (IMAGE_BOOT_SPIDEV_FLASH_SIZE-IMAGE_BOOT_BOOTCFG_SPI_SIZE)
IMAGE_BOOT_BOOTCFG_SPI_PA_START     EQU     (IMAGE_BOOT_SPIDEV_FLASH_PA_START+IMAGE_BOOT_BOOTCFG_SPI_OFFSET)
IMAGE_BOOT_BOOTCFG_SPI_PA_END       EQU     (IMAGE_BOOT_BOOTCFG_SPI_PA_START+IMAGE_BOOT_BOOTCFG_SPI_SIZE-1)

;;------------------------------------------------------------------------------

    ENDIF
    END

