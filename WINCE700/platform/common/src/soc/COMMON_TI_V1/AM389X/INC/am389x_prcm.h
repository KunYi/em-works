//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

/*
================================================================================
*             Texas Instruments OMAP(TM) Platform Software
* (c) Copyright Texas Instruments, Incorporated. All Rights Reserved.
*
* Use of this software is controlled by the terms and conditions found
* in the license agreement under which this software has been supplied.
*
================================================================================
*/

//------------------------------------------------------------------------------
//
//  File:  am389x_prcm.h
//
//  This header file is comprised of PRCM module register details defined as 
//  structures and macros for configuring and controlling PRCM module.

#ifndef __AM389X_PRCM_H
#define __AM389X_PRCM_H

#include "omap_types.h"

#define PRCM_OFS(field) ((LONG)&(((AM389X_PRCM_REGS*)0)->field)) 

//------------------------------------------------------------------------------
// On AM389 the CM module has 0x48180000 base address
typedef struct {
// RPM_DEVICE
	UINT32	res_0000_00BC[40];
	REG32	PRM_DEVICE;			// 0x00A0
	REG32	PRM_RSTTIME;		// 0x00A4
	REG32	PRM_RSTST;			// 0x00A8
	UINT32	res_00AC_00FC[21];
// CM DEVICE
	REG32	CM_CLKOUT_CTRL;			// 0x100
	UINT32	res_0104_01FC[63];
// OCP_SOCKET_PRM	 
	REG32	REVISION_PRM;		// 0x0200
	UINT32	res_0204_020C[3];
	REG32	PRM_IRQSTATUS_MPU;	// 0x0210
	UINT32	res_0214;
	REG32	PRM_IRQENABLE_MPU;	// 0x0218
	UINT32	res_021C;
	REG32	PRM_IRQSTATUS_SECURITY_SS;	// 0x0220
	UINT32	res_0224;
	REG32	PRM_IRQENABLE_SECURITY_SS;	// 0x0228
	UINT32	res_022C_0240[6];
	REG32	PRM_IRQSTATUS_GEMSS;		// 0x0244
	REG32	PRM_IRQENABLE_GEMSS;		// 0x0248
	UINT32	res_024C;
	REG32	PRM_IRQSTATUS_DUCATI;		// 0x0250
	REG32	PRM_IRQENABLE_DUCATI;		// 0x0254
	REG32	PRM_IRQSTATUS_IVA0;			// 0x0258
	REG32	PRM_IRQENABLE_IVA0;			// 0x025C
	REG32	PRM_IRQSTATUS_IVA1;			// 0x0260
	REG32	PRM_IRQENABLE_IVA1;			// 0x0264
	REG32	PRM_IRQSTATUS_IVA2;			// 0x0268
	REG32	PRM_IRQENABLE_IVA2;			// 0x026C
	REG32	PRM_IRQSTATUS_TPP;			// 0x0270
	REG32	PRM_IRQENABLE_TPP;			// 0x0274
	UINT32	res_0278_02FC[34];
// CM_DPLL
	REG32	CM_SYSCLK1_CLKSEL;			// 0x0300
	REG32	CM_SYSCLK2_CLKSEL;			// 0x0304
	REG32	CM_SYSCLK3_CLKSEL;			// 0x0308
	REG32	CM_SYSCLK4_CLKSEL;			// 0x030C
	REG32	CM_SYSCLK5_CLKSEL;			// 0x0310
	REG32	CM_SYSCLK6_CLKSEL;			// 0x0314
	REG32	CM_SYSCLK7_CLKSEL;			// 0x0318
	UINT32	res_031C_0320[2];
	REG32	CM_SYSCLK10_CLKSEL;			// 0x0324
	UINT32	res_0328;
	REG32	CM_SYSCLK11_CLKSEL;			// 0x032C
	REG32	CM_SYSCLK12_CLKSEL;			// 0x0330
	REG32	CM_SYSCLK13_CLKSEL;			// 0x0334
	REG32	CM_SYSCLK15_CLKSEL;			// 0x0338
	UINT32	res_033C;
	REG32	CM_VPB3_CLKSEl;				// 0x0340
	REG32	CM_VPC1_CLKSEL;				// 0x0344
	REG32	CM_VPD1_CLKSEL;				// 0x0348
	REG32	CM_SYSCLK19_CLKSEL;			// 0x034C
	REG32	CM_SYSCLK20_CLKSEL;			// 0x0350
	REG32	CM_SYSCLK21_CLKSEL;			// 0x0354
	REG32	CM_SYSCLK22_CLKSEL;			// 0x0358
	REG32	CM_APA_CLKSEL;				// 0x035C
	UINT32	res_0360_036C[4];
	REG32	CM_SYSCLK14_CLKSEL;			// 0x0370
	REG32	CM_SYSCLK16_CLKSEL;			// 0x0374
	REG32	CM_SYSCLK18_CLKSEL;			// 0x0378
	REG32	CM_AUDIOCLK_MCASP0_CLKSEL;	// 0x037C
	REG32	CM_AUDIOCLK_MCASP1_CLKSEL;	// 0x0380
	REG32	CM_AUDIOCLK_MCASP2_CLKSEL;	// 0x0384
	REG32	CM_AUDIOCLK_MCBSP_CLKSEL;	// 0x0388
	UINT32	res_038C;
	REG32	CM_TIMER1_CLKSEL;			// 0x0390
	REG32	CM_TIMER2_CLKSEL;			// 0x0394
	REG32	CM_TIMER3_CLKSEL;			// 0x0398
	REG32	CM_TIMER4_CLKSEL;			// 0x039C
	REG32	CM_TIMER5_CLKSEL;			// 0x03A0
	REG32	CM_TIMER6_CLKSEL;			// 0x03A4
	REG32	CM_TIMER7_CLKSEL;			// 0x03A8
	REG32	CM_HDMI_CLKSEL;				// 0x03AC
	REG32	CM_SYSCLK23_CLKSEL;			// 0x03B0
	REG32	CM_SYSCLK24_CLKSEL;			// 0x03B4
	UINT32  res_03B8_03FC[18];
// CM_ACTIVE
	REG32	CM_GEM_CLKSTCTRL;			// 0x0400
	REG32	CM_HDDSS_CLKSTCTRL;			// 0x0404
	REG32	CM_HDMI_CLKSTCTRL;			// 0x0408
	UINT32	res_040C_041C[5];
	REG32	CM_ACTIVE_GEM_CLKCTRL;		// 0x0420
	REG32	CM_ACTIVE_HDDSS_CLKCTRL;	// 0x0424
	REG32	CM_ACTIVE_HDMI_CLKCTRL;		// 0x0428
	UINT32	res_042C_04FC[53];
// CM_DEFAULT
	UINT32	res_0500;
	REG32	CM_DEFAULT_L3_MED_CLKSTCTRL;	// 0x0504
	REG32	CM_DEFAULT_L3_FAST_CLKSTCTRL;	// 0x0508
	REG32	CM_DEFAULT_TPPSS_CLKSTCTRL;		// 0x050C
	REG32	CM_DEFAULT_PCI_CLKSTCTRL;		// 0x0510
	REG32	CM_DEFAULT_L3_SLOW_CLKSTCTRL;	// 0x0514
	REG32	CM_DEFAULT_DUCATI_CLKSTCTRL;	// 0x0518
	UINT32	res_051C;
	REG32	CM_DEFAULT_EMIF_0_CLKCTRL;		// 0x0520
	REG32	CM_DEFAULT_EMIF_1_CLKCTRL;		// 0x0524
	REG32	CM_DEFAULT_DMM_CLKCTRL;			// 0x0528
	REG32	CM_DEFAULT_FW_CLKCTRL;			// 0x052C
	UINT32	res_0530_0550[9];
	REG32	CM_DEFAULT_TPPSS_CLKCTRL;		// 0x0554
	REG32	CM_DEFAULT_USB_CLKCTRL;			// 0x0558
	UINT32	res_055C;
	REG32	CM_DEFAULT_SATA_CLKCTRL;		// 0x0560
	UINT32	res_0564_0570[4];
	REG32	CM_DEFAULT_DUCATI_CLKCTRL;		// 0x0574
	REG32	CM_DEFAULT_PCI_CLKCTRL;			// 0x0578
	UINT32	res_057C_05FC[33];
// CM_IVAHD0
	REG32	CM_IVAHD0_CLKSTCTRL;			// 0x0600
	UINT32	res_0604_061C[7];
	REG32	CM_IVAHD0_IVAHD_CLKCTRL;		// 0x0620
	REG32	CM_IVAHD0_SL2_CLKCTRL;			// 0x0624
	UINT32	res_0628_06FC[54];
// CM_IVAHD1
	REG32	CM_IVAHD1_CLKSTCTRL;			// 0x0700
	UINT32	res_0704_071C[7];
	REG32	CM_IVAHD1_IVAHD_CLKCTRL;		// 0x0720
	REG32	CM_IVAHD1_SL2_CLKCTRL;			// 0x0724
	UINT32	res_0728_07FC[54];
// CM_IVAHD0
	REG32	CM_IVAHD2_CLKSTCTRL;			// 0x0800
	UINT32	res_0804_081C[7];
	REG32	CM_IVAHD2_IVAHD_CLKCTRL;		// 0x0820
	REG32	CM_IVAHD2_SL2_CLKCTRL;			// 0x0824
	UINT32	res_0828_08FC[54];
// CM_SGX
	REG32	CM_SGX_CLKSTCTRL;				// 0x0900
	UINT32	res_0904_091C[7];
	REG32	CM_SGX_SGX_CLKCTRL;				// 0x0920
	UINT32	res_0924_09FC[55];
// PRM_ACTIVE
	REG32	PM_ACTIVE_PWRSTCTRL;			// 0x0A00
	REG32	PM_ACTIVE_PWRSTST;				// 0x0A04
	UINT32	res_0A08_0A1C[2];
	REG32	RM_ACTIVE_RSTCTRL;				// 0x0A10
	REG32	RM_ACTIVE_RSTST;				// 0x0A14
	UINT32	res_0A18_0AFC[58];
// RPM_DEFAULT
	REG32	PM_DEFAULT_PWRSTCTRL;			// 0x0B00
	REG32	PM_DEFAULT_PWRSTST;				// 0x0B04
	UINT32	res_0B08_0B1C[2];
	REG32	RM_DEFAULT_RSTCTRL;				// 0x0B10
	REG32	RM_DEFAULT_RSTST;				// 0x0B14
	UINT32	res_0B18_0BFC[58];
// PRM_IVAHD0
	REG32	PM_IVAHD0_PWRSTCTRL;			// 0x0C00
	REG32	PM_IVAHD0_PWRSTST;				// 0x0C04
	UINT32	res_0C08_0C1C[2];
	REG32	RM_IVAHD0_RSTCTRL;				// 0x0C10
	REG32	RM_IVAHD0_RSTST;				// 0x0C14
	UINT32	res_0C18_0CFC[58];
// PRM_IVAHD1
	REG32	PM_IVAHD1_PWRSTCTRL;			// 0x0D00
	REG32	PM_IVAHD1_PWRSTST;				// 0x0D04
	UINT32	res_0D08_0D1C[2];
	REG32	RM_IVAHD1_RSTCTRL;				// 0x0D10
	REG32	RM_IVAHD1_RSTST;				// 0x0D14
	UINT32	res_0D18_0DFC[58];
// PRM_IVAHD2
	REG32	PM_IVAHD2_PWRSTCTRL;			// 0x0E00
	REG32	PM_IVAHD2_PWRSTST;				// 0x0E04
	UINT32	res_0E08_0E1C[2];
	REG32	RM_IVAHD2_RSTCTRL;				// 0x0E10
	REG32	RM_IVAHD2_RSTST;				// 0x0E14
	UINT32	res_0E18_0EFC[58];
// RPM_SGX
	REG32	PM_SGX_PWRSTCTRL;				// 0x0F00
	REG32	RM_SGX_RSTCTRL;					// 0x0F04
	UINT32	res_0F08_0F1C[2];
	REG32	PM_SGX_PWRSTST;					// 0x0F10
	REG32	RM_SGX_RSTST;					// 0x0F14
	UINT32	res_0F18_0FFC[58];
//
	UINT32	res_1000_13FC[64*4];
// CM_ALWON
	REG32	CM_ALWON_L3_SLOW_CLKSTCTRL;		// 0x1400
	REG32	CM_ETHERNET_CLKSTCTRL;			// 0x1404
	REG32	CM_ALWON_L3_MED_CLKSTCTRL;		// 0x1408
	REG32	CM_MMU_CLKSTCTRL;				// 0x140C
	REG32	CM_MMUCFG_CLKSTCTRL;			// 0x1410
	REG32	CM_ALWON_OCMC_0_CLKSTCTRL;		// 0x1414
	REG32	CM_ALWON_OCMC_1_CLKSTCTRL;		// 0x1418
	REG32	CM_ALWON_MPU_CLKSTCTRL;			// 0x141C
	REG32	CM_ALWON_SYSCLK4_CLKSTCTRL;		// 0x1420
	REG32	CM_ALWON_SYSCLK5_CLKSTCTRL;		// 0x1424
	REG32	CM_ALWON_SYSCLK6_CLKSTCTRL;		// 0x1428
	REG32	CM_ALWON_RTC_CLKSTCTRL;			// 0x142C
	REG32	CM_ALWON_L3_FAST_CLKSTCTRL;		// 0x1430
	UINT32	res_1434_153C[67];
	REG32	CM_ALWON_MCASP0_CLKCTRL;		// 0x1540
	REG32	CM_ALWON_MCASP1_CLKCTRL;		// 0x1544
	REG32	CM_ALWON_MCASP2_CLKCTRL;		// 0x1548
	REG32	CM_ALWON_MCBSP_CLKCTRL;			// 0x154C
	REG32	CM_ALWON_UART_0_CLKCTRL;		// 0x1550
	REG32	CM_ALWON_UART_1_CLKCTRL;		// 0x1554
	REG32	CM_ALWON_UART_2_CLKCTRL;		// 0x1558
	REG32	CM_ALWON_GPIO_0_CLKCTRL;		// 0x155C
	REG32	CM_ALWON_GPIO_1_CLKCTRL;		// 0x1560
	REG32	CM_ALWON_I2C_0_CLKCTRL;			// 0x1564
	REG32	CM_ALWON_I2C_1_CLKCTRL;			// 0x1568
	REG32	CM_ALWON_TIMER_0_CLKCTRL;		// 0x156C
	REG32	CM_ALWON_TIMER_1_CLKCTRL;		// 0x1570
	REG32	CM_ALWON_TIMER_2_CLKCTRL;		// 0x1574
	REG32	CM_ALWON_TIMER_3_CLKCTRL;		// 0x1578
	REG32	CM_ALWON_TIMER_4_CLKCTRL;		// 0x157C
	REG32	CM_ALWON_TIMER_5_CLKCTRL;		// 0x1580
	REG32	CM_ALWON_TIMER_6_CLKCTRL;		// 0x1584
	REG32	CM_ALWON_TIMER_7_CLKCTRL;		// 0x1588
	REG32	CM_ALWON_WDTIMER_CLKCTRL;		// 0x158C
	REG32	CM_ALWON_SPI_CLKCTRL;			// 0x1590
	REG32	CM_ALWON_MAILBOX_CLKCTRL;		// 0x1594
	REG32	CM_ALWON_SPINBOX_CLKCTRL;		// 0x1598
	REG32	CM_ALWON_MMUDATA_CLKCTRL;		// 0x159C
	REG32	CM_ALWON_VLYNQ_CLKCTRL;			// 0x15A0
	UINT32	res_15A4;
	REG32	CM_ALWON_MMUCFG_CLKCTRL;		// 0x15A8
	UINT32	res_15AC;
	REG32	CM_ALWON_SDIO_CLKCTRL;			// 0x15B0
	REG32	CM_ALWON_OCMC_0_CLKCTRL;		// 0x15B4
	REG32	CM_ALWON_OCMC_1_CLKCTRL;		// 0x15B8
	REG32	CM_ALWON_SMARTCARD_0_CLKCTRL;	// 0x15BC
	REG32	CM_ALWON_SMARTCARD_1_CLKCTRL;	// 0x15C0
	REG32	CM_ALWON_CONTROL_CLKCTRL;		// 0x15C4
	REG32	CM_ALWON_SECSS_CLKCTRL;			// 0x15C8
	UINT32	res_15CC;
	REG32	CM_ALWON_GPMC_CLKCTRL;			// 0x15D0
	REG32	CM_ALWON_ETHERNET_0_CLKCTRL;	// 0x15D4
	REG32	CM_ALWON_ETHERNET_1_CLKCTRL;	// 0x15D8
	REG32	CM_ALWON_MPU_CLKCTRL;			// 0x15DC
	REG32	CM_ALWON_DEBUGSS_CLKCTRL;		// 0x15E0
	REG32	CM_ALWON_L3_CLKCTRL;			// 0x15E4
	REG32	CM_ALWON_L4HS_CLKCTRL;			// 0x15E8
	REG32	CM_ALWON_L4LS_CLKCTRL;			// 0x15EC
	REG32	CM_ALWON_RTC_CLKCTRL;			// 0x15F0
	REG32	CM_ALWON_TPCC_CLKCTRL;			// 0x15F4
	REG32	CM_ALWON_TPTC0_CLKCTRL;			// 0x15F8
	REG32	CM_ALWON_TPTC1_CLKCTRL;			// 0x15FC
	REG32	CM_ALWON_TPTC2_CLKCTRL;			// 0x1600
	REG32	CM_ALWON_TPTC3_CLKCTRL;			// 0x1604
	REG32	CM_ALWON_SR_0_CLKCTRL;			// 0x1608
	REG32	CM_ALWON_SR_1_CLKCTRL;			// 0x160C
	REG32	CM_ALWON_SR_2_CLKCTRL;			// 0x1610
	REG32	CM_ALWON_SR_3_CLKCTRL;			// 0x1614
	REG32	CM_ALWON_SR_4_CLKCTRL;			// 0x1618
	REG32	CM_ALWON_SR_5_CLKCTRL;			// 0x161C
	REG32	CM_ALWON_SR_6_CLKCTRL;			// 0x1620
	REG32	CM_ALWON_SR_7_CLKCTRL;			// 0x1624
	REG32	CM_ALWON_CUST_EFUSE_CLKCTRL;	// 0x1628
	UINT32	res_162C_17FC[117];
// PRM_ALWON
	UINT32	res_1800;
	REG32	PM_EFUSE_PWRSTST;				// 0x1804
	UINT32	res_1808_180C[2];
	REG32	RM_ALWON_RSTCTRL;				// 0x1810
	REG32	RM_ALWON_RSTST;					// 0x1814
	UINT32	res_1818_1BFC[250];
} AM389X_PRCM_REGS;


//-----------------------------------------------------------------------------
// sysconfig flags
//
#define SYSCONFIG_AUTOIDLE                  (1 << 0)
#define SYSCONFIG_SOFTRESET                 (1 << 1)

#define SYSSTATUS_RESETDONE                 (1 << 0)

#define SYSCONFIG_ENAWAKEUP                 (1 << 2)

#define SYSCONFIG_FORCEIDLE                 (0 << 3)
#define SYSCONFIG_NOIDLE                    (1 << 3)
#define SYSCONFIG_SMARTIDLE                 (2 << 3)
#define SYSCONFIG_IDLE_MASK                 (3 << 3)

#define CLKREQ_POL_ACTIVELOW                (0 << 1)
#define CLKREQ_POL                          (1 << 1)

// defines sys_vmode signal
#define EXTVOL_POL_ACTIVEHIGH               (1 << 0)
#define EXTVOL_POL_ACTIVELOW                (0 << 0)
#define EXTVOL_POL                          (1 << 0)

#define EXTERNALWARM_RST                    (1 << 5)
#define GLOBALWARM_RST                      (1 << 1)
#define GLOBALCOLD_RST                      (1 << 0)

// prcm reset flags - from DM816 TRM (internal PRCM doc has more flags per register)

// active domain
#define GEM_SW_RST                          (1 << 1)
#define GEM_LRST                            (1 << 0)

// default domain
#define PCI_LRST                            (1 << 7)
#define USB2_LRST                           (1 << 6)
#define USB1_LRST                           (1 << 5)
#define DUCATI_RST3                         (1 << 4)
#define DUCATI_M3_RST2                      (1 << 3)
#define DUCATI_M3_RST1                      (1 << 2)

//IVAHD domain
#define IVAn_RST3                           (1 << 2)
#define IVAn_RST2                           (1 << 1)
#define IVAn_RST1                           (1 << 0)

//SGX domain
#define SGX_RST                             (1 << 0)




#endif
