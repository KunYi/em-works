// All rights reserved ADENEO EMBEDDED 2010
/*
================================================================================
*             Texas Instruments OMAP(TM) Platform Software
* (c) Copyright Texas Instruments, Incorporated. All Rights Reserved.
*
* Use of this software is controlled by the terms and conditions found
* in the license agreement under which this software has been supplied.
*
================================================================================
*/
/*
*  File:  am3517_usbotg.h
*/
#ifndef __AM3517_USBOTG_H
#define __AM3517_USBOTG_H

#define CPPI41_HD_COUNT_POW2		9
#define CPPI41_HD_COUNT				(1 << CPPI41_HD_COUNT_POW2)
#define CPPI41_FREE_DESC_QUEUE		0x01
#define CPPI41_FREE_DESC_BUF_QUEUE	0x02
#define CPPI41_UNASSIGNED_QUEUE 	0x04
#define CPPI41_MAX_MEM_RGN			16
#define CPPI41_MAX_TX_CHANNELS		15
#define CPPI41_MAX_RX_CHANNELS		15
#define CPPI41_CH_NUM_PD			64
#define CPPI41_NUM_EPTS				15
#define CPPI41_NUM_CHANNELS			(CPPI41_MAX_TX_CHANNELS+CPPI41_MAX_RX_CHANNELS)
#define CPPI41_NUM_QUEUES			64
#define CPPI41_MAX_PD				(CPPI41_CH_NUM_PD*CPPI41_NUM_CHANNELS)
#define CPPI41_DESC_SIZE_SHIFT		6
#define CPPI41_DESC_ALIGN			(1 << CPPI41_DESC_SIZE_SHIFT)

#define CPPI41_SRC_TAG_PORT_NUM_SHIFT	27
#define CPPI41_SRC_TAG_PORT_NUM_MASK	(0x1F << CPPI41_SRC_TAG_PORT_NUM_SHIFT)
#define CPPI41_SRC_TAG_CH_NUM_SHIFT		21
#define CPPI41_SRC_TAG_CH_NUM_MASK		(0x3F << CPPI41_SRC_TAG_CH_NUM_SHIFT)
#define CPPI41_SRC_TAG_SUB_CH_NUM_SHIFT 16
#define CPPI41_SRC_TAG_SUB_CH_NUM_MASK	(0x1F << CPPI41_SRC_TAG_SUB_CH_NUM_SHIFT)
#define CPPI41_DEST_TAG_SHIFT			0
#define CPPI41_DEST_TAG_MASK			(0xFFFF << CPPI41_DEST_TAG_SHIFT)

#define CPPI41_TD_DESC_DIR_SHIFT		16
#define CPPI41_TD_DESC_DIR_MASK			(1 << CPPI41_TD_DESC_DIR_SHIFT)
#define CPPI41_TD_DESC_CHAN_SHIFT		0
#define CPPI41_TD_DESC_CHAN_MASK		(0x1F << CPPI41_TD_DESC_CHAN_SHIFT)

#define CPPI41_PKT_ERROR_SHIFT			31
#define CPPI41_PKT_ERROR_MASK			(1 << CPPI41_PKT_ERROR_SHIFT)
#define CPPI41_PKT_TYPE_SHIFT			26
#define CPPI41_PKT_TYPE_MASK			(0x1F << CPPI41_PKT_TYPE_SHIFT)
#define CPPI41_PKT_TYPE_ATM_AAL5		0
#define CPPI41_PKT_TYPE_ATM_NULL_AAL	1
#define CPPI41_PKT_TYPE_ATM_OAM			2
#define CPPI41_PKT_TYPE_ATM_TRANSPARENT	3
#define CPPI41_PKT_TYPE_EFM				4
#define CPPI41_PKT_TYPE_USB				5
#define CPPI41_PKT_TYPE_GENERIC			6
#define CPPI41_PKT_TYPE_ETHERNET 		7
#define CPPI41_PKT_RETPLCY_SHIFT		15
#define CPPI41_PKT_RETPLCY_FULL			0
#define CPPI41_PKT_FLAGS_ZLP			(1 << 19)
#define CPPI41_HD_BUF_LENGTH_MASK		0x003FFFFF
#define CPPI41_HD_PKT_LENGTH_MASK		0x003FFFFF
#define CPPI41_DESC_LOC_SHIFT			14
#define CPPI41_DESC_LOC_OFFCHIP			0
#define CPPI41_PKT_RETQMGR_SHIFT		12
#define CPPI41_PKT_RETQ_SHIFT			0
#define CPPI41_RETURN_POLICY_SHIFT		15
#define CPPI41_RETURN_POLICY_MASK 		(1 << CPPI41_RETURN_POLICY_SHIFT)
#define CPPI41_RETURN_LINKED			0
#define CPPI41_RETURN_UNLINKED			1
#define CPPI41_ONCHIP_SHIFT				14
#define CPPI41_ONCHIP_MASK				(1 << CPPI41_ONCHIP_SHIFT)
#define CPPI41_RETURN_QMGR_SHIFT 		12
#define CPPI41_RETURN_QMGR_MASK			(3 << CPPI41_RETURN_QMGR_SHIFT)
#define CPPI41_RETURN_QNUM_SHIFT 		0
#define CPPI41_RETURN_QNUM_MASK			(0xFFF << CPPI41_RETURN_QNUM_SHIFT)
#define CPPI41_DESC_TYPE_SHIFT			27
#define CPPI41_DESC_TYPE_MASK			(0x1F << CPPI41_DESC_TYPE_SHIFT)
#define CPPI41_DESC_TYPE_HOST			16
#define CPPI41_DESC_TYPE_MONOLITHIC		18
#define CPPI41_DESC_TYPE_TEARDOWN		19
#define CPPI41_DESC_WORDS_SHIFT			22
#define CPPI41_DESC_TAGINFO2_EP_SHIFT	0
#define CPPI41_DESC_TAGINFO2_CHAN_SHIFT	4
#define CPPI41_DESC_TAGINFO2_CHAN_MASK	(0x1F << CPPI41_DESC_TAGINFO2_CHAN_SHIFT)
#define CPPI41_DESC_TAGINFO2_TX_SHIFT	9

#define	MENTOR_CORE_OFFSET	0x400	
#define QUEUE_MGR_OFFSET	0x4000
#define MEM_REGION_OFFSET	0x5000
#define QUEUE_OFFSET		0x6000

//
//  High Speed USB OTG Controller Registers
//

typedef struct
{
	REG32 TX_CHANNEL_GLOBAL_CONF;			/* 0x00 */
	PAD(1,REG32,0x0000,0x0008);
	REG32 RX_CHANNEL_GLOBAL_CONF;			/* 0x08 */
	REG32 RX_CHANNEL_HOST_PACKET_CONF_A;	/* 0x0C */
	REG32 RX_CHANNEL_HOST_PACKET_CONF_B;	/* 0x10 */
	REG32 RX_CHANNEL_EMBED_PACKET_CONF_A;	/* 0x14 */
	REG32 RX_CHANNEL_EMBED_PACKET_CONF_B;	/* 0x18 */
	REG32 RX_CHANNEL_MONO_PACKET_CONF;		/* 0x1C */

} AM3517_OTG_CHANNEL_REGS;

typedef struct
{
	REG32 DMA_REVISION;						/* 0x00 */
	REG32 DMA_TEARDOWN_FREE_DESC_CTRL;		/* 0x04 */
	REG32 DMA_EMULATION_CTRL;				/* 0x08 */

} AM3517_OTG_GLOBAL_CTRL_REGS;

typedef struct
{
	REG32 SCHED_CONTROL;					/* 0x0000 */
	PAD(1,REG32,0x0000,0x0800);
	REG32 SCHED_TABLE_WORD[64];				/* 0x0800 */

} AM3517_OTG_CDMA_REGS;

typedef struct
{
	REG32 BASE_ADDR;						/* 0x0000 */
	REG32 CONTROL;							/* 0x0004 */
	PAD(1,REG32,0x0004,0x0010);

} AM3517_OTG_MEM_REGION_REGS;

typedef struct
{
	struct 
	{
		REG32 QUEUE_REG_A;						/* 0x0000 */
		REG32 QUEUE_REG_B;						/* 0x0004 */
		REG32 QUEUE_REG_C;						/* 0x0008 */
		REG32 QUEUE_REG_D;						/* 0x000C */
	} QUEUE_REGS[CPPI41_NUM_QUEUES];
	
	PAD(1,REG32,(CPPI41_NUM_QUEUES*0x10 - 0x04),0x6800);

	struct 
	{
		REG32 QUEUE_STATUS_REG_A;				/* 0x0000 */
		REG32 QUEUE_STATUS_REG_B;				/* 0x0004 */
		REG32 QUEUE_STATUS_REG_C;				/* 0x0008 */
		PAD(1,REG32,0x0008,0x0010);
	} QUEUE_STATUS_REGS[CPPI41_NUM_QUEUES];

} AM3517_OTG_QUEUE_REGS;

typedef struct
{
	REG32 REVISION;							/* 0x0000 */
	REG32 QUEUE_DIVERSION;					/* 0x0004 */
	PAD(1,REG32,0x0004,0x0020);
	REG32 FREE_DESC_BUFF_STARV_COUNT[8];	/* 0x0020 */
	PAD(2,REG32,0x003C,0x0080);
	REG32 LINK_RAM_REGION_0_BASE_ADDR;		/* 0x0080 */ 
	REG32 LINK_RAM_REGION_0_SIZE;			/* 0x0084 */ 
	REG32 LINK_RAM_REGION_1_BASE_ADDR;		/* 0x0088 */ 
	PAD(3,REG32,0x0088,0x0090);
	REG32 QUEUE_PENDING_0;					/* 0x0090 */
	REG32 QUEUE_PENDING_1;					/* 0x0094 */
	REG32 QUEUE_PENDING_2;					/* 0x0098 */

} AM3517_OTG_QUEUE_MGR_REGS;

typedef struct
{
	REG32 REVISION;							/* 0x0000 */               
    REG32 CONTROL;							/* 0x0004 */				
    REG32 STATUS;							/* 0x0008 */	
	PAD(1,REG32,0x0008,0x0014);
	REG32 AUTO_REQ;							/* 0x0014 */
	PAD(2,REG32,0x0014,0x001C);
	REG32 TEARDOWN;							/* 0x001C */
	REG32 EPT_INT_SRC;						/* 0x0020 */
	REG32 EPT_INT_SRC_SET;					/* 0x0024 */
	REG32 EPT_INT_SRC_CLR;					/* 0x0028 */
	REG32 EPT_INT_MASK;						/* 0x002C */
	REG32 EPT_INT_MASK_SET;					/* 0x0030 */
	REG32 EPT_INT_MASK_CLR;					/* 0x0034 */
	REG32 EPT_INT_SRC_MASKED;				/* 0x0038 */
	PAD(3,REG32,0x0038,0x0040);
	REG32 CORE_INT_SRC;						/* 0x0040 */
	REG32 CORE_INT_SRC_SET;					/* 0x0044 */
	REG32 CORE_INT_SRC_CLR;					/* 0x0048 */
	REG32 CORE_INT_MASK;					/* 0x004C */
	REG32 CORE_INT_MASK_SET;				/* 0x0050 */
	REG32 CORE_INT_MASK_CLR;				/* 0x0054 */
	REG32 CORE_INT_SRC_MASKED;				/* 0x0058 */
	PAD(4,REG32,0x0058,0x0060);
	REG32 END_OF_INT;						/* 0x0060 */
	REG32 MOP_SOP_INT_EN;					/* 0x0064 */
	PAD(5,REG32,0x0064,0x0070);
	REG32 TX_MODE;							/* 0x0070 */
	REG32 RX_MODE;							/* 0x0074 */
	REG32 EPT_COUNT_MODE;					/* 0x0078 */
	PAD(6,REG32,0x0078,0x0080);
	REG32 RNDIS_SIZE_EPT[CPPI41_NUM_EPTS];	/* 0x0080 */
	PAD(7,REG32,0x00B8,0x00C0);
	REG32 QUEUE_INT_THRS_EN;				/* 0x00C0 */
	REG32 QUEUE_THRS_0;						/* 0x00C4 */
	REG32 QUEUE_INT_CLR_0;					/* 0x00C8 */
	PAD(8,REG32,0x00C8,0x00D4);
	REG32 QUEUE_THRS_1;						/* 0x00D4 */
	REG32 QUEUE_INT_CLR_1;					/* 0x00D8 */
	PAD(9,REG32,0x00D8,0x1000);
	AM3517_OTG_GLOBAL_CTRL_REGS GLOBAL_CTRL;/* 0x1000 */
	PAD(10,REG32,0x1008,0x1800);
	AM3517_OTG_CHANNEL_REGS CHANNELS[CPPI41_NUM_CHANNELS];	/* 0x1800 */
	PAD(11,REG32,0x1BBC,0x2000);
	AM3517_OTG_CDMA_REGS CDMA;								/* 0x2000 */

} AM3517_OTG_REGS;

// AM3517_OTG_REGS.STATUS
#define OTG_STATUS_DRVVBUS_MASK		(1 <<  0)

// AM3517_OTG_REGS.CONTROL
#define OTG_CONTROL_DIS_DEB			(1 << 31)
#define OTG_CONTROL_DIS_SRP			(1 << 30)
#define OTG_CONTROL_RNDIS			(1 <<  4)
#define OTG_CONTROL_UINT			(1 <<  3)
#define OTG_CONTROL_CLK_FACK		(1 <<  1)
#define OTG_CONTROL_RESET			(1 <<  0)

// DMA_TEARDOWN_FREE_DESC_CTRL
#define DMA_TD_DESC_QMGR_SHIFT		12
#define DMA_TD_DESC_QMGR_MASK		(3 << DMA_TD_DESC_QMGR_SHIFT)
#define DMA_TD_DESC_QNUM_SHIFT		0
#define DMA_TD_DESC_QNUM_MASK		(0xFFFF << DMA_TD_DESC_QNUM_SHIFT)

// AM3517_OTG_MEM_REGION_REGS.CONTROL
#define QMGR_MEM_RGN_INDEX_SHIFT		16
#define QMGR_MEM_RGN_INDEX_MASK 		(0x3FFF << QMGR_MEM_RGN_INDEX_SHIFT)
#define QMGR_MEM_RGN_DESC_SIZE_SHIFT	8
#define QMGR_MEM_RGN_DESC_SIZE_MASK		(0xF << QMGR_MEM_RGN_DESC_SIZE_SHIFT)
#define QMGR_MEM_RGN_SIZE_SHIFT 		0
#define QMGR_MEM_RGN_SIZE_MASK			(7 << QMGR_MEM_RGN_SIZE_SHIFT)

// AM3517_OTG_QUEUE_REGS.QUEUE_REG_D
#define QMGR_QUEUE_DESC_PTR_SHIFT	5
#define QMGR_QUEUE_DESC_PTR_MASK	(0x7FFFFFFF << QMGR_QUEUE_DESC_PTR_SHIFT)
#define QMGR_QUEUE_DESC_SIZE_SHIFT	0
#define QMGR_QUEUE_DESC_SIZE_MASK	(0x1F << QMGR_QUEUE_DESC_SIZE_SHIFT)

// AM3517_OTG_REGS.CDMA.SCHED_CONTROL
#define DMA_SCHED_ENABLE_SHIFT		31
#define DMA_SCHED_ENABLE_MASK		(1 << DMA_SCHED_ENABLE_SHIFT)
#define DMA_SCHED_LAST_ENTRY_SHIFT	0
#define DMA_SCHED_LAST_ENTRY_MASK	(0xFF << DMA_SCHED_LAST_ENTRY_SHIFT)

// AM3517_OTG_QUEUE_MGR_REGS.QUEUE_PENDING_0
#define QUEUE_N_BITMASK(x)			(1 << (x % 32))

// AM3517_OTG_QUEUE_MGR_REGS.QUEUE_PENDING_1
#define QUEUE_63_BITMASK			(1 << 31)

// AM3517_OTG_QUEUE_MGR_REGS.QUEUE_PENDING_2
#define QUEUE_64_BITMASK			(1 <<  0)
#define QUEUE_65_BITMASK			(1 <<  1)
#define QUEUE_66_BITMASK			(1 <<  2)

// AM3517_OTG_REGS.CORE_INT_SRC
#define	CORE_INT_SRC_USB_SHIFT		16
#define	CORE_INT_SRC_USB_DRVVBUS	(0x100 << CORE_INT_SRC_USB_SHIFT)
#define CORE_INT_SRC_USB_VBUSERR	(0x080 << CORE_INT_SRC_USB_SHIFT)

// AM3517_OTG_REGS.CORE_INT_MASK
#define	CORE_INT_USB_SHIFT			16
#define	CORE_INT_USB_MASK			(0x1FF << CORE_INT_USB_SHIFT)

// AM3517_OTG_REGS.EPT_INT_MASK_CLR
#define EPT_INT_TX_SHIFT			0
#define EPT_INT_TX_MASK				(0xFFFF << EPT_INT_TX_SHIFT)
#define EPT_INT_RX_SHIFT			16
#define EPT_INT_RX_MASK				(0xFFFE << EPT_INT_RX_SHIFT)

// AM3517_OTG_CHANNEL_REGS.TX_CHANNEL_GLOBAL_CONF
#define DMA_CH_TX_ENABLE_SHIFT		 31
#define DMA_CH_TX_ENABLE_MASK		 (1 << DMA_CH_TX_ENABLE_SHIFT)
#define DMA_CH_TX_TEARDOWN_SHIFT	 30
#define DMA_CH_TX_TEARDOWN_MASK		 (1 << DMA_CH_TX_TEARDOWN_SHIFT)
#define DMA_CH_TX_DEFAULT_QMGR_SHIFT 12
#define DMA_CH_TX_DEFAULT_QMGR_MASK	 (3 << DMA_CH_TX_DEFAULT_QMGR_SHIFT)
#define DMA_CH_TX_DEFAULT_QNUM_SHIFT 0
#define DMA_CH_TX_DEFAULT_QNUM_MASK	 (0xFFF << DMA_CH_TX_DEFAULT_QNUM_SHIFT)

// AM3517_OTG_CHANNEL_REGS.RX_CHANNEL_GLOBAL_CONF
#define DMA_CH_RX_ENABLE_SHIFT				31
#define DMA_CH_RX_ENABLE_MASK				(1 << DMA_CH_RX_ENABLE_SHIFT)
#define DMA_CH_RX_TEARDOWN_SHIFT			30
#define DMA_CH_RX_TEARDOWN_MASK				(1 << DMA_CH_RX_TEARDOWN_SHIFT)
#define DMA_CH_RX_ERROR_HANDLING_SHIFT		24
#define DMA_CH_RX_ERROR_HANDLING_MASK		(1 << DMA_CH_RX_ERROR_HANDLING_SHIFT)
#define DMA_CH_RX_SOP_OFFSET_SHIFT			16
#define DMA_CH_RX_SOP_OFFSET_MASK			(0xFF << DMA_CH_RX_SOP_OFFSET_SHIFT)
#define DMA_CH_RX_DEFAULT_DESC_TYPE_SHIFT	14
#define DMA_CH_RX_DEFAULT_DESC_TYPE_MASK	(3 << DMA_CH_RX_DEFAULT_DESC_TYPE_SHIFT)
#define DMA_CH_RX_DEFAULT_DESC_EMBED		0
#define DMA_CH_RX_DEFAULT_DESC_HOST			1
#define DMA_CH_RX_DEFAULT_DESC_MONO			2
#define DMA_CH_RX_DEFAULT_RQ_QMGR_SHIFT		12
#define DMA_CH_RX_DEFAULT_RQ_QMGR_MASK		(3 << DMA_CH_RX_DEFAULT_RQ_QMGR_SHIFT)
#define DMA_CH_RX_DEFAULT_RQ_QNUM_SHIFT		0
#define DMA_CH_RX_DEFAULT_RQ_QNUM_MASK		(0xFFF << DMA_CH_RX_DEFAULT_RQ_QNUM_SHIFT)

// AM3517_OTG_CHANNEL_REGS.RX_CHANNEL_HOST_PACKET_CONF_A
#define DMA_CH_RX_HOST_FDQ_QMGR_SHIFT(n)	(12 + 16 * ((n) & 1))
#define DMA_CH_RX_HOST_FDQ_QMGR_MASK(n)		(3 << DMA_CH_RX_HOST_FDQ_QMGR_SHIFT(n))
#define DMA_CH_RX_HOST_FDQ_QNUM_SHIFT(n)	(0 + 16 * ((n) & 1))
#define DMA_CH_RX_HOST_FDQ_QNUM_MASK(n)		(0xFFF << DMA_CH_RX_HOST_FDQ_QNUM_SHIFT(n))
#define DMA_CH_RX_EMBED_FBP_BMGR_SHIFT(n)	(6 + 8 * (n))
#define DMA_CH_RX_EMBED_FBP_BMGR_MASK(n)	(3 << DMA_CH_RX_EMBED_FBP_BMGR_SHIFT(n))
#define DMA_CH_RX_EMBED_FBP_PNUM_SHIFT(n)	(0 + 8 * (n))
#define DMA_CH_RX_EMBED_FBP_PNUM_MASK(n)	(0x1F << DMA_CH_RX_EMBED_FBP_PNUM_SHIFT(n))

// AM3517_OTG_CHANNEL_REGS.TX_MODE/RX_MODE
#define CHANNEL_MODE_TRANSPARENT			0
#define CHANNEL_MODE_RNDIS					1
#define CHANNEL_MODE_CDC					2
#define CHANNEL_MODE_GENERIC_RNDIS			3
#define CHANNEL_MODE_SHIFT(n)				((((n) - 1) << 1))
#define CHANNEL_MODE_MASK(n)				(3 << CHANNEL_MODE_SHIFT(n))

// AM3517_OTG_REGS.TEARDOWN
#define TEARDOWN_TX_SHIFT(n)				(16 + (n))
#define TEARDOWN_TX_MASK(n)					(1 << TEARDOWN_TX_SHIFT(n))
#define TEARDOWN_RX_SHIFT(n)				(n)
#define TEARDOWN_RX_MASK(n)					(1 << TEARDOWN_RX_SHIFT(n))

#endif //__AM3517_USBOTG_H

